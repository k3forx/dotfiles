// Override key bindings by placing them into your key bindings file.
[
{ "key": "escape escape",         "command": "workbench.action.exitZenMode",
                                     "when": "inZenMode" },
{ "key": "shift+escape",          "command": "closeReferenceSearch",
                                     "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
{ "key": "escape",                "command": "closeReferenceSearch",
                                     "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
{ "key": "escape",                "command": "editor.closeTestPeek",
                                     "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek" },
{ "key": "shift+escape",          "command": "cancelSelection",
                                     "when": "editorHasSelection && textInputFocus" },
{ "key": "escape",                "command": "cancelSelection",
                                     "when": "editorHasSelection && textInputFocus" },
{ "key": "cmd+down",              "command": "cursorBottom",
                                     "when": "textInputFocus" },
{ "key": "shift+cmd+down",        "command": "cursorBottomSelect",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+down",    "command": "cursorColumnSelectDown",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+left",    "command": "cursorColumnSelectLeft",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+pagedown", "command": "cursorColumnSelectPageDown",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+pageup",  "command": "cursorColumnSelectPageUp",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+right",   "command": "cursorColumnSelectRight",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+up",      "command": "cursorColumnSelectUp",
                                     "when": "textInputFocus" },
{ "key": "ctrl+n",                "command": "cursorDown",
                                     "when": "textInputFocus" },
{ "key": "down",                  "command": "cursorDown",
                                     "when": "textInputFocus" },
{ "key": "shift+down",            "command": "cursorDownSelect",
                                     "when": "textInputFocus" },
{ "key": "cmd+right",             "command": "cursorEnd",
                                     "when": "textInputFocus",
                                     "args": {"sticky":false} },
{ "key": "end",                   "command": "cursorEnd",
                                     "when": "textInputFocus",
                                     "args": {"sticky":false} },
{ "key": "shift+cmd+right",       "command": "cursorEndSelect",
                                     "when": "textInputFocus",
                                     "args": {"sticky":false} },
{ "key": "shift+end",             "command": "cursorEndSelect",
                                     "when": "textInputFocus",
                                     "args": {"sticky":false} },
{ "key": "cmd+left",              "command": "cursorHome",
                                     "when": "textInputFocus" },
{ "key": "home",                  "command": "cursorHome",
                                     "when": "textInputFocus" },
{ "key": "shift+cmd+left",        "command": "cursorHomeSelect",
                                     "when": "textInputFocus" },
{ "key": "shift+home",            "command": "cursorHomeSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+b",                "command": "cursorLeft",
                                     "when": "textInputFocus" },
{ "key": "left",                  "command": "cursorLeft",
                                     "when": "textInputFocus" },
{ "key": "shift+left",            "command": "cursorLeftSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+e",                "command": "cursorLineEnd",
                                     "when": "textInputFocus" },
{ "key": "ctrl+shift+e",          "command": "cursorLineEndSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+a",                "command": "cursorLineStart",
                                     "when": "textInputFocus" },
{ "key": "ctrl+shift+a",          "command": "cursorLineStartSelect",
                                     "when": "textInputFocus" },
{ "key": "pagedown",              "command": "cursorPageDown",
                                     "when": "textInputFocus" },
{ "key": "shift+pagedown",        "command": "cursorPageDownSelect",
                                     "when": "textInputFocus" },
{ "key": "pageup",                "command": "cursorPageUp",
                                     "when": "textInputFocus" },
{ "key": "shift+pageup",          "command": "cursorPageUpSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+f",                "command": "cursorRight",
                                     "when": "textInputFocus" },
{ "key": "right",                 "command": "cursorRight",
                                     "when": "textInputFocus" },
{ "key": "shift+right",           "command": "cursorRightSelect",
                                     "when": "textInputFocus" },
{ "key": "cmd+up",                "command": "cursorTop",
                                     "when": "textInputFocus" },
{ "key": "shift+cmd+up",          "command": "cursorTopSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+p",                "command": "cursorUp",
                                     "when": "textInputFocus" },
{ "key": "up",                    "command": "cursorUp",
                                     "when": "textInputFocus" },
{ "key": "shift+up",              "command": "cursorUpSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+backspace",        "command": "deleteLeft",
                                     "when": "textInputFocus" },
{ "key": "ctrl+h",                "command": "deleteLeft",
                                     "when": "textInputFocus" },
{ "key": "shift+backspace",       "command": "deleteLeft",
                                     "when": "textInputFocus" },
{ "key": "backspace",             "command": "deleteLeft",
                                     "when": "textInputFocus" },
{ "key": "ctrl+delete",           "command": "deleteRight",
                                     "when": "textInputFocus" },
{ "key": "ctrl+d",                "command": "deleteRight",
                                     "when": "textInputFocus" },
{ "key": "delete",                "command": "deleteRight",
                                     "when": "textInputFocus" },
{ "key": "cmd+a",                 "command": "editor.action.selectAll" },
{ "key": "cmd+c",                 "command": "execCopy" },
{ "key": "cmd+x",                 "command": "execCut" },
{ "key": "cmd+v",                 "command": "execPaste" },
{ "key": "cmd+l",                 "command": "expandLineSelection",
                                     "when": "textInputFocus" },
{ "key": "cmd+down",              "command": "inlineChat.arrowOutDown",
                                     "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorLast && !accessibilityModeEnabled && !isEmbeddedDiffEditor" },
{ "key": "cmd+up",                "command": "inlineChat.arrowOutUp",
                                     "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorFirst && !accessibilityModeEnabled && !isEmbeddedDiffEditor" },
{ "key": "ctrl+o",                "command": "lineBreakInsert",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "shift+tab",             "command": "outdent",
                                     "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
{ "key": "shift+cmd+z",           "command": "redo" },
{ "key": "ctrl+pagedown",         "command": "scrollLineDown",
                                     "when": "textInputFocus" },
{ "key": "ctrl+pageup",           "command": "scrollLineUp",
                                     "when": "textInputFocus" },
{ "key": "cmd+pagedown",          "command": "scrollPageDown",
                                     "when": "textInputFocus" },
{ "key": "cmd+pageup",            "command": "scrollPageUp",
                                     "when": "textInputFocus" },
{ "key": "tab",                   "command": "tab",
                                     "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
{ "key": "cmd+z",                 "command": "undo" },
{ "key": "shift+down",            "command": "cursorColumnSelectDown",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+left",            "command": "cursorColumnSelectLeft",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+pagedown",        "command": "cursorColumnSelectPageDown",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+pageup",          "command": "cursorColumnSelectPageUp",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+right",           "command": "cursorColumnSelectRight",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+up",              "command": "cursorColumnSelectUp",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+escape",          "command": "removeSecondaryCursors",
                                     "when": "editorHasMultipleSelections && textInputFocus" },
{ "key": "escape",                "command": "removeSecondaryCursors",
                                     "when": "editorHasMultipleSelections && textInputFocus" },
{ "key": "cmd+down",              "command": "notebook.cell.chat.arrowOutDown",
                                     "when": "inlineChatFocused && inlineChatInnerCursorLast && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused" },
{ "key": "cmd+up",                "command": "notebook.cell.chat.arrowOutUp",
                                     "when": "inlineChatFocused && inlineChatInnerCursorFirst && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused" },
{ "key": "cmd+up",                "command": "notebook.cell.focusChatWidget",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
{ "key": "cmd+down",              "command": "notebook.cell.focusNextChatWidget",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
{ "key": "cmd+down",              "command": "inlineChat.focus",
                                     "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'above'" },
{ "key": "cmd+up",                "command": "inlineChat.focus",
                                     "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'below'" },
{ "key": "escape",                "command": "notebook.cell.chat.acceptChanges",
                                     "when": "inlineChatFocused && notebookCellChatFocused && notebookChatUserDidEdit && !notebookCellEditorFocused" },
{ "key": "down",                  "command": "notebook.cell.chat.nextFromHistory",
                                     "when": "inlineChatFocused && notebookCellChatFocused" },
{ "key": "up",                    "command": "notebook.cell.chat.previousFromHistory",
                                     "when": "inlineChatFocused && notebookCellChatFocused" },
{ "key": "f12",                   "command": "goToNextReference",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "f4",                    "command": "goToNextReference",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "shift+f12",             "command": "goToPreviousReference",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "shift+f4",              "command": "goToPreviousReference",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "cmd+enter",             "command": "refactorPreview.apply",
                                     "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'" },
{ "key": "alt+enter",             "command": "testing.editFocusedTest",
                                     "when": "focusedView == 'workbench.view.testing'" },
{ "key": "escape",                "command": "notebook.cell.quitEdit",
                                     "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused" },
{ "key": "ctrl+enter",            "command": "notebook.cell.quitEdit",
                                     "when": "inputFocus && notebookEditorFocused && !inlineChatFocused && notebookCellType == 'markup'" },
{ "key": "escape",                "command": "inlineChat.discard",
                                     "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatUserDidEdit" },
{ "key": "cmd+f",                 "command": "actions.find",
                                     "when": "editorFocus || editorIsOpen" },
{ "key": "cmd+e",                 "command": "actions.findWithSelection" },
{ "key": "enter",                 "command": "breakpointWidget.action.acceptInput",
                                     "when": "breakpointWidgetVisible && inBreakpointWidget" },
{ "key": "cmd+up",                "command": "chat.action.focus",
                                     "when": "chatCursorAtTop && inChatInput && chatLocation == 'panel'" },
{ "key": "cmd+up",                "command": "chat.action.focus",
                                     "when": "inChatInput && isLinux && chatLocation == 'panel' || inChatInput && isWindows && chatLocation == 'panel'" },
{ "key": "shift+escape",          "command": "closeBreakpointWidget",
                                     "when": "breakpointWidgetVisible && textInputFocus" },
{ "key": "escape",                "command": "closeBreakpointWidget",
                                     "when": "breakpointWidgetVisible && textInputFocus" },
{ "key": "cmd+u",                 "command": "cursorUndo",
                                     "when": "textInputFocus" },
{ "key": "alt+right",             "command": "cursorWordEndRight",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+right",       "command": "cursorWordEndRightSelect",
                                     "when": "textInputFocus" },
{ "key": "alt+left",              "command": "cursorWordLeft",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+left",        "command": "cursorWordLeftSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+alt+left",         "command": "cursorWordPartLeft",
                                     "when": "textInputFocus" },
{ "key": "ctrl+shift+alt+left",   "command": "cursorWordPartLeftSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+alt+right",        "command": "cursorWordPartRight",
                                     "when": "textInputFocus" },
{ "key": "ctrl+shift+alt+right",  "command": "cursorWordPartRightSelect",
                                     "when": "textInputFocus" },
{ "key": "cmd+backspace",         "command": "deleteAllLeft",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "cmd+delete",            "command": "deleteAllRight",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "ctrl+k",                "command": "deleteAllRight",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "alt+backspace",         "command": "deleteWordLeft",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "ctrl+alt+backspace",    "command": "deleteWordPartLeft",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "ctrl+alt+delete",       "command": "deleteWordPartRight",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "alt+delete",            "command": "deleteWordRight",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "f7",                    "command": "editor.action.accessibleDiffViewer.next",
                                     "when": "isInDiffEditor" },
{ "key": "shift+f7",              "command": "editor.action.accessibleDiffViewer.prev",
                                     "when": "isInDiffEditor" },
{ "key": "cmd+k cmd+c",           "command": "editor.action.addCommentLine",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+d",                 "command": "editor.action.addSelectionToNextFindMatch",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+.",             "command": "editor.action.autoFix",
                                     "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/" },
{ "key": "shift+alt+a",           "command": "editor.action.blockComment",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "escape",                "command": "editor.action.cancelSelectionAnchor",
                                     "when": "editorTextFocus && selectionAnchorSet" },
{ "key": "cmd+f2",                "command": "editor.action.changeAll",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+c",                 "command": "editor.action.clipboardCopyAction" },
{ "key": "cmd+x",                 "command": "editor.action.clipboardCutAction" },
{ "key": "cmd+v",                 "command": "editor.action.clipboardPasteAction" },
{ "key": "cmd+/",                 "command": "editor.action.commentLine",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+alt+down",        "command": "editor.action.copyLinesDownAction",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+alt+up",          "command": "editor.action.copyLinesUpAction",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+k",           "command": "editor.action.deleteLines",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "alt+f3",                "command": "editor.action.dirtydiff.next",
                                     "when": "editorTextFocus && !textCompareEditorActive" },
{ "key": "shift+alt+f3",          "command": "editor.action.dirtydiff.previous",
                                     "when": "editorTextFocus && !textCompareEditorActive" },
{ "key": "enter",                 "command": "editor.action.extensioneditor.findNext",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
{ "key": "shift+enter",           "command": "editor.action.extensioneditor.findPrevious",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
{ "key": "cmd+f",                 "command": "editor.action.extensioneditor.showfind",
                                     "when": "!editorFocus && activeEditor == 'workbench.editor.extension'" },
{ "key": "shift+alt+f",           "command": "editor.action.formatDocument",
                                     "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor" },
{ "key": "shift+alt+f",           "command": "editor.action.formatDocument.none",
                                     "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly" },
{ "key": "cmd+k cmd+f",           "command": "editor.action.formatSelection",
                                     "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly" },
{ "key": "cmd+down",              "command": "editor.action.goToBottomHover",
                                     "when": "editorHoverFocused" },
{ "key": "end",                   "command": "editor.action.goToBottomHover",
                                     "when": "editorHoverFocused" },
{ "key": "enter",                 "command": "editor.action.goToFocusedStickyScrollLine",
                                     "when": "stickyScrollFocused" },
{ "key": "cmd+f12",               "command": "editor.action.goToImplementation",
                                     "when": "editorHasImplementationProvider && editorTextFocus" },
{ "key": "shift+f12",             "command": "editor.action.goToReferences",
                                     "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "cmd+up",                "command": "editor.action.goToTopHover",
                                     "when": "editorHoverFocused" },
{ "key": "home",                  "command": "editor.action.goToTopHover",
                                     "when": "editorHoverFocused" },
{ "key": "escape",                "command": "editor.action.hideColorPicker",
                                     "when": "standaloneColorPickerVisible" },
{ "key": "shift+cmd+.",           "command": "editor.action.inPlaceReplace.down",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+,",           "command": "editor.action.inPlaceReplace.up",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+]",                 "command": "editor.action.indentLines",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "escape",                "command": "editor.action.inlineEdit.reject",
                                     "when": "inlineEditVisible && !editorReadonly" },
{ "key": "escape",                "command": "editor.action.inlineEdits.hide",
                                     "when": "inlineEditsVisible" },
{ "key": "alt+]",                 "command": "editor.action.inlineEdits.showNext",
                                     "when": "inlineEditsVisible && !editorReadonly" },
{ "key": "alt+[",                 "command": "editor.action.inlineEdits.showPrevious",
                                     "when": "inlineEditsVisible && !editorReadonly" },
{ "key": "escape",                "command": "editor.action.inlineSuggest.hide",
                                     "when": "inlineSuggestionVisible" },
{ "key": "alt+]",                 "command": "editor.action.inlineSuggest.showNext",
                                     "when": "inlineSuggestionVisible && !editorReadonly" },
{ "key": "alt+[",                 "command": "editor.action.inlineSuggest.showPrevious",
                                     "when": "inlineSuggestionVisible && !editorReadonly" },
{ "key": "enter",                 "command": "editor.action.insertColorWithStandaloneColorPicker",
                                     "when": "standaloneColorPickerFocused" },
{ "key": "alt+cmd+up",            "command": "editor.action.insertCursorAbove",
                                     "when": "editorTextFocus" },
{ "key": "shift+alt+i",           "command": "editor.action.insertCursorAtEndOfEachLineSelected",
                                     "when": "editorTextFocus" },
{ "key": "alt+cmd+down",          "command": "editor.action.insertCursorBelow",
                                     "when": "editorTextFocus" },
{ "key": "cmd+enter",             "command": "editor.action.insertLineAfter",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+enter",       "command": "editor.action.insertLineBefore",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "ctrl+j",                "command": "editor.action.joinLines",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+\\",          "command": "editor.action.jumpToBracket",
                                     "when": "editorTextFocus" },
{ "key": "shift+cmd+f2",          "command": "editor.action.linkedEditing",
                                     "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
{ "key": "alt+f8",                "command": "editor.action.marker.next",
                                     "when": "editorFocus" },
{ "key": "f8",                    "command": "editor.action.marker.nextInFiles",
                                     "when": "editorFocus" },
{ "key": "shift+alt+f8",          "command": "editor.action.marker.prev",
                                     "when": "editorFocus" },
{ "key": "shift+f8",              "command": "editor.action.marker.prevInFiles",
                                     "when": "editorFocus" },
{ "key": "alt+down",              "command": "editor.action.moveLinesDownAction",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "alt+up",                "command": "editor.action.moveLinesUpAction",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+k cmd+d",           "command": "editor.action.moveSelectionToNextFindMatch",
                                     "when": "editorFocus" },
{ "key": "alt+f9",                "command": "editor.action.nextCommentThreadAction" },
{ "key": "cmd+k alt+cmd+down",    "command": "editor.action.nextCommentingRange",
                                     "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'" },
{ "key": "f3",                    "command": "editor.action.nextMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "cmd+g",                 "command": "editor.action.nextMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "enter",                 "command": "editor.action.nextMatchFindAction",
                                     "when": "editorFocus && findInputFocussed" },
{ "key": "cmd+f3",                "command": "editor.action.nextSelectionMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "shift+alt+o",           "command": "editor.action.organizeImports",
                                     "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/" },
{ "key": "cmd+[",                 "command": "editor.action.outdentLines",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "alt+down",              "command": "editor.action.pageDownHover",
                                     "when": "editorHoverFocused" },
{ "key": "pagedown",              "command": "editor.action.pageDownHover",
                                     "when": "editorHoverFocused" },
{ "key": "alt+up",                "command": "editor.action.pageUpHover",
                                     "when": "editorHoverFocused" },
{ "key": "pageup",                "command": "editor.action.pageUpHover",
                                     "when": "editorHoverFocused" },
{ "key": "alt+f12",               "command": "editor.action.peekDefinition",
                                     "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "shift+cmd+f12",         "command": "editor.action.peekImplementation",
                                     "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "shift+alt+f9",          "command": "editor.action.previousCommentThreadAction" },
{ "key": "cmd+k alt+cmd+up",      "command": "editor.action.previousCommentingRange",
                                     "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'" },
{ "key": "shift+f3",              "command": "editor.action.previousMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "shift+cmd+g",           "command": "editor.action.previousMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "shift+enter",           "command": "editor.action.previousMatchFindAction",
                                     "when": "editorFocus && findInputFocussed" },
{ "key": "shift+cmd+f3",          "command": "editor.action.previousSelectionMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "cmd+.",                 "command": "editor.action.quickFix",
                                     "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly" },
{ "key": "ctrl+shift+r",          "command": "editor.action.refactor",
                                     "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly" },
{ "key": "alt+cmd+backspace",     "command": "editor.action.removeBrackets",
                                     "when": "editorTextFocus" },
{ "key": "cmd+k cmd+u",           "command": "editor.action.removeCommentLine",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "f2",                    "command": "editor.action.rename",
                                     "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
{ "key": "f12",                   "command": "editor.action.revealDefinition",
                                     "when": "editorHasDefinitionProvider && editorTextFocus" },
{ "key": "cmd+f12",               "command": "editor.action.revealDefinition",
                                     "when": "editorHasDefinitionProvider && editorTextFocus && isWeb" },
{ "key": "cmd+k f12",             "command": "editor.action.revealDefinitionAside",
                                     "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
{ "key": "cmd+k cmd+f12",         "command": "editor.action.revealDefinitionAside",
                                     "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor" },
{ "key": "down",                  "command": "editor.action.scrollDownHover",
                                     "when": "editorHoverFocused" },
{ "key": "left",                  "command": "editor.action.scrollLeftHover",
                                     "when": "editorHoverFocused" },
{ "key": "right",                 "command": "editor.action.scrollRightHover",
                                     "when": "editorHoverFocused" },
{ "key": "up",                    "command": "editor.action.scrollUpHover",
                                     "when": "editorHoverFocused" },
{ "key": "escape",                "command": "editor.action.selectEditor",
                                     "when": "stickyScrollFocused" },
{ "key": "cmd+k cmd+k",           "command": "editor.action.selectFromAnchorToCursor",
                                     "when": "editorTextFocus && selectionAnchorSet" },
{ "key": "shift+cmd+l",           "command": "editor.action.selectHighlights",
                                     "when": "editorFocus" },
{ "key": "down",                  "command": "editor.action.selectNextStickyScrollLine",
                                     "when": "stickyScrollFocused" },
{ "key": "up",                    "command": "editor.action.selectPreviousStickyScrollLine",
                                     "when": "stickyScrollFocused" },
{ "key": "cmd+k cmd+b",           "command": "editor.action.setSelectionAnchor",
                                     "when": "editorTextFocus" },
{ "key": "shift+f10",             "command": "editor.action.showContextMenu",
                                     "when": "textInputFocus" },
{ "key": "cmd+k cmd+i",           "command": "editor.action.showHover",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+right",      "command": "editor.action.smartSelect.expand",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+cmd+right",  "command": "editor.action.smartSelect.expand",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+left",       "command": "editor.action.smartSelect.shrink",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+cmd+left",   "command": "editor.action.smartSelect.shrink",
                                     "when": "editorTextFocus" },
{ "key": "alt+cmd+f",             "command": "editor.action.startFindReplaceAction",
                                     "when": "editorFocus || editorIsOpen" },
{ "key": "cmd+enter",             "command": "editor.action.submitComment",
                                     "when": "commentEditorFocused" },
{ "key": "ctrl+shift+m",          "command": "editor.action.toggleTabFocusMode" },
{ "key": "alt+z",                 "command": "editor.action.toggleWordWrap" },
{ "key": "ctrl+t",                "command": "editor.action.transposeLetters",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "shift+cmd+space",       "command": "editor.action.triggerParameterHints",
                                     "when": "editorHasSignatureHelpProvider && editorTextFocus" },
{ "key": "cmd+i",                 "command": "editor.action.triggerSuggest",
                                     "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
{ "key": "alt+escape",            "command": "editor.action.triggerSuggest",
                                     "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
{ "key": "ctrl+space",            "command": "editor.action.triggerSuggest",
                                     "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
{ "key": "cmd+k cmd+x",           "command": "editor.action.trimTrailingWhitespace",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "enter",                 "command": "editor.action.webvieweditor.findNext",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "shift+enter",           "command": "editor.action.webvieweditor.findPrevious",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "escape",                "command": "editor.action.webvieweditor.hideFind",
                                     "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "cmd+f",                 "command": "editor.action.webvieweditor.showFind",
                                     "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "f7",                    "command": "editor.action.wordHighlight.next",
                                     "when": "editorTextFocus && hasWordHighlights" },
{ "key": "shift+f7",              "command": "editor.action.wordHighlight.prev",
                                     "when": "editorTextFocus && hasWordHighlights" },
{ "key": "escape",                "command": "editor.cancelOperation",
                                     "when": "cancellableOperation" },
{ "key": "cmd+.",                 "command": "editor.changeDropType",
                                     "when": "dropWidgetVisible" },
{ "key": "cmd+.",                 "command": "editor.changePasteType",
                                     "when": "pasteWidgetVisible" },
{ "key": "cmd+k cmd+,",           "command": "editor.createFoldingRangeFromSelection",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "escape",                "command": "editor.debug.action.closeExceptionWidget",
                                     "when": "exceptionWidgetVisible" },
{ "key": "cmd+k cmd+i",           "command": "editor.debug.action.showDebugHover",
                                     "when": "editorTextFocus && inDebugMode" },
{ "key": "f9",                    "command": "editor.debug.action.toggleBreakpoint",
                                     "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus" },
{ "key": "tab",                   "command": "editor.emmet.action.expandAbbreviation",
                                     "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
{ "key": "alt+cmd+[",             "command": "editor.fold",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+0",           "command": "editor.foldAll",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+/",           "command": "editor.foldAllBlockComments",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+-",           "command": "editor.foldAllExcept",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+8",           "command": "editor.foldAllMarkerRegions",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+1",           "command": "editor.foldLevel1",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+2",           "command": "editor.foldLevel2",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+3",           "command": "editor.foldLevel3",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+4",           "command": "editor.foldLevel4",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+5",           "command": "editor.foldLevel5",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+6",           "command": "editor.foldLevel6",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+7",           "command": "editor.foldLevel7",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+[",           "command": "editor.foldRecursively",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "f12",                   "command": "editor.gotoNextSymbolFromResult",
                                     "when": "hasSymbols" },
{ "key": "escape",                "command": "editor.gotoNextSymbolFromResult.cancel",
                                     "when": "hasSymbols" },
{ "key": "escape",                "command": "editor.hideDropWidget",
                                     "when": "dropWidgetVisible" },
{ "key": "escape",                "command": "editor.hidePasteWidget",
                                     "when": "pasteWidgetVisible" },
{ "key": "cmd+k cmd+.",           "command": "editor.removeManualFoldingRanges",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+l",           "command": "editor.toggleFold",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k shift+cmd+l",     "command": "editor.toggleFoldRecursively",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "alt+cmd+]",             "command": "editor.unfold",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+j",           "command": "editor.unfoldAll",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+=",           "command": "editor.unfoldAllExcept",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+9",           "command": "editor.unfoldAllMarkerRegions",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+]",           "command": "editor.unfoldRecursively",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "escape",                "command": "inlayHints.stopReadingLineWithHint",
                                     "when": "isReadingLineWithInlayHints" },
{ "key": "tab",                   "command": "insertSnippet",
                                     "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode" },
{ "key": "cmd+enter",             "command": "interactive.execute",
                                     "when": "activeEditor == 'workbench.editor.interactive'" },
{ "key": "shift+enter",           "command": "interactive.execute",
                                     "when": "config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'" },
{ "key": "enter",                 "command": "interactive.execute",
                                     "when": "!config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'" },
{ "key": "escape",                "command": "notebook.cell.chat.discard",
                                     "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused && !notebookChatUserDidEdit" },
{ "key": "pagedown",              "command": "notebook.cell.cursorPageDown",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
{ "key": "shift+pagedown",        "command": "notebook.cell.cursorPageDownSelect",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused" },
{ "key": "pageup",                "command": "notebook.cell.cursorPageUp",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
{ "key": "shift+pageup",          "command": "notebook.cell.cursorPageUpSelect",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused" },
{ "key": "ctrl+enter",            "command": "notebook.cell.execute",
                                     "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || !notebookCellExecuting && notebookCellType == 'code' && notebookCellListFocused || inlineChatFocused && notebookCellChatFocused && notebookKernelCount > 0 || !notebookCellExecuting && notebookCellType == 'code' && notebookCellListFocused || inlineChatFocused && notebookCellChatFocused && notebookKernelSourceCount > 0 || inlineChatFocused && notebookCellChatFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code'" },
{ "key": "alt+enter",             "command": "notebook.cell.executeAndInsertBelow",
                                     "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
{ "key": "shift+enter",           "command": "notebook.cell.executeAndSelectBelow",
                                     "when": "notebookCellListFocused && !inlineChatFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
{ "key": "shift+cmd+v",           "command": "notebook.cell.pasteAbove",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "down",                  "command": "notebook.focusNextEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
{ "key": "up",                    "command": "notebook.focusPreviousEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
{ "key": "shift+alt+f",           "command": "notebook.formatCell",
                                     "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'" },
{ "key": "ctrl+enter",            "command": "openReferenceToSide",
                                     "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused" },
{ "key": "enter",                 "command": "repl.action.acceptInput",
                                     "when": "inDebugRepl && textInputFocus" },
{ "key": "cmd+f",                 "command": "repl.action.filter",
                                     "when": "inDebugRepl && textInputFocus" },
{ "key": "shift+cmd+r",           "command": "rerunSearchEditorSearch",
                                     "when": "inSearchEditor" },
{ "key": "escape",                "command": "search.action.focusQueryEditorWidget",
                                     "when": "inSearchEditor" },
{ "key": "shift+cmd+backspace",   "command": "search.searchEditor.action.deleteFileResults",
                                     "when": "inSearchEditor" },
{ "key": "escape",                "command": "settings.action.clearSearchResults",
                                     "when": "inSettingsEditor && inSettingsSearch" },
{ "key": "down",                  "command": "settings.action.focusSettingsFile",
                                     "when": "inSettingsSearch && !suggestWidgetVisible" },
{ "key": "cmd+f",                 "command": "settings.action.search",
                                     "when": "inSettingsEditor" },
{ "key": "cmd+/",                 "command": "toggleExplainMode",
                                     "when": "suggestWidgetVisible" },
{ "key": "cmd+k f2",              "command": "togglePeekWidgetFocus",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "escape",                "command": "welcome.goBack",
                                     "when": "inWelcome && activeEditor == 'gettingStartedPage'" },
{ "key": "cmd+k alt+cmd+c",       "command": "workbench.action.addComment" },
{ "key": "cmd+/",                 "command": "workbench.action.chat.attachContext",
                                     "when": "config.chat.experimental.variables.editor && inChatInput && chatLocation == 'editor' || config.chat.experimental.variables.notebook && inChatInput && chatLocation == 'notebook' || config.chat.experimental.variables.terminal && inChatInput && chatLocation == 'terminal' || inChatInput && !quickChatHasFocus && chatLocation == 'panel'" },
{ "key": "ctrl+alt+enter",        "command": "workbench.action.chat.runInTerminal",
                                     "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat" },
{ "key": "enter",                 "command": "workbench.action.chat.submit",
                                     "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress" },
{ "key": "cmd+enter",             "command": "workbench.action.chat.submitSecondaryAgent",
                                     "when": "chatInputHasText && inChatInput && !chatInputHasAgent && !chatSessionRequestInProgress" },
{ "key": "alt+f5",                "command": "workbench.action.editor.nextChange",
                                     "when": "editorTextFocus && !textCompareEditorActive" },
{ "key": "shift+alt+f5",          "command": "workbench.action.editor.previousChange",
                                     "when": "editorTextFocus && !textCompareEditorActive" },
{ "key": "shift+escape",          "command": "workbench.action.hideComment",
                                     "when": "commentEditorFocused" },
{ "key": "escape",                "command": "workbench.action.hideComment",
                                     "when": "commentEditorFocused" },
{ "key": "tab",                   "command": "editor.action.inlineEdit.accept",
                                     "when": "cursorAtInlineEdit && inlineEditVisible && !editorReadonly" },
{ "key": "alt+cmd+=",             "command": "editor.action.inlineEdit.jumpTo",
                                     "when": "inlineEditVisible && !cursorAtInlineEdit && !editorReadonly" },
{ "key": "alt+cmd+=",             "command": "editor.action.inlineEdit.trigger",
                                     "when": "!editorReadonly && !inlineEditVisible" },
{ "key": "cmd+right",             "command": "editor.action.inlineSuggest.acceptNextWord",
                                     "when": "inlineSuggestionVisible && !editorReadonly" },
{ "key": "alt+f8",                "command": "testing.goToNextMessage",
                                     "when": "editorFocus && testing.isPeekVisible" },
{ "key": "shift+alt+f8",          "command": "testing.goToPreviousMessage",
                                     "when": "editorFocus && testing.isPeekVisible" },
{ "key": "shift+escape",          "command": "closeFindWidget",
                                     "when": "editorFocus && findWidgetVisible && !isComposing" },
{ "key": "escape",                "command": "closeFindWidget",
                                     "when": "editorFocus && findWidgetVisible && !isComposing" },
{ "key": "alt+cmd+enter",         "command": "editor.action.replaceAll",
                                     "when": "editorFocus && findWidgetVisible" },
{ "key": "cmd+enter",             "command": "editor.action.replaceAll",
                                     "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
{ "key": "shift+cmd+1",           "command": "editor.action.replaceOne",
                                     "when": "editorFocus && findWidgetVisible" },
{ "key": "enter",                 "command": "editor.action.replaceOne",
                                     "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
{ "key": "alt+enter",             "command": "editor.action.selectAllMatches",
                                     "when": "editorFocus && findWidgetVisible" },
{ "key": "alt+cmd+c",             "command": "toggleFindCaseSensitive",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+l",             "command": "toggleFindInSelection",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+r",             "command": "toggleFindRegex",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+w",             "command": "toggleFindWholeWord",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+p",             "command": "togglePreserveCase",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+=",             "command": "editor.action.inlineEdit.jumpBack",
                                     "when": "cursorAtInlineEdit && !editorReadonly" },
{ "key": "cmd+enter",             "command": "notebook.cell.chat.acceptChanges",
                                     "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused" },
{ "key": "tab",                   "command": "jumpToNextSnippetPlaceholder",
                                     "when": "hasNextTabstop && inSnippetMode && textInputFocus" },
{ "key": "shift+tab",             "command": "jumpToPrevSnippetPlaceholder",
                                     "when": "hasPrevTabstop && inSnippetMode && textInputFocus" },
{ "key": "escape",                "command": "leaveEditorMessage",
                                     "when": "messageVisible" },
{ "key": "shift+escape",          "command": "leaveSnippet",
                                     "when": "inSnippetMode && textInputFocus" },
{ "key": "escape",                "command": "leaveSnippet",
                                     "when": "inSnippetMode && textInputFocus" },
{ "key": "shift+escape",          "command": "closeDirtyDiff",
                                     "when": "dirtyDiffVisible" },
{ "key": "escape",                "command": "closeDirtyDiff",
                                     "when": "dirtyDiffVisible" },
{ "key": "shift+escape",          "command": "closeMarkersNavigation",
                                     "when": "editorFocus && markersNavigationVisible" },
{ "key": "escape",                "command": "closeMarkersNavigation",
                                     "when": "editorFocus && markersNavigationVisible" },
{ "key": "escape",                "command": "notifications.hideToasts",
                                     "when": "notificationToastsVisible" },
{ "key": "shift+escape",          "command": "closeParameterHints",
                                     "when": "editorFocus && parameterHintsVisible" },
{ "key": "escape",                "command": "closeParameterHints",
                                     "when": "editorFocus && parameterHintsVisible" },
{ "key": "ctrl+n",                "command": "showNextParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "alt+down",              "command": "showNextParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "down",                  "command": "showNextParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "ctrl+p",                "command": "showPrevParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "alt+up",                "command": "showPrevParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "up",                    "command": "showPrevParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "shift+tab",             "command": "acceptAlternativeSelectedSuggestion",
                                     "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
{ "key": "shift+enter",           "command": "acceptAlternativeSelectedSuggestion",
                                     "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
{ "key": "tab",                   "command": "acceptSelectedSuggestion",
                                     "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
{ "key": "enter",                 "command": "acceptSelectedSuggestion",
                                     "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus" },
{ "key": "cmd+i",                 "command": "focusSuggestion",
                                     "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "ctrl+space",            "command": "focusSuggestion",
                                     "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "shift+escape",          "command": "hideSuggestWidget",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "escape",                "command": "hideSuggestWidget",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "tab",                   "command": "insertBestCompletion",
                                     "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
{ "key": "tab",                   "command": "insertNextSuggestion",
                                     "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
{ "key": "shift+tab",             "command": "insertPrevSuggestion",
                                     "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
{ "key": "cmd+pagedown",          "command": "selectNextPageSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "pagedown",              "command": "selectNextPageSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "ctrl+n",                "command": "selectNextSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "cmd+down",              "command": "selectNextSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "down",                  "command": "selectNextSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "cmd+pageup",            "command": "selectPrevPageSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "pageup",                "command": "selectPrevPageSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "ctrl+p",                "command": "selectPrevSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "cmd+up",                "command": "selectPrevSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "up",                    "command": "selectPrevSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
{ "key": "cmd+i",                 "command": "toggleSuggestionDetails",
                                     "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+space",            "command": "toggleSuggestionDetails",
                                     "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+alt+space",        "command": "toggleSuggestionFocus",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "enter",                 "command": "acceptRenameInput",
                                     "when": "editorFocus && renameInputVisible && !isComposing" },
{ "key": "cmd+enter",             "command": "acceptRenameInputWithPreview",
                                     "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible && !isComposing" },
{ "key": "shift+escape",          "command": "cancelLinkedEditingInput",
                                     "when": "LinkedEditingInputVisible && editorTextFocus" },
{ "key": "escape",                "command": "cancelLinkedEditingInput",
                                     "when": "LinkedEditingInputVisible && editorTextFocus" },
{ "key": "shift+escape",          "command": "cancelRenameInput",
                                     "when": "editorFocus && renameInputVisible" },
{ "key": "escape",                "command": "cancelRenameInput",
                                     "when": "editorFocus && renameInputVisible" },
{ "key": "down",                  "command": "focusNextRenameSuggestion",
                                     "when": "renameInputVisible" },
{ "key": "up",                    "command": "focusPreviousRenameSuggestion",
                                     "when": "renameInputVisible" },
{ "key": "shift+cmd+l",           "command": "addCursorsAtSearchResults",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "shift+cmd+;",           "command": "breadcrumbs.focus",
                                     "when": "breadcrumbsPossible && breadcrumbsVisible" },
{ "key": "shift+cmd+.",           "command": "breadcrumbs.focusAndSelect",
                                     "when": "breadcrumbsPossible && breadcrumbsVisible" },
{ "key": "alt+right",             "command": "breadcrumbs.focusNext",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "right",                 "command": "breadcrumbs.focusNext",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "alt+left",              "command": "breadcrumbs.focusPrevious",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "left",                  "command": "breadcrumbs.focusPrevious",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "cmd+enter",             "command": "breadcrumbs.revealFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "space",                 "command": "breadcrumbs.revealFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "cmd+enter",             "command": "breadcrumbs.revealFocusedFromTreeAside",
                                     "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "down",                  "command": "breadcrumbs.selectFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "enter",                 "command": "breadcrumbs.selectFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "shift+cmd+.",           "command": "breadcrumbs.toggleToOn",
                                     "when": "!config.breadcrumbs.enabled" },
{ "key": "escape",                "command": "closeReplaceInFilesWidget",
                                     "when": "replaceInputBoxFocus && searchViewletVisible" },
{ "key": "escape",                "command": "commentsClearFilterText",
                                     "when": "commentsFilterFocus" },
{ "key": "cmd+f",                 "command": "commentsFocusFilter",
                                     "when": "focusedView == 'workbench.panel.comments'" },
{ "key": "cmd+down",              "command": "commentsFocusViewFromFilter",
                                     "when": "commentsFilterFocus" },
{ "key": "alt+cmd+c",             "command": "copyFilePath",
                                     "when": "!editorFocus" },
{ "key": "cmd+k alt+cmd+c",       "command": "copyFilePath",
                                     "when": "editorFocus" },
{ "key": "shift+alt+cmd+c",       "command": "copyRelativeFilePath",
                                     "when": "!editorFocus" },
{ "key": "cmd+k shift+alt+cmd+c", "command": "copyRelativeFilePath",
                                     "when": "editorFocus" },
{ "key": "alt+enter",             "command": "debug.openBreakpointToSide",
                                     "when": "breakpointsFocused" },
{ "key": "cmd+enter",             "command": "debug.openBreakpointToSide",
                                     "when": "breakpointsFocused" },
{ "key": "cmd+f5",                "command": "debug.openView",
                                     "when": "!debuggersAvailable" },
{ "key": "f5",                    "command": "debug.openView",
                                     "when": "!debuggersAvailable" },
{ "key": "cmd+backspace",         "command": "debug.removeBreakpoint",
                                     "when": "breakpointsFocused && !breakpointInputFocused" },
{ "key": "cmd+backspace",         "command": "debug.removeWatchExpression",
                                     "when": "watchExpressionsFocused && !expressionSelected" },
{ "key": "alt+-",                 "command": "decreaseSearchEditorContextLines",
                                     "when": "inSearchEditor" },
{ "key": "alt+f1",                "command": "editor.action.accessibilityHelp",
                                     "when": "!accessibilityHelpIsShown" },
{ "key": "alt+a",                 "command": "editor.action.accessibilityHelpConfigureAssignedKeybindings",
                                     "when": "accessibilityHelpIsShown && accessibleViewHasAssignedKeybindings" },
{ "key": "alt+k",                 "command": "editor.action.accessibilityHelpConfigureKeybindings",
                                     "when": "accessibilityHelpIsShown && accessibleViewHasUnassignedKeybindings" },
{ "key": "alt+h",                 "command": "editor.action.accessibilityHelpOpenHelpLink",
                                     "when": "accessibilityHelpIsShown" },
{ "key": "alt+f2",                "command": "editor.action.accessibleView" },
{ "key": "ctrl+/",                "command": "editor.action.accessibleViewAcceptInlineCompletion",
                                     "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'inlineCompletions'" },
{ "key": "alt+f6",                "command": "editor.action.accessibleViewDisableHint",
                                     "when": "accessibilityHelpIsShown && accessibleViewVerbosityEnabled || accessibleViewIsShown && accessibleViewVerbosityEnabled" },
{ "key": "alt+]",                 "command": "editor.action.accessibleViewNext",
                                     "when": "accessibleViewIsShown && accessibleViewSupportsNavigation" },
{ "key": "alt+cmd+pagedown",      "command": "editor.action.accessibleViewNextCodeBlock",
                                     "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat'" },
{ "key": "alt+[",                 "command": "editor.action.accessibleViewPrevious",
                                     "when": "accessibleViewIsShown && accessibleViewSupportsNavigation" },
{ "key": "alt+cmd+pageup",        "command": "editor.action.accessibleViewPreviousCodeBlock",
                                     "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat'" },
{ "key": "cmd+k cmd+k",           "command": "editor.action.defineKeybinding",
                                     "when": "resource == 'vscode-userdata:/Users/kanata-miyahana/Library/Application%20Support/Code/User/keybindings.json'" },
{ "key": "tab",                   "command": "editor.action.inlineSuggest.commit",
                                     "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible" },
{ "key": "shift+f9",              "command": "editor.debug.action.toggleInlineBreakpoint",
                                     "when": "editorTextFocus" },
{ "key": "shift+alt+d",           "command": "editor.detectLanguage",
                                     "when": "editorTextFocus && !notebookEditable" },
{ "key": "shift+enter",           "command": "editor.refocusCallHierarchy",
                                     "when": "callHierarchyVisible" },
{ "key": "shift+enter",           "command": "editor.refocusTypeHierarchy",
                                     "when": "typeHierarchyVisible" },
{ "key": "shift+alt+h",           "command": "editor.showCallHierarchy",
                                     "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor" },
{ "key": "shift+alt+h",           "command": "editor.showIncomingCalls",
                                     "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'" },
{ "key": "shift+alt+h",           "command": "editor.showOutgoingCalls",
                                     "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'" },
{ "key": "shift+alt+h",           "command": "editor.showSubtypes",
                                     "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'" },
{ "key": "shift+alt+h",           "command": "editor.showSupertypes",
                                     "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'" },
{ "key": "ctrl+enter",            "command": "explorer.openToSide",
                                     "when": "explorerViewletFocus && foldersViewVisible && !inputFocus" },
{ "key": "shift+alt+f",           "command": "filesExplorer.findInFolder",
                                     "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus" },
{ "key": "alt+down",              "command": "history.showNext",
                                     "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
{ "key": "down",                  "command": "history.showNext",
                                     "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
{ "key": "alt+up",                "command": "history.showPrevious",
                                     "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
{ "key": "up",                    "command": "history.showPrevious",
                                     "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
{ "key": "down",                  "command": "iconSelectBox.focusDown",
                                     "when": "iconSelectBoxFocus" },
{ "key": "right",                 "command": "iconSelectBox.focusNext",
                                     "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus" },
{ "key": "left",                  "command": "iconSelectBox.focusPrevious",
                                     "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus" },
{ "key": "up",                    "command": "iconSelectBox.focusUp",
                                     "when": "iconSelectBoxFocus" },
{ "key": "enter",                 "command": "iconSelectBox.selectFocused",
                                     "when": "iconSelectBoxFocus" },
{ "key": "alt+=",                 "command": "increaseSearchEditorContextLines",
                                     "when": "inSearchEditor" },
{ "key": "escape",                "command": "inlineChat.close",
                                     "when": "inlineChatHasProvider && inlineChatVisible" },
{ "key": "escape",                "command": "inlineChat.discardHunkChange",
                                     "when": "inlineChatHasProvider && inlineChatVisible && inlineChatResponseType == 'messagesAndEdits'" },
{ "key": "cmd+i",                 "command": "inlineChat.holdForSpeech",
                                     "when": "hasSpeechProvider && inlineChatHasProvider && inlineChatVisible && textInputFocus" },
{ "key": "f7",                    "command": "inlineChat.moveToNextHunk",
                                     "when": "inlineChatHasProvider && inlineChatVisible" },
{ "key": "shift+f7",              "command": "inlineChat.moveToPreviousHunk",
                                     "when": "inlineChatHasProvider && inlineChatVisible" },
{ "key": "cmd+r",                 "command": "inlineChat.regenerate",
                                     "when": "inlineChatHasProvider && inlineChatVisible" },
{ "key": "cmd+k i",               "command": "inlineChat.start",
                                     "when": "editorFocus && inlineChatHasProvider && !editorReadonly" },
{ "key": "cmd+i",                 "command": "inlineChat.start",
                                     "when": "editorFocus && inlineChatHasProvider && !editorReadonly" },
{ "key": "cmd+z",                 "command": "inlineChat.unstash",
                                     "when": "inlineChatHasStashedSession && !editorReadonly" },
{ "key": "cmd+down",              "command": "inlineChat.viewInChat",
                                     "when": "inlineChatHasProvider && inlineChatVisible" },
{ "key": "down",                  "command": "interactive.history.next",
                                     "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'" },
{ "key": "down",                  "command": "interactive.history.next",
                                     "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.repl' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'" },
{ "key": "up",                    "command": "interactive.history.previous",
                                     "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'" },
{ "key": "up",                    "command": "interactive.history.previous",
                                     "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.repl' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'" },
{ "key": "cmd+down",              "command": "interactive.scrollToBottom",
                                     "when": "activeEditor == 'workbench.editor.interactive'" },
{ "key": "cmd+up",                "command": "interactive.scrollToTop",
                                     "when": "activeEditor == 'workbench.editor.interactive'" },
{ "key": "enter",                 "command": "keybindings.editor.acceptWhenExpression",
                                     "when": "inKeybindings && whenFocus && !suggestWidgetVisible" },
{ "key": "cmd+k cmd+a",           "command": "keybindings.editor.addKeybinding",
                                     "when": "inKeybindings && keybindingFocus" },
{ "key": "escape",                "command": "keybindings.editor.clearSearchResults",
                                     "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "cmd+c",                 "command": "keybindings.editor.copyKeybindingEntry",
                                     "when": "inKeybindings && keybindingFocus && !whenFocus" },
{ "key": "enter",                 "command": "keybindings.editor.defineKeybinding",
                                     "when": "inKeybindings && keybindingFocus && !whenFocus" },
{ "key": "cmd+k cmd+e",           "command": "keybindings.editor.defineWhenExpression",
                                     "when": "inKeybindings && keybindingFocus" },
{ "key": "cmd+down",              "command": "keybindings.editor.focusKeybindings",
                                     "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "alt+cmd+k",             "command": "keybindings.editor.recordSearchKeys",
                                     "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "escape",                "command": "keybindings.editor.rejectWhenExpression",
                                     "when": "inKeybindings && whenFocus && !suggestWidgetVisible" },
{ "key": "cmd+backspace",         "command": "keybindings.editor.removeKeybinding",
                                     "when": "inKeybindings && keybindingFocus && !inputFocus" },
{ "key": "cmd+f",                 "command": "keybindings.editor.searchKeybindings",
                                     "when": "inKeybindings" },
{ "key": "alt+cmd+p",             "command": "keybindings.editor.toggleSortByPrecedence",
                                     "when": "inKeybindings" },
{ "key": "escape",                "command": "list.clear",
                                     "when": "listFocus && listHasSelectionOrFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "escape",                "command": "list.closeFind",
                                     "when": "listFocus && treeFindOpen" },
{ "key": "cmd+up",                "command": "list.collapse",
                                     "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused" },
{ "key": "left",                  "command": "list.collapse",
                                     "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused" },
{ "key": "shift+cmd+up",          "command": "list.collapseAll",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "cmd+left",              "command": "list.collapseAll",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "right",                 "command": "list.expand",
                                     "when": "listFocus && treeElementCanExpand && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused" },
{ "key": "shift+down",            "command": "list.expandSelectionDown",
                                     "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
{ "key": "shift+up",              "command": "list.expandSelectionUp",
                                     "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
{ "key": "f3",                    "command": "list.find",
                                     "when": "listFocus && listSupportsFind" },
{ "key": "alt+cmd+f",             "command": "list.find",
                                     "when": "listFocus && listSupportsFind" },
{ "key": "ctrl+alt+n",            "command": "list.focusAnyDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "alt+down",              "command": "list.focusAnyDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "alt+home",              "command": "list.focusAnyFirst",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "alt+end",               "command": "list.focusAnyLast",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "ctrl+alt+p",            "command": "list.focusAnyUp",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "alt+up",                "command": "list.focusAnyUp",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "ctrl+n",                "command": "list.focusDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "down",                  "command": "list.focusDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "home",                  "command": "list.focusFirst",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "end",                   "command": "list.focusLast",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "pagedown",              "command": "list.focusPageDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "pageup",                "command": "list.focusPageUp",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "ctrl+p",                "command": "list.focusUp",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "up",                    "command": "list.focusUp",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "cmd+down",              "command": "list.scrollDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'bottom'" },
{ "key": "cmd+up",                "command": "list.scrollUp",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'top'" },
{ "key": "cmd+down",              "command": "list.select",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "enter",                 "command": "list.select",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "cmd+a",                 "command": "list.selectAll",
                                     "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
{ "key": "cmd+k cmd+i",           "command": "list.showHover",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "space",                 "command": "list.toggleExpand",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "shift+cmd+enter",       "command": "list.toggleSelection",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "y",                     "command": "notebook.cell.changeToCode",
                                     "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'" },
{ "key": "m",                     "command": "notebook.cell.changeToMarkdown",
                                     "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'" },
{ "key": "enter",                 "command": "notebook.cell.chat.accept",
                                     "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused" },
{ "key": "cmd+enter",             "command": "notebook.cell.chat.acceptChanges",
                                     "when": "notebookEditorFocused && !inputFocus && !notebookCellEditorFocused && notebookChatOuterFocusPosition == 'below'" },
{ "key": "cmd+down",              "command": "notebook.cell.chat.focus",
                                     "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'above'" },
{ "key": "cmd+up",                "command": "notebook.cell.chat.focus",
                                     "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'below'" },
{ "key": "cmd+down",              "command": "notebook.cell.chat.focusNextCell",
                                     "when": "inlineChatFocused && notebookCellChatFocused" },
{ "key": "cmd+up",                "command": "notebook.cell.chat.focusPreviousCell",
                                     "when": "inlineChatFocused && notebookCellChatFocused" },
{ "key": "cmd+k i",               "command": "notebook.cell.chat.start",
                                     "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus" },
{ "key": "cmd+i",                 "command": "notebook.cell.chat.start",
                                     "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus" },
{ "key": "alt+delete",            "command": "notebook.cell.clearOutputs",
                                     "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus" },
{ "key": "cmd+k cmd+c",           "command": "notebook.cell.collapseCellInput",
                                     "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed" },
{ "key": "cmd+k t",               "command": "notebook.cell.collapseCellOutput",
                                     "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed" },
{ "key": "shift+alt+down",        "command": "notebook.cell.copyDown",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "shift+alt+up",          "command": "notebook.cell.copyUp",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+backspace",         "command": "notebook.cell.delete",
                                     "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
{ "key": "shift+alt+d",           "command": "notebook.cell.detectLanguage",
                                     "when": "notebookCellEditable && notebookEditable" },
{ "key": "enter",                 "command": "notebook.cell.edit",
                                     "when": "notebookCellListFocused && notebookEditable && !editorHoverFocused && !inputFocus && !notebookOutputInputFocused" },
{ "key": "cmd+k cmd+c",           "command": "notebook.cell.expandCellInput",
                                     "when": "notebookCellInputIsCollapsed && notebookCellListFocused" },
{ "key": "cmd+k t",               "command": "notebook.cell.expandCellOutput",
                                     "when": "notebookCellListFocused && notebookCellOutputIsCollapsed" },
{ "key": "ctrl+cmd+down",         "command": "notebook.cell.focusInOutput",
                                     "when": "notebookCellHasOutputs && notebookEditorFocused" },
{ "key": "ctrl+cmd+up",           "command": "notebook.cell.focusOutOutput",
                                     "when": "notebookEditorFocused && notebookOutputFocused" },
{ "key": "shift+cmd+enter",       "command": "notebook.cell.insertCodeCellAbove",
                                     "when": "notebookCellListFocused && !inputFocus" },
{ "key": "cmd+enter",             "command": "notebook.cell.insertCodeCellBelow",
                                     "when": "notebookCellListFocused && !inputFocus && notebookChatOuterFocusPosition == ''" },
{ "key": "ctrl+shift+alt+j",      "command": "notebook.cell.joinAbove",
                                     "when": "notebookEditorFocused" },
{ "key": "ctrl+alt+j",            "command": "notebook.cell.joinBelow",
                                     "when": "notebookEditorFocused" },
{ "key": "alt+down",              "command": "notebook.cell.moveDown",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+up",                "command": "notebook.cell.moveUp",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+.",                 "command": "notebook.cell.openFailureActions",
                                     "when": "notebookCellFocused && notebookCellHasErrorDiagnostics && !notebookCellEditorFocused" },
{ "key": "cmd+k shift+cmd+\\",    "command": "notebook.cell.split",
                                     "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused" },
{ "key": "cmd+k y",               "command": "notebook.cell.toggleOutputScrolling",
                                     "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus" },
{ "key": "ctrl+l",                "command": "notebook.centerActiveCell",
                                     "when": "notebookEditorFocused" },
{ "key": "cmd+/",                 "command": "notebook.commentSelectedCells",
                                     "when": "notebookEditable && notebookEditorFocused && !inputFocus" },
{ "key": "alt+f3",                "command": "notebook.diff.action.next",
                                     "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'" },
{ "key": "shift+alt+f3",          "command": "notebook.diff.action.previous",
                                     "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'" },
{ "key": "cmd+f",                 "command": "notebook.find",
                                     "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "cmd+end",               "command": "notebook.focusBottom",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+down",              "command": "notebook.focusBottom",
                                     "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == ''" },
{ "key": "down",                  "command": "notebook.focusNextEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },
{ "key": "ctrl+cmd+down",         "command": "notebook.focusNextEditor",
                                     "when": "notebookEditorFocused && notebookOutputFocused" },
{ "key": "up",                    "command": "notebook.focusPreviousEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },
{ "key": "cmd+home",              "command": "notebook.focusTop",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+up",                "command": "notebook.focusTop",
                                     "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == ''" },
{ "key": "left",                  "command": "notebook.fold",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "alt+cmd+[",             "command": "notebook.fold",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "shift+alt+f",           "command": "notebook.format",
                                     "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "escape",                "command": "notebook.hideFind",
                                     "when": "notebookEditorFocused && notebookFindWidgetFocused" },
{ "key": "right",                 "command": "notebook.unfold",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "alt+cmd+]",             "command": "notebook.unfold",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "shift+cmd+a",           "command": "notification.acceptPrimaryAction",
                                     "when": "notificationFocus || notificationToastsVisible" },
{ "key": "cmd+backspace",         "command": "notification.clear",
                                     "when": "notificationFocus" },
{ "key": "left",                  "command": "notification.collapse",
                                     "when": "notificationFocus" },
{ "key": "right",                 "command": "notification.expand",
                                     "when": "notificationFocus" },
{ "key": "enter",                 "command": "notification.toggle",
                                     "when": "notificationFocus" },
{ "key": "space",                 "command": "notification.toggle",
                                     "when": "notificationFocus" },
{ "key": "home",                  "command": "notifications.focusFirstToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "pageup",                "command": "notifications.focusFirstToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "end",                   "command": "notifications.focusLastToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "pagedown",              "command": "notifications.focusLastToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "down",                  "command": "notifications.focusNextToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "up",                    "command": "notifications.focusPreviousToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "cmd+k shift+cmd+n",     "command": "notifications.showList" },
{ "key": "escape",                "command": "problems.action.clearFilterText",
                                     "when": "problemsFilterFocus" },
{ "key": "cmd+c",                 "command": "problems.action.copy",
                                     "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'" },
{ "key": "cmd+f",                 "command": "problems.action.focusFilter",
                                     "when": "focusedView == 'workbench.panel.markers.view'" },
{ "key": "cmd+down",              "command": "problems.action.focusProblemsFromFilter",
                                     "when": "problemsFilterFocus" },
{ "key": "cmd+down",              "command": "problems.action.open",
                                     "when": "problemFocus" },
{ "key": "enter",                 "command": "problems.action.open",
                                     "when": "problemFocus" },
{ "key": "ctrl+enter",            "command": "problems.action.openToSide",
                                     "when": "problemFocus" },
{ "key": "cmd+.",                 "command": "problems.action.showQuickFixes",
                                     "when": "problemFocus" },
{ "key": "ctrl+alt+cmd+home",     "command": "quickInput.first",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+home",         "command": "quickInput.first",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+home",         "command": "quickInput.first",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+home",             "command": "quickInput.first",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+cmd+end",      "command": "quickInput.last",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+end",          "command": "quickInput.last",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+end",          "command": "quickInput.last",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+end",              "command": "quickInput.last",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+down",             "command": "quickInput.next",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "down",                  "command": "quickInput.next",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+cmd+down",     "command": "quickInput.nextSeparator",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+down",         "command": "quickInput.nextSeparator",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "alt+cmd+down",          "command": "quickInput.nextSeparator",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "cmd+down",              "command": "quickInput.nextSeparatorWithQuickAccessFallback",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+cmd+pagedown", "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "alt+cmd+pagedown",      "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+pagedown",     "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "cmd+pagedown",          "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+pagedown",     "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+pagedown",         "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "alt+pagedown",          "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "pagedown",              "command": "quickInput.pageNext",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+cmd+pageup",   "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "alt+cmd+pageup",        "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+pageup",       "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "cmd+pageup",            "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+pageup",       "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+pageup",           "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "alt+pageup",            "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "pageup",                "command": "quickInput.pagePrevious",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+up",               "command": "quickInput.previous",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "up",                    "command": "quickInput.previous",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+cmd+up",       "command": "quickInput.previousSeparator",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+up",           "command": "quickInput.previousSeparator",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "alt+cmd+up",            "command": "quickInput.previousSeparator",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "cmd+up",                "command": "quickInput.previousSeparatorWithQuickAccessFallback",
                                     "when": "inQuickInput && quickInputType == 'quickPick'" },
{ "key": "space",                 "command": "refactorPreview.toggleCheckedState",
                                     "when": "listFocus && refactorPreview.enabled && !inputFocus && !treestickyScrollFocused" },
{ "key": "alt+cmd+r",             "command": "revealFileInOS",
                                     "when": "!editorFocus" },
{ "key": "cmd+down",              "command": "revealReference",
                                     "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused" },
{ "key": "enter",                 "command": "revealReference",
                                     "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused" },
{ "key": "alt+cmd+s",             "command": "saveAll" },
{ "key": "cmd+enter",             "command": "scm.acceptInput",
                                     "when": "scmRepository" },
{ "key": "escape",                "command": "scm.clearInput",
                                     "when": "scmRepository && !suggestWidgetVisible" },
{ "key": "alt+down",              "command": "scm.forceViewNextCommit",
                                     "when": "scmRepository" },
{ "key": "alt+up",                "command": "scm.forceViewPreviousCommit",
                                     "when": "scmRepository" },
{ "key": "down",                  "command": "scm.viewNextCommit",
                                     "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible" },
{ "key": "up",                    "command": "scm.viewPreviousCommit",
                                     "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible" },
{ "key": "escape",                "command": "search.action.cancel",
                                     "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'" },
{ "key": "cmd+c",                 "command": "search.action.copyMatch",
                                     "when": "fileMatchOrMatchFocus" },
{ "key": "alt+cmd+c",             "command": "search.action.copyPath",
                                     "when": "fileMatchOrFolderMatchWithResourceFocus" },
{ "key": "f4",                    "command": "search.action.focusNextSearchResult",
                                     "when": "hasSearchResult || inSearchEditor" },
{ "key": "shift+f4",              "command": "search.action.focusPreviousSearchResult",
                                     "when": "hasSearchResult || inSearchEditor" },
{ "key": "cmd+up",                "command": "search.action.focusSearchFromResults",
                                     "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible" },
{ "key": "cmd+enter",             "command": "search.action.openInEditor",
                                     "when": "hasSearchResult && searchViewletFocus" },
{ "key": "cmd+down",              "command": "search.action.openResult",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "enter",                 "command": "search.action.openResult",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "ctrl+enter",            "command": "search.action.openResultToSide",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "cmd+backspace",         "command": "search.action.remove",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "shift+cmd+1",           "command": "search.action.replace",
                                     "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible" },
{ "key": "alt+cmd+enter",         "command": "search.action.replaceAll",
                                     "when": "replaceActive && searchViewletVisible && !findWidgetVisible" },
{ "key": "shift+cmd+enter",       "command": "search.action.replaceAllInFile",
                                     "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
{ "key": "shift+cmd+1",           "command": "search.action.replaceAllInFile",
                                     "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
{ "key": "shift+cmd+enter",       "command": "search.action.replaceAllInFolder",
                                     "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
{ "key": "shift+cmd+1",           "command": "search.action.replaceAllInFolder",
                                     "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
{ "key": "shift+alt+f",           "command": "search.action.restrictSearchToFolder",
                                     "when": "folderMatchWithResourceFocus && searchViewletVisible" },
{ "key": "cmd+down",              "command": "search.focus.nextInputBox",
                                     "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible" },
{ "key": "cmd+up",                "command": "search.focus.previousInputBox",
                                     "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus" },
{ "key": "shift+cmd+l",           "command": "selectAllSearchEditorMatches",
                                     "when": "inSearchEditor" },
{ "key": "escape",                "command": "settings.action.focusLevelUp",
                                     "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch" },
{ "key": "enter",                 "command": "settings.action.focusSettingControl",
                                     "when": "inSettingsEditor && settingRowFocus" },
{ "key": "down",                  "command": "settings.action.focusSettingsFromSearch",
                                     "when": "inSettingsSearch && !suggestWidgetVisible" },
{ "key": "enter",                 "command": "settings.action.focusSettingsList",
                                     "when": "inSettingsEditor && settingsTocRowFocus" },
{ "key": "left",                  "command": "settings.action.focusTOC",
                                     "when": "inSettingsEditor && settingRowFocus" },
{ "key": "shift+f9",              "command": "settings.action.showContextMenu",
                                     "when": "inSettingsEditor" },
{ "key": "cmd+; cmd+x",           "command": "testing.cancelRun" },
{ "key": "cmd+; shift+cmd+a",     "command": "testing.coverageAll" },
{ "key": "cmd+; shift+cmd+c",     "command": "testing.coverageAtCursor",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; shift+cmd+f",     "command": "testing.coverageCurrentFile",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; shift+cmd+l",     "command": "testing.coverageLastRun" },
{ "key": "cmd+; cmd+a",           "command": "testing.debugAll" },
{ "key": "cmd+; cmd+c",           "command": "testing.debugAtCursor",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; cmd+f",           "command": "testing.debugCurrentFile",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; cmd+e",           "command": "testing.debugFailTests" },
{ "key": "cmd+; cmd+l",           "command": "testing.debugLastRun" },
{ "key": "cmd+; cmd+m",           "command": "testing.openOutputPeek" },
{ "key": "cmd+; e",               "command": "testing.reRunFailTests" },
{ "key": "cmd+; l",               "command": "testing.reRunLastRun" },
{ "key": "cmd+; cmd+r",           "command": "testing.refreshTests",
                                     "when": "testing.canRefresh" },
{ "key": "cmd+; a",               "command": "testing.runAll" },
{ "key": "cmd+; c",               "command": "testing.runAtCursor",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; f",               "command": "testing.runCurrentFile",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; cmd+o",           "command": "testing.showMostRecentOutput",
                                     "when": "testing.hasAnyResults" },
{ "key": "cmd+; shift+cmd+i",     "command": "testing.toggleInlineCoverage" },
{ "key": "cmd+; cmd+i",           "command": "testing.toggleInlineTestOutput" },
{ "key": "alt+h",                 "command": "testing.toggleTestingPeekHistory",
                                     "when": "testing.isPeekVisible" },
{ "key": "alt+cmd+c",             "command": "toggleSearchCaseSensitive",
                                     "when": "searchViewletFocus && !fileMatchOrFolderMatchFocus" },
{ "key": "alt+cmd+c",             "command": "toggleSearchEditorCaseSensitive",
                                     "when": "inSearchEditor && searchInputBoxFocus" },
{ "key": "alt+cmd+l",             "command": "toggleSearchEditorContextLines",
                                     "when": "inSearchEditor" },
{ "key": "alt+cmd+r",             "command": "toggleSearchEditorRegex",
                                     "when": "inSearchEditor && searchInputBoxFocus" },
{ "key": "alt+cmd+w",             "command": "toggleSearchEditorWholeWord",
                                     "when": "inSearchEditor && searchInputBoxFocus" },
{ "key": "alt+cmd+p",             "command": "toggleSearchPreserveCase",
                                     "when": "searchViewletFocus" },
{ "key": "alt+cmd+r",             "command": "toggleSearchRegex",
                                     "when": "searchViewletFocus" },
{ "key": "alt+cmd+w",             "command": "toggleSearchWholeWord",
                                     "when": "searchViewletFocus" },
{ "key": "ctrl+alt+cmd+n",        "command": "welcome.showNewFileEntries" },
{ "key": "cmd+down",              "command": "widgetNavigation.focusNext",
                                     "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'bottom'" },
{ "key": "cmd+up",                "command": "widgetNavigation.focusPrevious",
                                     "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'top'" },
{ "key": "cmd+escape",            "command": "workbench.action.chat.cancel" },
{ "key": "cmd+down",              "command": "workbench.action.chat.focusInput",
                                     "when": "inChat && !inChatInput" },
{ "key": "cmd+i",                 "command": "workbench.action.chat.holdToVoiceChatInChatView",
                                     "when": "chatIsEnabled && hasSpeechProvider && !chatSessionRequestInProgress && !editorFocus && !inChatInput && !inlineChatFocused && !notebookEditorFocused" },
{ "key": "ctrl+l",                "command": "workbench.action.chat.newChat",
                                     "when": "chatIsEnabled && inChat" },
{ "key": "alt+cmd+pagedown",      "command": "workbench.action.chat.nextCodeBlock",
                                     "when": "chatIsEnabled && inChat" },
{ "key": "cmd+f9",                "command": "workbench.action.chat.nextFileTree",
                                     "when": "chatIsEnabled && inChat" },
{ "key": "ctrl+cmd+i",            "command": "workbench.action.chat.open" },
{ "key": "alt+cmd+pageup",        "command": "workbench.action.chat.previousCodeBlock",
                                     "when": "chatIsEnabled && inChat" },
{ "key": "shift+cmd+f9",          "command": "workbench.action.chat.previousFileTree",
                                     "when": "chatIsEnabled && inChat" },
{ "key": "cmd+backspace",         "command": "workbench.action.chat.remove",
                                     "when": "inChat && !inChatInput" },
{ "key": "shift+cmd+enter",       "command": "workbench.action.chat.sendToNewChat",
                                     "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress" },
{ "key": "cmd+i",                 "command": "workbench.action.chat.startVoiceChat",
                                     "when": "chatIsEnabled && hasSpeechProvider && inChatInput && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress && !terminalChatActiveRequest || chatIsEnabled && hasSpeechProvider && inlineChatFocused && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress && !terminalChatActiveRequest" },
{ "key": "cmd+i",                 "command": "workbench.action.chat.stopListeningAndSubmit",
                                     "when": "inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'view' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'view'" },
{ "key": "cmd+w",                 "command": "workbench.action.closeActiveEditor" },
{ "key": "cmd+k cmd+w",           "command": "workbench.action.closeAllEditors" },
{ "key": "cmd+k shift+cmd+w",     "command": "workbench.action.closeAllGroups" },
{ "key": "cmd+k w",               "command": "workbench.action.closeEditorsInGroup" },
{ "key": "cmd+k f",               "command": "workbench.action.closeFolder",
                                     "when": "emptyWorkspaceSupport && workbenchState != 'empty'" },
{ "key": "cmd+w",                 "command": "workbench.action.closeGroup",
                                     "when": "activeEditorGroupEmpty && multipleEditorGroups" },
{ "key": "alt+cmd+t",             "command": "workbench.action.closeOtherEditors" },
{ "key": "shift+escape",          "command": "workbench.action.closeQuickOpen",
                                     "when": "inQuickOpen" },
{ "key": "escape",                "command": "workbench.action.closeQuickOpen",
                                     "when": "inQuickOpen" },
{ "key": "cmd+k u",               "command": "workbench.action.closeUnmodifiedEditors" },
{ "key": "shift+cmd+w",           "command": "workbench.action.closeWindow" },
{ "key": "cmd+w",                 "command": "workbench.action.closeWindow",
                                     "when": "!editorIsOpen && !multipleEditorGroups" },
{ "key": "alt+f5",                "command": "workbench.action.compareEditor.nextChange",
                                     "when": "textCompareEditorVisible" },
{ "key": "cmd+k shift+o",         "command": "workbench.action.compareEditor.openSide",
                                     "when": "inDiffEditor" },
{ "key": "shift+alt+f5",          "command": "workbench.action.compareEditor.previousChange",
                                     "when": "textCompareEditorVisible" },
{ "key": "cmd+k o",               "command": "workbench.action.copyEditorToNewWindow",
                                     "when": "activeEditor" },
{ "key": "shift+f5",              "command": "workbench.action.debug.disconnect",
                                     "when": "focusedSessionIsAttach && inDebugMode" },
{ "key": "shift+cmd+f5",          "command": "workbench.action.debug.restart",
                                     "when": "inDebugMode" },
{ "key": "ctrl+f5",               "command": "workbench.action.debug.run",
                                     "when": "debuggersAvailable && debugState != 'initializing'" },
{ "key": "f5",                    "command": "workbench.action.debug.start",
                                     "when": "debuggersAvailable && debugState == 'inactive'" },
{ "key": "cmd+f11",               "command": "workbench.action.debug.stepIntoTarget",
                                     "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'" },
{ "key": "shift+f11",             "command": "workbench.action.debug.stepOut",
                                     "when": "debugState == 'stopped'" },
{ "key": "f10",                   "command": "workbench.action.debug.stepOver",
                                     "when": "debugState == 'stopped'" },
{ "key": "shift+f5",              "command": "workbench.action.debug.stop",
                                     "when": "inDebugMode && !focusedSessionIsAttach" },
{ "key": "cmd+k m",               "command": "workbench.action.editor.changeLanguageMode",
                                     "when": "!notebookEditorFocused" },
{ "key": "alt+cmd+v",             "command": "workbench.action.editorDictation.start",
                                     "when": "hasSpeechProvider && !editorReadonly && !speechToTextInProgress" },
{ "key": "cmd+k p",               "command": "workbench.action.files.copyPathOfActiveFile" },
{ "key": "cmd+n",                 "command": "workbench.action.files.newUntitledFile" },
{ "key": "cmd+o",                 "command": "workbench.action.files.openFile",
                                     "when": "false" },
{ "key": "cmd+o",                 "command": "workbench.action.files.openFileFolder",
                                     "when": "isMacNative && openFolderWorkspaceSupport" },
{ "key": "cmd+o",                 "command": "workbench.action.files.openFolderViaWorkspace",
                                     "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'" },
{ "key": "cmd+o",                 "command": "workbench.action.files.openLocalFileFolder",
                                     "when": "remoteFileDialogVisible" },
{ "key": "cmd+k r",               "command": "workbench.action.files.revealActiveFileInWindows" },
{ "key": "cmd+s",                 "command": "workbench.action.files.save" },
{ "key": "shift+cmd+s",           "command": "workbench.action.files.saveAs" },
{ "key": "shift+cmd+s",           "command": "workbench.action.files.saveLocalFile",
                                     "when": "remoteFileDialogVisible" },
{ "key": "cmd+k s",               "command": "workbench.action.files.saveWithoutFormatting" },
{ "key": "shift+cmd+f",           "command": "workbench.action.findInFiles" },
{ "key": "cmd+k cmd+up",          "command": "workbench.action.focusAboveGroup" },
{ "key": "cmd+k cmd+down",        "command": "workbench.action.focusBelowGroup" },
{ "key": "cmd+8",                 "command": "workbench.action.focusEighthEditorGroup" },
{ "key": "cmd+5",                 "command": "workbench.action.focusFifthEditorGroup" },
{ "key": "cmd+1",                 "command": "workbench.action.focusFirstEditorGroup" },
{ "key": "cmd+4",                 "command": "workbench.action.focusFourthEditorGroup" },
{ "key": "cmd+k cmd+left",        "command": "workbench.action.focusLeftGroup" },
{ "key": "f6",                    "command": "workbench.action.focusNextPart" },
{ "key": "shift+f6",              "command": "workbench.action.focusPreviousPart" },
{ "key": "cmd+k cmd+right",       "command": "workbench.action.focusRightGroup" },
{ "key": "cmd+2",                 "command": "workbench.action.focusSecondEditorGroup" },
{ "key": "cmd+7",                 "command": "workbench.action.focusSeventhEditorGroup" },
{ "key": "cmd+0",                 "command": "workbench.action.focusSideBar" },
{ "key": "cmd+6",                 "command": "workbench.action.focusSixthEditorGroup" },
{ "key": "cmd+3",                 "command": "workbench.action.focusThirdEditorGroup" },
{ "key": "ctrl+g",                "command": "workbench.action.gotoLine" },
{ "key": "shift+cmd+o",           "command": "workbench.action.gotoSymbol",
                                     "when": "!accessibilityHelpIsShown && !accessibleViewIsShown" },
{ "key": "down",                  "command": "workbench.action.interactivePlayground.arrowDown",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "up",                    "command": "workbench.action.interactivePlayground.arrowUp",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "pagedown",              "command": "workbench.action.interactivePlayground.pageDown",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "pageup",                "command": "workbench.action.interactivePlayground.pageUp",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "cmd+k shift+cmd+\\",    "command": "workbench.action.joinEditorInGroup",
                                     "when": "sideBySideEditorActive" },
{ "key": "cmd+k enter",           "command": "workbench.action.keepEditor" },
{ "key": "cmd+k cmd+r",           "command": "workbench.action.keybindingsReference" },
{ "key": "cmd+9",                 "command": "workbench.action.lastEditorInGroup" },
{ "key": "ctrl+0",                "command": "workbench.action.lastEditorInGroup" },
{ "key": "cmd+k down",            "command": "workbench.action.moveActiveEditorGroupDown" },
{ "key": "cmd+k left",            "command": "workbench.action.moveActiveEditorGroupLeft" },
{ "key": "cmd+k right",           "command": "workbench.action.moveActiveEditorGroupRight" },
{ "key": "cmd+k up",              "command": "workbench.action.moveActiveEditorGroupUp" },
{ "key": "cmd+k shift+cmd+left",  "command": "workbench.action.moveEditorLeftInGroup" },
{ "key": "cmd+k shift+cmd+right", "command": "workbench.action.moveEditorRightInGroup" },
{ "key": "ctrl+cmd+1",            "command": "workbench.action.moveEditorToFirstGroup" },
{ "key": "ctrl+cmd+9",            "command": "workbench.action.moveEditorToLastGroup" },
{ "key": "ctrl+cmd+right",        "command": "workbench.action.moveEditorToNextGroup" },
{ "key": "ctrl+cmd+left",         "command": "workbench.action.moveEditorToPreviousGroup" },
{ "key": "ctrl+-",                "command": "workbench.action.navigateBack",
                                     "when": "canNavigateBack" },
{ "key": "ctrl+shift+-",          "command": "workbench.action.navigateForward",
                                     "when": "canNavigateForward" },
{ "key": "cmd+k cmd+q",           "command": "workbench.action.navigateToLastEditLocation" },
{ "key": "shift+cmd+n",           "command": "workbench.action.newWindow" },
{ "key": "shift+cmd+]",           "command": "workbench.action.nextEditor" },
{ "key": "alt+cmd+right",         "command": "workbench.action.nextEditor" },
{ "key": "cmd+k alt+cmd+right",   "command": "workbench.action.nextEditorInGroup" },
{ "key": "ctrl+1",                "command": "workbench.action.openEditorAtIndex1" },
{ "key": "ctrl+2",                "command": "workbench.action.openEditorAtIndex2" },
{ "key": "ctrl+3",                "command": "workbench.action.openEditorAtIndex3" },
{ "key": "ctrl+4",                "command": "workbench.action.openEditorAtIndex4" },
{ "key": "ctrl+5",                "command": "workbench.action.openEditorAtIndex5" },
{ "key": "ctrl+6",                "command": "workbench.action.openEditorAtIndex6" },
{ "key": "ctrl+7",                "command": "workbench.action.openEditorAtIndex7" },
{ "key": "ctrl+8",                "command": "workbench.action.openEditorAtIndex8" },
{ "key": "ctrl+9",                "command": "workbench.action.openEditorAtIndex9" },
{ "key": "cmd+k cmd+s",           "command": "workbench.action.openGlobalKeybindings" },
{ "key": "ctrl+r",                "command": "workbench.action.openRecent" },
{ "key": "cmd+,",                 "command": "workbench.action.openSettings" },
{ "key": "shift+cmd+u",           "command": "workbench.action.output.toggleOutput",
                                     "when": "workbench.panel.output.active" },
{ "key": "cmd+k shift+enter",     "command": "workbench.action.pinEditor",
                                     "when": "!activeEditorIsPinned" },
{ "key": "shift+cmd+[",           "command": "workbench.action.previousEditor" },
{ "key": "alt+cmd+left",          "command": "workbench.action.previousEditor" },
{ "key": "cmd+k alt+cmd+left",    "command": "workbench.action.previousEditorInGroup" },
{ "key": "cmd+p",                 "command": "workbench.action.quickOpen" },
{ "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
                                     "when": "!activeEditorGroupEmpty" },
{ "key": "ctrl+tab",              "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
                                     "when": "!activeEditorGroupEmpty" },
{ "key": "ctrl+q",                "command": "workbench.action.quickOpenView" },
{ "key": "shift+cmd+i",           "command": "workbench.action.quickchat.toggle",
                                     "when": "chatIsEnabled" },
{ "key": "cmd+q",                 "command": "workbench.action.quit" },
{ "key": "alt+cmd+o",             "command": "workbench.action.remote.showMenu" },
{ "key": "shift+cmd+t",           "command": "workbench.action.reopenClosedEditor" },
{ "key": "shift+cmd+h",           "command": "workbench.action.replaceInFiles" },
{ "key": "shift+cmd+j",           "command": "workbench.action.search.toggleQueryDetails",
                                     "when": "inSearchEditor || searchViewletFocus" },
{ "key": "cmd+k cmd+t",           "command": "workbench.action.selectTheme" },
{ "key": "alt+cmd+tab",           "command": "workbench.action.showAllEditors" },
{ "key": "cmd+t",                 "command": "workbench.action.showAllSymbols" },
{ "key": "f1",                    "command": "workbench.action.showCommands" },
{ "key": "shift+cmd+p",           "command": "workbench.action.showCommands" },
{ "key": "cmd+\\",                "command": "workbench.action.splitEditor" },
{ "key": "cmd+k cmd+\\",          "command": "workbench.action.splitEditorDown" },
{ "key": "cmd+k shift+cmd+\\",    "command": "workbench.action.splitEditorInGroup",
                                     "when": "activeEditorCanSplitInGroup" },
{ "key": "cmd+k cmd+\\",          "command": "workbench.action.splitEditorLeft" },
{ "key": "cmd+k cmd+\\",          "command": "workbench.action.splitEditorOrthogonal" },
{ "key": "cmd+k cmd+\\",          "command": "workbench.action.splitEditorRight" },
{ "key": "cmd+k cmd+\\",          "command": "workbench.action.splitEditorUp" },
{ "key": "ctrl+w",                "command": "workbench.action.switchWindow" },
{ "key": "shift+cmd+b",           "command": "workbench.action.tasks.build",
                                     "when": "taskCommandsRegistered" },
{ "key": "shift+escape",          "command": "workbench.action.terminal.chat.close",
                                     "when": "terminalChatFocus && terminalChatVisible" },
{ "key": "escape",                "command": "workbench.action.terminal.chat.close",
                                     "when": "terminalChatFocus && terminalChatVisible" },
{ "key": "cmd+i",                 "command": "workbench.action.terminal.chat.focusInput",
                                     "when": "terminalChatFocus && !inlineChatFocused" },
{ "key": "cmd+up",                "command": "workbench.action.terminal.chat.focusInput",
                                     "when": "terminalChatFocus && !inlineChatFocused" },
{ "key": "cmd+down",              "command": "workbench.action.terminal.chat.focusResponse",
                                     "when": "terminalChatFocus" },
{ "key": "alt+cmd+enter",         "command": "workbench.action.terminal.chat.insertCommand",
                                     "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks" },
{ "key": "alt+enter",             "command": "workbench.action.terminal.chat.insertCommand",
                                     "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks" },
{ "key": "alt+cmd+enter",         "command": "workbench.action.terminal.chat.insertFirstCommand",
                                     "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest" },
{ "key": "alt+enter",             "command": "workbench.action.terminal.chat.insertFirstCommand",
                                     "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest" },
{ "key": "enter",                 "command": "workbench.action.terminal.chat.makeRequest",
                                     "when": "terminalChatFocus && terminalHasBeenCreated && !inlineChatEmpty && !terminalChatActiveRequest || terminalChatFocus && terminalProcessSupported && !inlineChatEmpty && !terminalChatActiveRequest" },
{ "key": "down",                  "command": "workbench.action.terminal.chat.nextFromHistory",
                                     "when": "terminalChatFocus" },
{ "key": "up",                    "command": "workbench.action.terminal.chat.previousFromHistory",
                                     "when": "terminalChatFocus" },
{ "key": "cmd+enter",             "command": "workbench.action.terminal.chat.runCommand",
                                     "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks" },
{ "key": "cmd+enter",             "command": "workbench.action.terminal.chat.runFirstCommand",
                                     "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest" },
{ "key": "escape",                "command": "workbench.action.terminal.clearSelection",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible" },
{ "key": "cmd+c",                 "command": "workbench.action.terminal.copySelection",
                                     "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused" },
{ "key": "f3",                    "command": "workbench.action.terminal.findNext",
                                     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
{ "key": "cmd+g",                 "command": "workbench.action.terminal.findNext",
                                     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
{ "key": "shift+enter",           "command": "workbench.action.terminal.findNext",
                                     "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported" },
{ "key": "shift+f3",              "command": "workbench.action.terminal.findPrevious",
                                     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
{ "key": "shift+cmd+g",           "command": "workbench.action.terminal.findPrevious",
                                     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
{ "key": "enter",                 "command": "workbench.action.terminal.findPrevious",
                                     "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported" },
{ "key": "cmd+down",              "command": "workbench.action.terminal.focus",
                                     "when": "accessibilityModeEnabled && accessibleViewOnLastLine && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewOnLastLine && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "cmd+up",                "command": "workbench.action.terminal.focusAccessibleBuffer",
                                     "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
{ "key": "alt+f2",                "command": "workbench.action.terminal.focusAccessibleBuffer",
                                     "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
{ "key": "cmd+f",                 "command": "workbench.action.terminal.focusFind",
                                     "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
{ "key": "cmd+k cmd+i",           "command": "workbench.action.terminal.focusHover",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
{ "key": "shift+cmd+]",           "command": "workbench.action.terminal.focusNext",
                                     "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
{ "key": "alt+cmd+down",          "command": "workbench.action.terminal.focusNextPane",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+right",         "command": "workbench.action.terminal.focusNextPane",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+[",           "command": "workbench.action.terminal.focusPrevious",
                                     "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
{ "key": "alt+cmd+up",            "command": "workbench.action.terminal.focusPreviousPane",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+left",          "command": "workbench.action.terminal.focusPreviousPane",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+\\",          "command": "workbench.action.terminal.focusTabs",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
{ "key": "cmd+g",                 "command": "workbench.action.terminal.goToRecentDirectory",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "shift+escape",          "command": "workbench.action.terminal.hideFind",
                                     "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported" },
{ "key": "escape",                "command": "workbench.action.terminal.hideFind",
                                     "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported" },
{ "key": "delete",                "command": "workbench.action.terminal.killActiveTab",
                                     "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
{ "key": "cmd+backspace",         "command": "workbench.action.terminal.killActiveTab",
                                     "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
{ "key": "cmd+w",                 "command": "workbench.action.terminal.killEditor",
                                     "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+shift+`",          "command": "workbench.action.terminal.new",
                                     "when": "terminalProcessSupported || terminalWebExtensionContributedProfile" },
{ "key": "shift+cmd+c",           "command": "workbench.action.terminal.openNativeConsole",
                                     "when": "!terminalFocus" },
{ "key": "cmd+v",                 "command": "workbench.action.terminal.paste",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "enter",                 "command": "workbench.action.terminal.renameActiveTab",
                                     "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection" },
{ "key": "ctrl+cmd+down",         "command": "workbench.action.terminal.resizePaneDown",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+cmd+left",         "command": "workbench.action.terminal.resizePaneLeft",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+cmd+right",        "command": "workbench.action.terminal.resizePaneRight",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+cmd+up",           "command": "workbench.action.terminal.resizePaneUp",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "cmd+r",                 "command": "workbench.action.terminal.runRecentCommand",
                                     "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "ctrl+alt+r",            "command": "workbench.action.terminal.runRecentCommand",
                                     "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
{ "key": "alt+cmd+pagedown",      "command": "workbench.action.terminal.scrollDown",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "pagedown",              "command": "workbench.action.terminal.scrollDownPage",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+end",               "command": "workbench.action.terminal.scrollToBottom",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+end",               "command": "workbench.action.terminal.scrollToBottomAccessibleView",
                                     "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "cmd+down",              "command": "workbench.action.terminal.scrollToNextCommand",
                                     "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
{ "key": "cmd+up",                "command": "workbench.action.terminal.scrollToPreviousCommand",
                                     "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
{ "key": "cmd+home",              "command": "workbench.action.terminal.scrollToTop",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+home",              "command": "workbench.action.terminal.scrollToTopAccessibleView",
                                     "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "alt+cmd+pageup",        "command": "workbench.action.terminal.scrollUp",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "pageup",                "command": "workbench.action.terminal.scrollUpPage",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+a",                 "command": "workbench.action.terminal.selectAll",
                                     "when": "terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
{ "key": "shift+cmd+down",        "command": "workbench.action.terminal.selectToNextCommand",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+up",          "command": "workbench.action.terminal.selectToPreviousCommand",
                                     "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+space",            "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                     "args": {"text":"\u001b[24~a"} },
{ "key": "alt+space",             "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                     "args": {"text":"\u001b[24~b"} },
{ "key": "shift+enter",           "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                     "args": {"text":"\u001b[24~c"} },
{ "key": "shift+cmd+right",       "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                     "args": {"text":"\u001b[24~d"} },
{ "key": "ctrl+space",            "command": "workbench.action.terminal.sendSequence",
                                     "when": "config.terminal.integrated.suggest.enabled && terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                     "args": {"text":"\u001b[24~e"} },
{ "key": "shift+cmd+left",        "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus && terminalShellType == 'pwsh'",
                                     "args": {"text":"\u001b[1;2H"} },
{ "key": "ctrl+alt+r",            "command": "workbench.action.terminal.sendSequence",
                                     "when": "accessibilityModeEnabled && terminalFocus",
                                     "args": {"text":"\u0012"} },
{ "key": "ctrl+alt+g",            "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0007"} },
{ "key": "alt+backspace",         "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0017"} },
{ "key": "alt+delete",            "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u001bd"} },
{ "key": "cmd+backspace",         "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0015"} },
{ "key": "cmd+left",              "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0001"} },
{ "key": "cmd+right",             "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0005"} },
{ "key": "ctrl+shift+2",          "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0000"} },
{ "key": "ctrl+shift+6",          "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u001e"} },
{ "key": "ctrl+/",                "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u001f"} },
{ "key": "cmd+.",                 "command": "workbench.action.terminal.showQuickFixes",
                                     "when": "terminalFocus" },
{ "key": "alt+z",                 "command": "workbench.action.terminal.sizeToContentWidth",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported" },
{ "key": "ctrl+shift+5",          "command": "workbench.action.terminal.split",
                                     "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile" },
{ "key": "cmd+\\",                "command": "workbench.action.terminal.split",
                                     "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile" },
{ "key": "ctrl+shift+5",          "command": "workbench.action.terminal.splitActiveTab",
                                     "when": "terminalProcessSupported && terminalTabsFocus" },
{ "key": "cmd+\\",                "command": "workbench.action.terminal.splitActiveTab",
                                     "when": "terminalProcessSupported && terminalTabsFocus" },
{ "key": "alt+cmd+c",             "command": "workbench.action.terminal.toggleFindCaseSensitive",
                                     "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported" },
{ "key": "alt+cmd+r",             "command": "workbench.action.terminal.toggleFindRegex",
                                     "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported" },
{ "key": "alt+cmd+w",             "command": "workbench.action.terminal.toggleFindWholeWord",
                                     "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported" },
{ "key": "ctrl+`",                "command": "workbench.action.terminal.toggleTerminal",
                                     "when": "terminal.active" },
{ "key": "alt+cmd+b",             "command": "workbench.action.toggleAuxiliaryBar" },
{ "key": "alt+cmd+0",             "command": "workbench.action.toggleEditorGroupLayout" },
{ "key": "ctrl+cmd+f",            "command": "workbench.action.toggleFullScreen",
                                     "when": "!isIOS" },
{ "key": "cmd+k cmd+m",           "command": "workbench.action.toggleMaximizeEditorGroup",
                                     "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups" },
{ "key": "cmd+j",                 "command": "workbench.action.togglePanel" },
{ "key": "cmd+b",                 "command": "workbench.action.toggleSidebarVisibility" },
{ "key": "cmd+k z",               "command": "workbench.action.toggleZenMode",
                                     "when": "!isAuxiliaryWindowFocusedContext" },
{ "key": "cmd+k shift+enter",     "command": "workbench.action.unpinEditor",
                                     "when": "activeEditorIsPinned" },
{ "key": "cmd+numpad_add",        "command": "workbench.action.zoomIn" },
{ "key": "shift+cmd+=",           "command": "workbench.action.zoomIn" },
{ "key": "cmd+=",                 "command": "workbench.action.zoomIn" },
{ "key": "cmd+numpad_subtract",   "command": "workbench.action.zoomOut" },
{ "key": "shift+cmd+-",           "command": "workbench.action.zoomOut" },
{ "key": "cmd+-",                 "command": "workbench.action.zoomOut" },
{ "key": "cmd+numpad0",           "command": "workbench.action.zoomReset" },
{ "key": "shift+cmd+m",           "command": "workbench.actions.view.problems",
                                     "when": "workbench.panel.markers.view.active" },
{ "key": "escape",                "command": "workbench.banner.focusBanner",
                                     "when": "bannerFocused" },
{ "key": "down",                  "command": "workbench.banner.focusNextAction",
                                     "when": "bannerFocused" },
{ "key": "right",                 "command": "workbench.banner.focusNextAction",
                                     "when": "bannerFocused" },
{ "key": "up",                    "command": "workbench.banner.focusPreviousAction",
                                     "when": "bannerFocused" },
{ "key": "left",                  "command": "workbench.banner.focusPreviousAction",
                                     "when": "bannerFocused" },
{ "key": "shift+cmd+y",           "command": "workbench.debug.action.toggleRepl",
                                     "when": "workbench.panel.repl.view.active" },
{ "key": "cmd+k c",               "command": "workbench.files.action.compareWithClipboard" },
{ "key": "cmd+k d",               "command": "workbench.files.action.compareWithSaved" },
{ "key": "cmd+k e",               "command": "workbench.files.action.focusOpenEditorsView",
                                     "when": "workbench.explorer.openEditorsView.active" },
{ "key": "escape",                "command": "workbench.statusBar.clearFocus",
                                     "when": "statusBarFocused" },
{ "key": "home",                  "command": "workbench.statusBar.focusFirst",
                                     "when": "statusBarFocused" },
{ "key": "end",                   "command": "workbench.statusBar.focusLast",
                                     "when": "statusBarFocused" },
{ "key": "down",                  "command": "workbench.statusBar.focusNext",
                                     "when": "statusBarFocused" },
{ "key": "right",                 "command": "workbench.statusBar.focusNext",
                                     "when": "statusBarFocused" },
{ "key": "up",                    "command": "workbench.statusBar.focusPrevious",
                                     "when": "statusBarFocused" },
{ "key": "left",                  "command": "workbench.statusBar.focusPrevious",
                                     "when": "statusBarFocused" },
{ "key": "shift+cmd+d",           "command": "workbench.view.debug",
                                     "when": "viewContainer.workbench.view.debug.enabled" },
{ "key": "shift+cmd+e",           "command": "workbench.view.explorer",
                                     "when": "viewContainer.workbench.view.explorer.enabled" },
{ "key": "shift+cmd+x",           "command": "workbench.view.extensions",
                                     "when": "viewContainer.workbench.view.extensions.enabled" },
{ "key": "ctrl+shift+g",          "command": "workbench.view.scm",
                                     "when": "workbench.scm.active" },
{ "key": "shift+cmd+f",           "command": "workbench.view.search",
                                     "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/" },
{ "key": "alt+right",             "command": "breadcrumbs.focusNextWithPicker",
                                     "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "alt+left",              "command": "breadcrumbs.focusPreviousWithPicker",
                                     "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused" },
{ "key": "escape",                "command": "breadcrumbs.selectEditor",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "down",                  "command": "notebook.cell.nullAction",
                                     "when": "notebookOutputInputFocused" },
{ "key": "up",                    "command": "notebook.cell.nullAction",
                                     "when": "notebookOutputInputFocused" },
{ "key": "cmd+a",                 "command": "notebook.cell.output.selectAll",
                                     "when": "notebookEditorFocused && notebookOutputFocused" },
{ "key": "ctrl+pageup",           "command": "notebook.focusNextEditor",
                                     "when": "accessibilityModeEnabled && notebookCellEditorFocused" },
{ "key": "ctrl+pageup",           "command": "notebook.focusPreviousEditor",
                                     "when": "accessibilityModeEnabled && notebookCellEditorFocused" },
{ "key": "cmd+k down",            "command": "views.moveViewDown",
                                     "when": "focusedView != ''" },
{ "key": "cmd+k left",            "command": "views.moveViewLeft",
                                     "when": "focusedView != ''" },
{ "key": "cmd+k right",           "command": "views.moveViewRight",
                                     "when": "focusedView != ''" },
{ "key": "cmd+k up",              "command": "views.moveViewUp",
                                     "when": "focusedView != ''" },
{ "key": "shift+cmd+]",           "command": "workbench.action.debug.nextConsole",
                                     "when": "inDebugRepl" },
{ "key": "shift+cmd+[",           "command": "workbench.action.debug.prevConsole",
                                     "when": "inDebugRepl" },
{ "key": "tab",                   "command": "workbench.action.terminal.acceptSelectedSuggestion",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "enter",                 "command": "workbench.action.terminal.acceptSelectedSuggestionEnter",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "cmd+k",                 "command": "workbench.action.terminal.clear",
                                     "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "escape",                "command": "workbench.action.terminal.hideSuggestWidget",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "shift+cmd+o",           "command": "workbench.action.terminal.openDetectedLink",
                                     "when": "terminalFocus && terminalHasBeenCreated" },
{ "key": "shift+cmd+g",           "command": "workbench.action.terminal.openDetectedLink",
                                     "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "pagedown",              "command": "workbench.action.terminal.selectNextPageSuggestion",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "down",                  "command": "workbench.action.terminal.selectNextSuggestion",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "pageup",                "command": "workbench.action.terminal.selectPrevPageSuggestion",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "up",                    "command": "workbench.action.terminal.selectPrevSuggestion",
                                     "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
{ "key": "f6",                    "command": "workbench.action.debug.pause",
                                     "when": "debugState == 'running'" },
{ "key": "alt+down",              "command": "workbench.action.terminal.accessibleBufferGoToNextCommand",
                                     "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "alt+up",                "command": "workbench.action.terminal.accessibleBufferGoToPreviousCommand",
                                     "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
{ "key": "enter",                 "command": "debug.renameWatchExpression",
                                     "when": "watchExpressionsFocused" },
{ "key": "enter",                 "command": "debug.setVariable",
                                     "when": "variablesFocused" },
{ "key": "space",                 "command": "debug.toggleBreakpoint",
                                     "when": "breakpointsFocused && !inputFocus" },
{ "key": "escape",                "command": "notebook.cell.quitEdit",
                                     "when": "notebookEditorFocused && notebookOutputFocused" },
{ "key": "cmd+v",                 "command": "filesExplorer.paste",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus" },
{ "key": "alt+cmd+backspace",     "command": "deleteFile",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus" },
{ "key": "cmd+backspace",         "command": "deleteFile",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus" },
{ "key": "shift+cmd+.",           "command": "editor.action.accessibleViewGoToSymbol",
                                     "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown" },
{ "key": "shift+cmd+o",           "command": "editor.action.accessibleViewGoToSymbol",
                                     "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown" },
{ "key": "cmd+e",                 "command": "editor.action.toggleScreenReaderAccessibilityMode",
                                     "when": "accessibilityHelpIsShown" },
{ "key": "shift+alt+f1",          "command": "editor.action.toggleScreenReaderAccessibilityMode" },
{ "key": "escape",                "command": "editor.closeCallHierarchy",
                                     "when": "callHierarchyVisible && !config.editor.stablePeek" },
{ "key": "escape",                "command": "editor.closeTypeHierarchy",
                                     "when": "typeHierarchyVisible && !config.editor.stablePeek" },
{ "key": "cmd+down",              "command": "explorer.openAndPassFocus",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus" },
{ "key": "escape",                "command": "filesExplorer.cancelCut",
                                     "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus" },
{ "key": "cmd+c",                 "command": "filesExplorer.copy",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus" },
{ "key": "cmd+x",                 "command": "filesExplorer.cut",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
{ "key": "space",                 "command": "filesExplorer.openFilePreserveFocus",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus" },
{ "key": "home",                  "command": "firstCompressedFolder",
                                     "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus" },
{ "key": "cmd+enter",             "command": "inlineChat.acceptChanges",
                                     "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatDocumentChanged || inlineChatHasProvider && inlineChatVisible && config.inlineChat.mode != 'preview'" },
{ "key": "end",                   "command": "lastCompressedFolder",
                                     "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus" },
{ "key": "delete",                "command": "moveFileToTrash",
                                     "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus" },
{ "key": "cmd+backspace",         "command": "moveFileToTrash",
                                     "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus" },
{ "key": "right",                 "command": "nextCompressedFolder",
                                     "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus" },
{ "key": "left",                  "command": "previousCompressedFolder",
                                     "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus" },
{ "key": "delete",                "command": "remote.tunnel.closeInline",
                                     "when": "tunnelCloseable && tunnelViewFocus" },
{ "key": "cmd+backspace",         "command": "remote.tunnel.closeInline",
                                     "when": "tunnelCloseable && tunnelViewFocus" },
{ "key": "cmd+c",                 "command": "remote.tunnel.copyAddressInline",
                                     "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
{ "key": "enter",                 "command": "remote.tunnel.label",
                                     "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
{ "key": "enter",                 "command": "renameFile",
                                     "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
{ "key": "f5",                    "command": "workbench.action.debug.continue",
                                     "when": "debugState == 'stopped'" },
{ "key": "f11",                   "command": "workbench.action.debug.stepInto",
                                     "when": "debugState != 'inactive'" },
{ "key": "shift+escape",          "command": "closeReferenceSearch",
                                     "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus" },
{ "key": "escape",                "command": "closeReferenceSearch",
                                     "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus" },
{ "key": "cmd+up",                "command": "list.stickyScroll.collapse",
                                     "when": "treestickyScrollFocused" },
{ "key": "left",                  "command": "list.stickyScroll.collapse",
                                     "when": "treestickyScrollFocused" },
{ "key": "cmd+down",              "command": "list.stickyScrollselect",
                                     "when": "treestickyScrollFocused" },
{ "key": "enter",                 "command": "list.stickyScrollselect",
                                     "when": "treestickyScrollFocused" },
{ "key": "space",                 "command": "list.stickyScrolltoggleExpand",
                                     "when": "treestickyScrollFocused" },
{ "key": "escape",                "command": "notifications.hideList",
                                     "when": "notificationCenterVisible" },
{ "key": "ctrl+alt+cmd+right",    "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "alt+cmd+right",         "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "ctrl+cmd+right",        "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "cmd+right",             "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "ctrl+alt+right",        "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "ctrl+right",            "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "alt+right",             "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "right",                 "command": "quickInput.acceptInBackground",
                                     "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
{ "key": "ctrl+-",                "command": "workbench.action.quickInputBack",
                                     "when": "inQuickOpen" },
{ "key": "ctrl+tab",              "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
                                     "when": "inEditorsPicker && inQuickOpen" },
{ "key": "cmd+p",                 "command": "workbench.action.quickOpenNavigateNextInFilePicker",
                                     "when": "inFilesPicker && inQuickOpen" },
{ "key": "ctrl+r",                "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
                                     "when": "inQuickOpen && inRecentFilesPicker" },
{ "key": "ctrl+q",                "command": "workbench.action.quickOpenNavigateNextInViewPicker",
                                     "when": "inQuickOpen && inViewsPicker" },
{ "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
                                     "when": "inEditorsPicker && inQuickOpen" },
{ "key": "shift+cmd+p",           "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
                                     "when": "inFilesPicker && inQuickOpen" },
{ "key": "ctrl+shift+r",          "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
                                     "when": "inQuickOpen && inRecentFilesPicker" },
{ "key": "ctrl+shift+q",          "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
                                     "when": "inQuickOpen && inViewsPicker" },
{ "key": "ctrl+n",                "command": "workbench.action.quickOpenSelectNext",
                                     "when": "inQuickOpen" },
{ "key": "ctrl+p",                "command": "workbench.action.quickOpenSelectPrevious",
                                     "when": "inQuickOpen" },
{ "key": "cmd+r",                 "command": "workbench.action.reloadWindow",
                                     "when": "isDevelopment" },
{ "key": "shift+cmd+f",           "command": "workbench.action.terminal.searchWorkspace",
                                     "when": "terminalFocus && terminalProcessSupported && terminalTextSelected" },
{ "key": "alt+cmd+i",             "command": "workbench.action.toggleDevTools",
                                     "when": "isDevelopment" },
{ "key": "escape",                "command": "notifications.hideToasts",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "escape",                "command": "workbench.action.chat.stopListening",
                                     "when": "voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || voiceChatInProgress && scopedVoiceChatInProgress == 'view'" },
{ "key": "escape",                "command": "workbench.action.chat.stopReadChatItemAloud",
                                     "when": "scopedChatSynthesisInProgress" },
{ "key": "escape",                "command": "workbench.action.editorDictation.stop",
                                     "when": "editorDictation.inProgress" },
{ "key": "escape",                "command": "workbench.action.speech.stopReadAloud",
                                     "when": "scopedChatSynthesisInProgress && textToSpeechInProgress" },
{ "key": "cmd+k alt+cmd+s",       "command": "git.stageSelectedRanges",
                                     "when": "isInDiffEditor && !operationInProgress" },
{ "key": "shift+cmd+v",           "command": "markdown.showPreview",
                                     "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
{ "key": "shift+alt+f12",         "command": "references-view.findReferences",
                                     "when": "editorHasReferenceProvider" },
{ "key": "cmd+k cmd+n",           "command": "git.unstageSelectedRanges",
                                     "when": "isInDiffEditor && !operationInProgress" },
{ "key": "cmd+k v",               "command": "markdown.showPreviewToSide",
                                     "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
{ "key": "f4",                    "command": "references-view.next",
                                     "when": "reference-list.hasResult && references-view.canNavigate" },
{ "key": "cmd+k cmd+r",           "command": "git.revertSelectedRanges",
                                     "when": "isInDiffEditor && !operationInProgress" },
{ "key": "shift+f4",              "command": "references-view.prev",
                                     "when": "reference-list.hasResult && references-view.canNavigate" },
{ "key": "shift+alt+h",           "command": "references-view.showCallHierarchy",
                                     "when": "editorHasCallHierarchyProvider" },
{ "key": "alt+o",                 "command": "C_Cpp.SwitchHeaderSource",
                                     "when": "editorTextFocus && editorLangId =~ /^(c|(cuda-)?cpp)$/ && !(config.C_Cpp.intelliSenseEngine =~ /^[dD]isabled$/)" },
{ "key": "alt+cmd+.",             "command": "auto-close-tag.closeTag" },
{ "key": "shift+cmd+2",           "command": "autoDocstring.generateDocstring",
                                     "when": "editorTextFocus" },
{ "key": "f7",                    "command": "cmake.build",
                                     "when": "cmake:enableFullFeatureSet && !cmake:hideBuildCommand" },
{ "key": "ctrl+alt+n",            "command": "code-runner.run" },
{ "key": "f4",                    "command": "dart.showTypeHierarchy",
                                     "when": "!dart-code:isLsp && editorLangId == 'dart'" },
{ "key": "cmd+l cmd+c",           "command": "extension.liveServer.goOffline",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+l g",              "command": "extension.openInGitHub" },
{ "key": "shift+alt+b",           "command": "extension.openInSpecifyBrowser" },
{ "key": "escape",                "command": "extension.vim_escape",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "alt+h",                 "command": "git.viewFileHistory" },
{ "key": "left",                  "command": "gitlens.key.left",
                                     "when": "gitlens:key:left" },
{ "key": "shift+f3",              "command": "hediet.vscode-drawio.linkCodeWithSelectedNode",
                                     "when": "!findWidgetVisible" },
{ "key": "alt+cmd+f",             "command": "liveshare.follow",
                                     "when": "liveshare:hasCollaborators && !liveshare:isFollowing" },
{ "key": "cmd+enter",             "command": "mysql.runSQL",
                                     "when": "config.database-client.executeCursorSQLByShortcut && editorLangId == 'cql' || config.database-client.executeCursorSQLByShortcut && editorLangId == 'dbclient-js' || config.database-client.executeCursorSQLByShortcut && editorLangId == 'postgres' || config.database-client.executeCursorSQLByShortcut && editorLangId == 'sql' || editorHasSelection && editorLangId == 'cql' || editorHasSelection && editorLangId == 'dbclient-js' || editorHasSelection && editorLangId == 'postgres' || editorHasSelection && editorLangId == 'sql'" },
{ "key": "ctrl+alt+b",            "command": "platformio-ide.build",
                                     "when": "pioProjectReady && pioProjectTasksReady" },
{ "key": "alt+cmd+p",             "command": "projectManager.listProjects" },
{ "key": "shift+enter",           "command": "python.execSelectionInTerminal",
                                     "when": "editorTextFocus && !config.python.REPL.sendToNativeREPL && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python' && activeEditor != 'workbench.editor.interactive'" },
{ "key": "enter",                 "command": "pythonIndent.newlineAndIndent",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !neovim.mode && !suggestWidgetVisible && !vim.active && editorLangId == 'python'" },
{ "key": "shift+cmd+v",           "command": "quicktype.pasteJSONAsTypesAndSerialization",
                                     "when": "editorTextFocus && editorLangId != 'markdown'" },
{ "key": "shift+alt+r",           "command": "remote-wsl.revealInExplorer",
                                     "when": "editorFocus && remoteName == 'wsl'" },
{ "key": "ctrl+shift+u",          "command": "rust-analyzer.parentModule",
                                     "when": "editorTextFocus && editorLangId == 'rust'" },
{ "key": "shift+cmd+f",           "command": "vue3snippets.format",
                                     "when": "editorTextFocus && !editorReadonly && editorLangId == 'vue'" },
{ "key": "ctrl+enter",            "command": "workbench.action.chat.applyInEditor",
                                     "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput" },
{ "key": "ctrl+enter",            "command": "workbench.action.chat.insertCodeBlock",
                                     "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput" },
{ "key": "cmd+i",                 "command": "workbench.action.terminal.chat.start",
                                     "when": "terminalChatAgentRegistered && terminalFocusInAny && terminalHasBeenCreated || terminalChatAgentRegistered && terminalFocusInAny && terminalProcessSupported" },
{ "key": "shift+f7",              "command": "cmake.buildWithTarget",
                                     "when": "cmake:enableFullFeatureSet && !cmake:hideBuildCommand" },
{ "key": "ctrl+alt+k",            "command": "code-runner.runCustomCommand" },
{ "key": "ctrl+f5",               "command": "dart.hotReload",
                                     "when": "dart-code:isInDartDebugSession && inDebugMode && debugType == 'dart' || dart-code:service.reloadSources && inDebugMode && debugType == 'dart'" },
{ "key": "ctrl+shift+r ctrl+i",   "command": "editor.action.codeAction",
                                     "when": "editorTextFocus && editorLangId =~ /^(c|(cuda-)?cpp)$/ && !(config.C_Cpp.intelliSenseEngine =~ /^[dD]isabled$/)",
                                     "args": {"kind":"refactor.inline.macro","apply":"first"} },
{ "key": "ctrl+l c",              "command": "extension.copyGitHubLinkToClipboard" },
{ "key": "cmd+l cmd+o",           "command": "extension.liveServer.goOnline",
                                     "when": "editorTextFocus" },
{ "key": "alt+b",                 "command": "extension.openInDefaultBrowser" },
{ "key": "alt+left",              "command": "gitlens.key.alt+left",
                                     "when": "gitlens:key:alt+left" },
{ "key": "alt+cmd+/",             "command": "liveshare.followToTheSide",
                                     "when": "liveshare:hasCollaborators" },
{ "key": "ctrl+cmd+enter",        "command": "mysql.runSQLInNew",
                                     "when": "editorLangId == 'cql' || editorLangId == 'dbclient-js' || editorLangId == 'postgres' || editorLangId == 'sql'" },
{ "key": "escape",                "command": "notebook.cell.quitEdit",
                                     "when": "inputFocus && notebookEditorFocused && vim.active && !editorHasSelection && !editorHoverVisible && vim.mode == 'Normal'" },
{ "key": "ctrl+alt+u",            "command": "platformio-ide.upload",
                                     "when": "pioProjectReady && pioProjectTasksReady" },
{ "key": "shift+enter",           "command": "python.execInREPL",
                                     "when": "config.python.REPL.sendToNativeREPL && editorTextFocus && !jupyter.ownsSelection && !notebookEditorFocused && editorLangId == 'python' && activeEditor != 'workbench.editor.interactive'" },
{ "key": "enter",                 "command": "pythonIndent.newlineAndIndent",
                                     "when": "editorTextFocus && vim.active && !editorHasMultipleSelections && !suggestWidgetVisible && editorLangId == 'python' && vim.mode =~ /(Insert|Replace|SurroundInputMode)/" },
{ "key": "shift+alt+cmd+v",       "command": "quicktype.pasteJSONAsTypes",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+j",          "command": "rust-analyzer.joinLines",
                                     "when": "editorTextFocus && editorLangId == 'rust'" },
{ "key": "ctrl+f5",               "command": "cmake.debugTarget",
                                     "when": "cmake:enableFullFeatureSet && inCMakeProject && !cmake:hideDebugCommand && !inDebugMode" },
{ "key": "ctrl+alt+j",            "command": "code-runner.runByLanguage" },
{ "key": "shift+cmd+f5",          "command": "dart.rerunLastDebugSession",
                                     "when": "dart-code:anyProjectLoaded && dart-code:hasLastDebugConfig && !inDebugMode" },
{ "key": "ctrl+shift+r ctrl+e",   "command": "editor.action.codeAction",
                                     "when": "editorTextFocus && editorLangId =~ /^(c|(cuda-)?cpp)$/ && !(config.C_Cpp.intelliSenseEngine =~ /^[dD]isabled$/)",
                                     "args": {"kind":"refactor.extract.function","apply":"first"} },
{ "key": "ctrl+l p",              "command": "extension.openPrGitProvider" },
{ "key": "home",                  "command": "extension.vim_home",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+left",              "command": "gitlens.key.ctrl+left",
                                     "when": "gitlens:key:ctrl+left" },
{ "key": "alt+cmd+f",             "command": "liveshare.unfollow",
                                     "when": "liveshare:hasCollaborators && liveshare:isFollowing" },
{ "key": "alt+cmd+enter",         "command": "mysql.db.active",
                                     "when": "editorLangId == 'sql'" },
{ "key": "ctrl+alt+s",            "command": "platformio-ide.serialMonitor",
                                     "when": "pioProjectReady" },
{ "key": "enter",                 "command": "python.execInREPLEnter",
                                     "when": "!config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'" },
{ "key": "enter",                 "command": "pythonIndent.newlineAndIndent",
                                     "when": "editorTextFocus && !editorHasMultipleSelections && !suggestWidgetVisible && editorLangId == 'python' && neovim.mode == 'insert'" },
{ "key": "shift+f5",              "command": "cmake.launchTarget",
                                     "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode" },
{ "key": "ctrl+alt+m",            "command": "code-runner.stop" },
{ "key": "ctrl+alt+d",            "command": "dart.openDevTools",
                                     "when": "dart-code:anyProjectLoaded" },
{ "key": "ctrl+home",             "command": "extension.vim_ctrl+home",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "right",                 "command": "gitlens.key.right",
                                     "when": "gitlens:key:right" },
{ "key": "alt+cmd+j",             "command": "liveshare.join",
                                     "when": "liveshare:state != 'Joined' && liveshare:state != 'Shared'" },
{ "key": "cmd+enter",             "command": "mysql.runES",
                                     "when": "editorLangId == 'es'" },
{ "key": "cmd+r",                 "command": "python.refreshTensorBoard",
                                     "when": "python.hasActiveTensorBoardSession" },
{ "key": "end",                   "command": "extension.vim_end",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "alt+right",             "command": "gitlens.key.alt+right",
                                     "when": "gitlens:key:alt+right" },
{ "key": "shift+cmd+enter",       "command": "mysql.runAllQuery",
                                     "when": "editorLangId == 'cql' || editorLangId == 'dbclient-js' || editorLangId == 'postgres' || editorLangId == 'sql'" },
{ "key": "ctrl+end",              "command": "extension.vim_ctrl+end",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+right",             "command": "gitlens.key.ctrl+right",
                                     "when": "gitlens:key:ctrl+right" },
{ "key": "ctrl+shift+cmd+enter",  "command": "mysql.runAllQueryWithoutParse",
                                     "when": "editorLangId == 'cql' || editorLangId == 'dbclient-js' || editorLangId == 'postgres' || editorLangId == 'sql'" },
{ "key": "insert",                "command": "extension.vim_insert",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "alt+,",                 "command": "gitlens.key.alt+,",
                                     "when": "gitlens:key:," },
{ "key": "cmd+enter",             "command": "mysql.mock.run",
                                     "when": "resourceFilename =~ /mock\\.json$/" },
{ "key": "backspace",             "command": "extension.vim_backspace",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "alt+.",                 "command": "gitlens.key.alt+.",
                                     "when": "gitlens:key:." },
{ "key": "delete",                "command": "extension.vim_delete",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "alt+enter",             "command": "gitlens.key.alt+enter",
                                     "when": "gitlens:key:alt+enter" },
{ "key": "tab",                   "command": "extension.vim_tab",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "ctrl+enter",            "command": "gitlens.key.ctrl+enter",
                                     "when": "gitlens:key:ctrl+enter" },
{ "key": "shift+tab",             "command": "extension.vim_shift+tab",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "escape",                "command": "gitlens.key.escape",
                                     "when": "editorTextFocus && gitlens:key:escape && !codeActionMenuVisible && !findWidgetVisible && !isInEmbeddedEditor && !parameterHintsVisible && !quickFixWidgetVisible && !referenceSearchVisible && !renameInputVisible && !suggestWidgetVisible" },
{ "key": "left",                  "command": "extension.vim_left",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "alt+/",                 "command": "gitlens.gitCommands",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "right",                 "command": "extension.vim_right",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "alt+cmd+g /",           "command": "gitlens.gitCommands",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "up",                    "command": "extension.vim_up",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible" },
{ "key": "alt+b",                 "command": "gitlens.toggleFileBlame",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/" },
{ "key": "down",                  "command": "extension.vim_down",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible" },
{ "key": "alt+cmd+g b",           "command": "gitlens.toggleFileBlame",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/" },
{ "key": "shift+alt+b",           "command": "gitlens.toggleCodeLens",
                                     "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'" },
{ "key": "g g",                   "command": "list.focusFirst",
                                     "when": "listFocus && !inputFocus" },
{ "key": "alt+cmd+g shift+b",     "command": "gitlens.toggleCodeLens",
                                     "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'" },
{ "key": "h",                     "command": "list.collapse",
                                     "when": "listFocus && !inputFocus" },
{ "key": "alt+h",                 "command": "gitlens.showQuickFileHistory",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "j",                     "command": "list.focusDown",
                                     "when": "listFocus && !inputFocus" },
{ "key": "alt+cmd+g h",           "command": "gitlens.showQuickFileHistory",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "k",                     "command": "list.focusUp",
                                     "when": "listFocus && !inputFocus" },
{ "key": "shift+alt+h",           "command": "gitlens.showQuickRepoHistory",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "l",                     "command": "list.select",
                                     "when": "listFocus && !inputFocus" },
{ "key": "alt+cmd+g shift+h",     "command": "gitlens.showQuickRepoHistory",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "o",                     "command": "list.toggleExpand",
                                     "when": "listFocus && !inputFocus" },
{ "key": "alt+s",                 "command": "gitlens.showQuickRepoStatus",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "/",                     "command": "list.toggleKeyboardNavigation",
                                     "when": "listFocus && listSupportsKeyboardNavigation && !inputFocus" },
{ "key": "ctrl+a",                "command": "extension.vim_ctrl+a",
                                     "when": "editorTextFocus && vim.active && vim.use<C-a> && !inDebugRepl" },
{ "key": "alt+cmd+g s",           "command": "gitlens.showQuickRepoStatus",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+b",                "command": "extension.vim_ctrl+b",
                                     "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "alt+c",                 "command": "gitlens.showQuickCommitFileDetails",
                                     "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+c",                "command": "extension.vim_ctrl+c",
                                     "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl" },
{ "key": "alt+cmd+g c",           "command": "gitlens.showQuickCommitFileDetails",
                                     "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+d",                "command": "extension.vim_ctrl+d",
                                     "when": "editorTextFocus && vim.active && vim.use<C-d> && !inDebugRepl" },
{ "key": "alt+,",                 "command": "gitlens.diffWithPrevious",
                                     "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "alt+cmd+g ,",           "command": "gitlens.diffWithPrevious",
                                     "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+d",                "command": "list.focusPageDown",
                                     "when": "listFocus && !inputFocus" },
{ "key": "ctrl+e",                "command": "extension.vim_ctrl+e",
                                     "when": "editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl" },
{ "key": "alt+,",                 "command": "gitlens.diffWithPreviousInDiffLeft",
                                     "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+f",                "command": "extension.vim_ctrl+f",
                                     "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "alt+cmd+g ,",           "command": "gitlens.diffWithPreviousInDiffLeft",
                                     "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+g",                "command": "extension.vim_ctrl+g",
                                     "when": "editorTextFocus && vim.active && vim.use<C-g> && !inDebugRepl" },
{ "key": "alt+,",                 "command": "gitlens.diffWithPreviousInDiffRight",
                                     "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+h",                "command": "extension.vim_ctrl+h",
                                     "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl" },
{ "key": "alt+cmd+g ,",           "command": "gitlens.diffWithPreviousInDiffRight",
                                     "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+i",                "command": "extension.vim_ctrl+i",
                                     "when": "editorTextFocus && vim.active && vim.use<C-i> && !inDebugRepl" },
{ "key": "alt+.",                 "command": "gitlens.diffWithNext",
                                     "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+j",                "command": "extension.vim_ctrl+j",
                                     "when": "editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl" },
{ "key": "alt+cmd+g .",           "command": "gitlens.diffWithNext",
                                     "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+k",                "command": "extension.vim_ctrl+k",
                                     "when": "editorTextFocus && vim.active && vim.use<C-k> && !inDebugRepl" },
{ "key": "alt+.",                 "command": "gitlens.diffWithNextInDiffLeft",
                                     "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+l",                "command": "extension.vim_navigateCtrlL",
                                     "when": "editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl" },
{ "key": "alt+cmd+g .",           "command": "gitlens.diffWithNextInDiffLeft",
                                     "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+m",                "command": "extension.vim_ctrl+m",
                                     "when": "editorTextFocus && vim.active && vim.use<C-m> && !inDebugRepl || vim.active && vim.use<C-m> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-m> && !inDebugRepl && vim.mode == 'SearchInProgressMode'" },
{ "key": "alt+.",                 "command": "gitlens.diffWithNextInDiffRight",
                                     "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+n",                "command": "extension.vim_ctrl+n",
                                     "when": "editorTextFocus && vim.active && vim.use<C-n> && !inDebugRepl || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'SearchInProgressMode'" },
{ "key": "alt+cmd+g .",           "command": "gitlens.diffWithNextInDiffRight",
                                     "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+o",                "command": "extension.vim_ctrl+o",
                                     "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl" },
{ "key": "shift+alt+.",           "command": "gitlens.diffWithWorking",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+p",                "command": "extension.vim_ctrl+p",
                                     "when": "editorTextFocus && vim.active && vim.use<C-p> && !inDebugRepl || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'SearchInProgressMode'" },
{ "key": "alt+cmd+g shift+.",     "command": "gitlens.diffWithWorking",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+q",                "command": "extension.vim_winCtrlQ",
                                     "when": "editorTextFocus && vim.active && vim.use<C-q> && !inDebugRepl" },
{ "key": "shift+alt+,",           "command": "gitlens.diffLineWithPrevious",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+r",                "command": "extension.vim_ctrl+r",
                                     "when": "editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl" },
{ "key": "alt+cmd+g shift+,",     "command": "gitlens.diffLineWithPrevious",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+s",                "command": "extension.vim_ctrl+s",
                                     "when": "editorTextFocus && vim.active && vim.use<C-s> && !inDebugRepl" },
{ "key": "ctrl+shift+g",          "command": "workbench.view.scm",
                                     "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+t",                "command": "extension.vim_ctrl+t",
                                     "when": "editorTextFocus && vim.active && vim.use<C-t> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.branches.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.branches/" },
{ "key": "ctrl+u",                "command": "extension.vim_ctrl+u",
                                     "when": "editorTextFocus && vim.active && vim.use<C-u> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.commits.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/" },
{ "key": "cmd+c",                 "command": "gitlens.views.contributors.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.contributors/" },
{ "key": "ctrl+u",                "command": "list.focusPageUp",
                                     "when": "listFocus && !inputFocus" },
{ "key": "ctrl+v",                "command": "extension.vim_ctrl+v",
                                     "when": "editorTextFocus && vim.active && vim.use<C-v> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.drafts.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.drafts/" },
{ "key": "ctrl+w",                "command": "extension.vim_ctrl+w",
                                     "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.fileHistory.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.fileHistory/" },
{ "key": "ctrl+x",                "command": "extension.vim_ctrl+x",
                                     "when": "editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.lineHistory.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.lineHistory/" },
{ "key": "ctrl+y",                "command": "extension.vim_ctrl+y",
                                     "when": "editorTextFocus && vim.active && vim.use<C-y> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.pullRequest.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.pullRequest/" },
{ "key": "ctrl+z",                "command": "extension.vim_ctrl+z",
                                     "when": "editorTextFocus && vim.active && vim.use<C-z> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.remotes.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.remotes/" },
{ "key": "ctrl+6",                "command": "extension.vim_ctrl+6",
                                     "when": "editorTextFocus && vim.active && vim.use<C-6> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.repositories.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.repositories/" },
{ "key": "cmd+c",                 "command": "gitlens.views.stashes.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.stashes/" },
{ "key": "ctrl+[",                "command": "extension.vim_ctrl+[",
                                     "when": "editorTextFocus && vim.active && vim.use<C-[> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.searchAndCompare.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.searchAndCompare\\b/" },
{ "key": "ctrl+]",                "command": "extension.vim_ctrl+]",
                                     "when": "editorTextFocus && vim.active && vim.use<C-]> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.tags.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.tags/" },
{ "key": "ctrl+shift+2",          "command": "extension.vim_ctrl+shift+2",
                                     "when": "editorTextFocus && vim.active && vim.use<C-shift+2>" },
{ "key": "cmd+c",                 "command": "gitlens.views.worktrees.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.worktrees/" },
{ "key": "ctrl+up",               "command": "extension.vim_ctrl+up",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+c",                 "command": "gitlens.views.workspaces.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.workspaces/" },
{ "key": "ctrl+down",             "command": "extension.vim_ctrl+down",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "ctrl+left",             "command": "extension.vim_ctrl+left",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "ctrl+right",            "command": "extension.vim_ctrl+right",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "ctrl+pagedown",         "command": "extension.vim_ctrl+pagedown",
                                     "when": "editorTextFocus && vim.active && vim.use<C-pagedown> && !inDebugRepl" },
{ "key": "ctrl+pageup",           "command": "extension.vim_ctrl+pageup",
                                     "when": "editorTextFocus && vim.active && vim.use<C-pageup> && !inDebugRepl" },
{ "key": "ctrl+space",            "command": "extension.vim_ctrl+space",
                                     "when": "editorTextFocus && vim.active && vim.use<C-space> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "shift+g",               "command": "list.focusLast",
                                     "when": "listFocus && !inputFocus" },
{ "key": "ctrl+backspace",        "command": "extension.vim_ctrl+backspace",
                                     "when": "editorTextFocus && vim.active && vim.use<C-BS> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "shift+backspace",       "command": "extension.vim_shift+backspace",
                                     "when": "editorTextFocus && vim.active && vim.use<S-BS> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+left",              "command": "extension.vim_cmd+left",
                                     "when": "editorTextFocus && vim.active && vim.use<D-left> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+right",             "command": "extension.vim_cmd+right",
                                     "when": "editorTextFocus && vim.active && vim.use<D-right> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+a",                 "command": "extension.vim_cmd+a",
                                     "when": "editorTextFocus && vim.active && vim.use<D-a> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+c",                 "command": "extension.vim_cmd+c",
                                     "when": "editorTextFocus && vim.active && vim.overrideCopy && vim.use<D-c> && !inDebugRepl" },
{ "key": "cmd+d",                 "command": "extension.vim_cmd+d",
                                     "when": "editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl" },
{ "key": "cmd+v",                 "command": "extension.vim_cmd+v",
                                     "when": "editorTextFocus && vim.active && vim.use<D-v> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || editorTextFocus && vim.active && vim.use<D-v> && !inDebugRepl && vim.mode == 'SearchInProgressMode'" },
{ "key": "alt+cmd+down",          "command": "extension.vim_cmd+alt+down",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "alt+cmd+up",            "command": "extension.vim_cmd+alt+up",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "j",                     "command": "notebook.focusNextEditor",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused && vim.mode == 'Normal' && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
{ "key": "k",                     "command": "notebook.focusPreviousEditor",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused && vim.mode == 'Normal' && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
{ "key": "cmd+.",                 "command": "acceptSelectedCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "enter",                 "command": "acceptSelectedCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "shift+escape",          "command": "hideCodeActionWidget",
                                     "when": "codeActionMenuVisible" },
{ "key": "escape",                "command": "hideCodeActionWidget",
                                     "when": "codeActionMenuVisible" },
{ "key": "cmd+enter",             "command": "previewSelectedCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "ctrl+n",                "command": "selectNextCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "cmd+down",              "command": "selectNextCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "down",                  "command": "selectNextCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "ctrl+p",                "command": "selectPrevCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "cmd+up",                "command": "selectPrevCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "up",                    "command": "selectPrevCodeAction",
                                     "when": "codeActionMenuVisible" },
{ "key": "escape",                "command": "diffEditor.exitCompareMove",
                                     "when": "comparingMovedCode" },
{ "key": "cmd+space",             "command": "editor.action.inlineEdits.accept",
                                     "when": "inlineEditsVisible" }
]


// Here are other available commands: 
// - C_Cpp.AddDebugConfiguration
// - C_Cpp.BuildAndDebugFile
// - C_Cpp.BuildAndRunFile
// - C_Cpp.ConfigurationEditJSON
// - C_Cpp.ConfigurationEditUI
// - C_Cpp.ConfigurationProviderSelect
// - C_Cpp.ConfigurationSelect
// - C_Cpp.CreateDeclarationOrDefinition
// - C_Cpp.DisableErrorSquiggles
// - C_Cpp.EnableErrorSquiggles
// - C_Cpp.GenerateDoxygenComment
// - C_Cpp.GenerateEditorConfig
// - C_Cpp.GoToNextDirectiveInGroup
// - C_Cpp.GoToPrevDirectiveInGroup
// - C_Cpp.InstallCompiler
// - C_Cpp.LogDiagnostics
// - C_Cpp.RemoveAllCodeAnalysisProblems
// - C_Cpp.RescanCompilers
// - C_Cpp.RescanWorkspace
// - C_Cpp.ResetDatabase
// - C_Cpp.RestartIntelliSenseForFile
// - C_Cpp.RunCodeAnalysisOnActiveFile
// - C_Cpp.RunCodeAnalysisOnAllFiles
// - C_Cpp.RunCodeAnalysisOnOpenFiles
// - C_Cpp.SelectIntelliSenseConfiguration
// - C_Cpp.TakeSurvey
// - C_Cpp.ToggleDimInactiveRegions
// - C_Cpp.ToggleIncludeFallback
// - C_Cpp.VcpkgClipboardInstallSuggested
// - C_Cpp.VcpkgOnlineHelpSuggested
// - C_Cpp.activeSshTarget
// - C_Cpp.addSshTarget
// - C_Cpp.referencesViewGroupByType
// - C_Cpp.referencesViewUngroupByType
// - C_Cpp.refreshCppSshTargetsView
// - C_Cpp.removeSshTarget
// - C_Cpp.selectActiveSshTarget
// - C_Cpp.selectSshTarget
// - C_Cpp.setActiveSshTarget
// - C_Cpp.sshTerminal
// - CppReferencesView.focus
// - CppReferencesView.resetViewLocation
// - CppSshTargetsView.focus
// - CppSshTargetsView.resetViewLocation
// - acceptSelectedSuggestionOnEnter
// - acceptSnippet
// - accessibility.announcement.help
// - addRootFolder
// - beautify.format
// - breadcrumbs.toggle
// - breadcrumbs.toggleFromEditorTitle
// - cSpell.addIgnoreWord
// - cSpell.addIgnoreWordsToFolder
// - cSpell.addIgnoreWordsToUser
// - cSpell.addIgnoreWordsToWorkspace
// - cSpell.addIssuesToDictionary
// - cSpell.addWordToCSpellConfig
// - cSpell.addWordToDictionary
// - cSpell.addWordToFolderDictionary
// - cSpell.addWordToFolderSettings
// - cSpell.addWordToUserDictionary
// - cSpell.addWordToUserSettings
// - cSpell.addWordToWorkspaceDictionary
// - cSpell.addWordToWorkspaceSettings
// - cSpell.addWordsToConfigFileFromServer
// - cSpell.addWordsToDictionaryFileFromServer
// - cSpell.addWordsToVSCodeSettingsFromServer
// - cSpell.coding.doRefactor
// - cSpell.coding.start
// - cSpell.createCSpellConfig
// - cSpell.createCustomDictionary
// - cSpell.disableCurrentLanguage
// - cSpell.disableForGlobal
// - cSpell.disableForWorkspace
// - cSpell.disableLanguage
// - cSpell.displayCSpellInfo
// - cSpell.editText
// - cSpell.enableCurrentLanguage
// - cSpell.enableForGlobal
// - cSpell.enableForWorkspace
// - cSpell.enableLanguage
// - cSpell.goToNextSpellingIssue
// - cSpell.goToNextSpellingIssueAndSuggest
// - cSpell.goToPreviousSpellingIssue
// - cSpell.goToPreviousSpellingIssueAndSuggest
// - cSpell.logPerfTimeline
// - cSpell.openFileAtLine
// - cSpell.removeWordFromFolderDictionary
// - cSpell.removeWordFromUserDictionary
// - cSpell.removeWordFromWorkspaceDictionary
// - cSpell.suggestSpellingCorrections
// - cSpell.toggleEnableForGlobal
// - cSpell.toggleEnableForWorkspace
// - cSpell.toggleEnableSpellChecker
// - cSpellRegExpTester.editRegExp
// - cSpellRegExpTester.selectRegExp
// - cSpellRegExpTester.testRegExp
// - cSpellRegExpView.focus
// - cSpellRegExpView.resetViewLocation
// - callStack.collapse
// - callStackWidget.goToFile
// - changeEditorIndentation1
// - cleanSearchEditorState
// - closeReferenceSearchEditor
// - cmake.addBuildPreset
// - cmake.addConfigurePreset
// - cmake.addPackagePreset
// - cmake.addTestPreset
// - cmake.addWorkflowPreset
// - cmake.appendBuildDirectoryToWorkspace
// - cmake.buildAll
// - cmake.clean
// - cmake.cleanAll
// - cmake.cleanConfigure
// - cmake.cleanConfigureAll
// - cmake.cleanConfigureAllWithDebugger
// - cmake.cleanConfigureWithDebugger
// - cmake.cleanRebuild
// - cmake.cleanRebuildAll
// - cmake.compileFile
// - cmake.configure
// - cmake.configureAll
// - cmake.configureAllWithDebugger
// - cmake.configureWithDebugger
// - cmake.cpack
// - cmake.cpackAll
// - cmake.ctest
// - cmake.ctestAll
// - cmake.debugTargetAll
// - cmake.editCache
// - cmake.editCacheUI
// - cmake.editKits
// - cmake.install
// - cmake.installAll
// - cmake.launchTargetAll
// - cmake.logDiagnostics
// - cmake.onlineHelp
// - cmake.openCMakePresets
// - cmake.openSettings
// - cmake.outline.build
// - cmake.outline.buildAll
// - cmake.outline.buildTarget
// - cmake.outline.clean
// - cmake.outline.cleanAll
// - cmake.outline.cleanConfigure
// - cmake.outline.cleanConfigureAll
// - cmake.outline.cleanConfigureAllWithDebugger
// - cmake.outline.cleanConfigureWithDebugger
// - cmake.outline.cleanRebuild
// - cmake.outline.cleanRebuildAll
// - cmake.outline.compileFile
// - cmake.outline.configure
// - cmake.outline.configureAll
// - cmake.outline.configureAllWithDebugger
// - cmake.outline.configureWithDebugger
// - cmake.outline.debugTarget
// - cmake.outline.editCacheUI
// - cmake.outline.focus
// - cmake.outline.launchTarget
// - cmake.outline.resetViewLocation
// - cmake.outline.revealInCMakeLists
// - cmake.outline.runUtilityTarget
// - cmake.outline.selectWorkspace
// - cmake.outline.setDefaultTarget
// - cmake.outline.setLaunchTarget
// - cmake.outline.stop
// - cmake.outline.stopAll
// - cmake.pinnedCommands.add
// - cmake.pinnedCommands.focus
// - cmake.pinnedCommands.remove
// - cmake.pinnedCommands.resetViewLocation
// - cmake.pinnedCommands.run
// - cmake.projectStatus.build
// - cmake.projectStatus.cleanConfigure
// - cmake.projectStatus.configure
// - cmake.projectStatus.cpack
// - cmake.projectStatus.ctest
// - cmake.projectStatus.debugTarget
// - cmake.projectStatus.focus
// - cmake.projectStatus.launchTarget
// - cmake.projectStatus.openSettings
// - cmake.projectStatus.openVisibilitySettings
// - cmake.projectStatus.resetViewLocation
// - cmake.projectStatus.selectActiveProject
// - cmake.projectStatus.selectBuildPreset
// - cmake.projectStatus.selectConfigurePreset
// - cmake.projectStatus.selectKit
// - cmake.projectStatus.selectPackagePreset
// - cmake.projectStatus.selectTestPreset
// - cmake.projectStatus.selectWorkflowPreset
// - cmake.projectStatus.setDebugTarget
// - cmake.projectStatus.setDefaultTarget
// - cmake.projectStatus.setLaunchTarget
// - cmake.projectStatus.setTestTarget
// - cmake.projectStatus.setVariant
// - cmake.projectStatus.stop
// - cmake.projectStatus.update
// - cmake.projectStatus.viewBuildSettings
// - cmake.projectStatus.viewConfigureSettings
// - cmake.projectStatus.viewPackageSettings
// - cmake.projectStatus.viewTestSettings
// - cmake.projectStatus.workflow
// - cmake.quickStart
// - cmake.refreshTests
// - cmake.refreshTestsAll
// - cmake.resetState
// - cmake.revealTestExplorer
// - cmake.scanForCompilers
// - cmake.scanForKits
// - cmake.selectActiveFolder
// - cmake.selectBuildPreset
// - cmake.selectConfigurePreset
// - cmake.selectKit
// - cmake.selectLaunchTarget
// - cmake.selectPackagePreset
// - cmake.selectTestPreset
// - cmake.selectWorkflowPreset
// - cmake.setDefaultTarget
// - cmake.setVariant
// - cmake.setVariantAll
// - cmake.showBuildCommand
// - cmake.showConfigureCommand
// - cmake.stop
// - cmake.stopAll
// - cmake.viewLog
// - cmake.workflow
// - cmake.workflowAll
// - codelens.showLensesInCurrentLine
// - columnSelect
// - comments.collapse
// - comments.expand
// - comments.reply
// - commitViewProvider.focus
// - commitViewProvider.resetViewLocation
// - compareCommitViewProvider.focus
// - compareCommitViewProvider.resetViewLocation
// - compareFiles
// - compareSelected
// - compositionEnd
// - compositionStart
// - compositionType
// - crates.replaceVersion
// - crates.retry
// - crates.updateAll
// - createCursor
// - cursorRedo
// - cursorWordAccessibilityLeft
// - cursorWordAccessibilityLeftSelect
// - cursorWordAccessibilityRight
// - cursorWordAccessibilityRightSelect
// - cursorWordEndLeft
// - cursorWordEndLeftSelect
// - cursorWordPartStartLeft
// - cursorWordPartStartLeftSelect
// - cursorWordRight
// - cursorWordRightSelect
// - cursorWordStartLeft
// - cursorWordStartLeftSelect
// - cursorWordStartRight
// - cursorWordStartRightSelect
// - cut
// - dart.addDependency
// - dart.addDevDependency
// - dart.addSdkToPath
// - dart.attach
// - dart.changeFlutterSdk
// - dart.changeSdk
// - dart.completeStatement
// - dart.copyDtdUri
// - dart.copyVmServiceUri
// - dart.createLaunchConfiguration
// - dart.createProject
// - dart.edit.fixAllInWorkspace
// - dart.edit.fixAllInWorkspace.preview
// - dart.findTestOrImplementationFile
// - dart.forceReanalyze
// - dart.generateDiagnosticReport
// - dart.goToAugmentation
// - dart.goToAugmented
// - dart.goToSuper
// - dart.goToTestOrImplementationFile
// - dart.goToTests
// - dart.openAnalyzerDiagnostics
// - dart.openDevTools.external
// - dart.openDevToolsCpuProfiler
// - dart.openDevToolsDeepLinks
// - dart.openDevToolsInspector
// - dart.openDevToolsLogging
// - dart.openDevToolsMemory
// - dart.openDevToolsNetwork
// - dart.openDevToolsPerformance
// - dart.openExtensionLog
// - dart.openObservatory
// - dart.printSelectionToTerminal
// - dart.rerunLastTestDebugSession
// - dart.restartAnalysisServer
// - dart.sortMembers
// - dart.startDebugging
// - dart.startLogging
// - dart.startLoggingAnalysisServer
// - dart.startLoggingAnalysisServerTimings
// - dart.startLoggingDebugging
// - dart.startLoggingExtensionOnly
// - dart.startWithoutDebugging
// - dart.stopLogging
// - dart.task.dartdoc
// - dart.toggleDartdocComment
// - dart.toggleLineComment
// - dart.writeRecommendedSettings
// - dartDependencyTree.focus
// - dartDependencyTree.resetViewLocation
// - dartFlutterOutline.focus
// - dartFlutterOutline.resetViewLocation
// - dartFlutterSidebar.focus
// - dartFlutterSidebar.resetViewLocation
// - dbclient.search.result.focus
// - dbclient.search.result.resetViewLocation
// - debug.action.openDisassemblyView
// - debug.action.toggleDisassemblyViewSourceCode
// - debug.addConfiguration
// - debug.addToWatchExpressions
// - debug.breakWhenValueChanges
// - debug.breakWhenValueIsAccessed
// - debug.breakWhenValueIsRead
// - debug.collapseRepl
// - debug.copyEvaluatePath
// - debug.copyStackTrace
// - debug.editBreakpoint
// - debug.editBreakpointMode
// - debug.editFunctionBreakpoint
// - debug.editFunctionBreakpointHitCount
// - debug.enableOrDisableBreakpoint
// - debug.installAdditionalDebuggers
// - debug.jumpToCursor
// - debug.replCopy
// - debug.replPaste
// - debug.setWatchExpression
// - debug.startFromConfig
// - debug.toggleReplIgnoreFocus
// - debugpy.clearCacheAndReload
// - debugpy.debugInTerminal
// - debugpy.debugUsingLaunchConfig
// - debugpy.reportIssue
// - debugpy.viewOutput
// - default:compositionEnd
// - default:compositionStart
// - default:compositionType
// - default:cut
// - default:paste
// - default:redo
// - default:replacePreviousChar
// - default:type
// - default:undo
// - deleteInsideWord
// - deleteWordEndLeft
// - deleteWordEndRight
// - deleteWordStartLeft
// - deleteWordStartRight
// - detailsContainers.focus
// - detailsContainers.resetViewLocation
// - devVolumes.focus
// - devVolumes.resetViewLocation
// - developer.showCurrentFileAsReleaseNotes
// - diffEditor.collapseAllUnchangedRegions
// - diffEditor.revert
// - diffEditor.showAllUnchangedRegions
// - diffEditor.switchSide
// - diffEditor.toggleCollapseUnchangedRegions
// - diffEditor.toggleShowMovedCodeBlocks
// - diffEditor.toggleUseInlineViewWhenSpaceIsLimited
// - dockerContainers.focus
// - dockerContainers.removeView
// - dockerContainers.resetViewLocation
// - dockerContainers.toggleVisibility
// - dockerImages.focus
// - dockerImages.removeView
// - dockerImages.resetViewLocation
// - dockerImages.toggleVisibility
// - dockerNetworks.focus
// - dockerNetworks.removeView
// - dockerNetworks.resetViewLocation
// - dockerNetworks.toggleVisibility
// - dockerRegistries.focus
// - dockerRegistries.removeView
// - dockerRegistries.resetViewLocation
// - dockerRegistries.toggleVisibility
// - dockerVolumes.focus
// - dockerVolumes.removeView
// - dockerVolumes.resetViewLocation
// - dockerVolumes.toggleVisibility
// - editor.action.addCursorsToBottom
// - editor.action.addCursorsToTop
// - editor.action.addSelectionToPreviousFindMatch
// - editor.action.changeTabDisplaySize
// - editor.action.clipboardCopyWithSyntaxHighlightingAction
// - editor.action.decreaseHoverVerbosityLevel
// - editor.action.detectIndentation
// - editor.action.diffReview.next
// - editor.action.diffReview.prev
// - editor.action.duplicateSelection
// - editor.action.findReferences
// - editor.action.fixAll
// - editor.action.focusNextCursor
// - editor.action.focusPreviousCursor
// - editor.action.focusStickyScroll
// - editor.action.fontZoomIn
// - editor.action.fontZoomOut
// - editor.action.fontZoomReset
// - editor.action.forceRetokenize
// - editor.action.format
// - editor.action.formatChanges
// - editor.action.formatDocument.multiple
// - editor.action.formatSelection.multiple
// - editor.action.goToDeclaration
// - editor.action.goToMatchFindAction
// - editor.action.goToSelectionAnchor
// - editor.action.goToTypeDefinition
// - editor.action.increaseHoverVerbosityLevel
// - editor.action.indentUsingSpaces
// - editor.action.indentUsingTabs
// - editor.action.indentationToSpaces
// - editor.action.indentationToTabs
// - editor.action.inlineEdits.trigger
// - editor.action.inlineSuggest.acceptNextLine
// - editor.action.inlineSuggest.toggleAlwaysShowToolbar
// - editor.action.inlineSuggest.trigger
// - editor.action.insertSnippet
// - editor.action.inspectTMScopes
// - editor.action.measureExtHostLatency
// - editor.action.moveCarretLeftAction
// - editor.action.moveCarretRightAction
// - editor.action.moveSelectionToPreviousFindMatch
// - editor.action.openDeclarationToTheSide
// - editor.action.openLink
// - editor.action.pasteAs
// - editor.action.pasteAsText
// - editor.action.peekDeclaration
// - editor.action.peekTypeDefinition
// - editor.action.previewDeclaration
// - editor.action.referenceSearch.trigger
// - editor.action.reindentlines
// - editor.action.reindentselectedlines
// - editor.action.removeDuplicateLines
// - editor.action.resetSuggestSize
// - editor.action.revealDeclaration
// - editor.action.selectToBracket
// - editor.action.showDefinitionPreviewHover
// - editor.action.showOrFocusStandaloneColorPicker
// - editor.action.showReferences
// - editor.action.showSnippets
// - editor.action.smartSelect.grow
// - editor.action.sortLinesAscending
// - editor.action.sortLinesDescending
// - editor.action.sourceAction
// - editor.action.startDebugTextMate
// - editor.action.surroundWithSnippet
// - editor.action.toggleColumnSelection
// - editor.action.toggleMinimap
// - editor.action.toggleRenderControlCharacter
// - editor.action.toggleRenderWhitespace
// - editor.action.toggleStickyScroll
// - editor.action.transformToCamelcase
// - editor.action.transformToKebabcase
// - editor.action.transformToLowercase
// - editor.action.transformToPascalcase
// - editor.action.transformToSnakecase
// - editor.action.transformToTitlecase
// - editor.action.transformToUppercase
// - editor.action.transpose
// - editor.action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters
// - editor.action.unicodeHighlight.disableHighlightingOfInvisibleCharacters
// - editor.action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters
// - editor.action.unicodeHighlight.showExcludeOptions
// - editor.action.wordHighlight.trigger
// - editor.actions.findWithArgs
// - editor.debug.action.addLogPoint
// - editor.debug.action.conditionalBreakpoint
// - editor.debug.action.editBreakpoint
// - editor.debug.action.goToNextBreakpoint
// - editor.debug.action.goToPreviousBreakpoint
// - editor.debug.action.runToCursor
// - editor.debug.action.selectionToRepl
// - editor.debug.action.selectionToWatch
// - editor.debug.action.stepIntoTargets
// - editor.debug.action.triggerByBreakpoint
// - editor.emmet.action.balanceIn
// - editor.emmet.action.balanceOut
// - editor.emmet.action.decrementNumberByOne
// - editor.emmet.action.decrementNumberByOneTenth
// - editor.emmet.action.decrementNumberByTen
// - editor.emmet.action.evaluateMathExpression
// - editor.emmet.action.incrementNumberByOne
// - editor.emmet.action.incrementNumberByOneTenth
// - editor.emmet.action.incrementNumberByTen
// - editor.emmet.action.matchTag
// - editor.emmet.action.mergeLines
// - editor.emmet.action.nextEditPoint
// - editor.emmet.action.prevEditPoint
// - editor.emmet.action.reflectCSSValue
// - editor.emmet.action.removeTag
// - editor.emmet.action.selectNextItem
// - editor.emmet.action.selectPrevItem
// - editor.emmet.action.splitJoinTag
// - editor.emmet.action.toggleComment
// - editor.emmet.action.updateImageSize
// - editor.emmet.action.updateTag
// - editor.emmet.action.wrapWithAbbreviation
// - editor.gotoNextFold
// - editor.gotoParentFold
// - editor.gotoPreviousFold
// - editor.inlayHints.Reset
// - editor.showTypeHierarchy
// - emmet.expandAbbreviation
// - errorLens.codeLensOnClick
// - errorLens.copyProblemCode
// - errorLens.copyProblemMessage
// - errorLens.disableLine
// - errorLens.excludeProblem
// - errorLens.findLinterRuleDefinition
// - errorLens.revealLine
// - errorLens.searchForProblem
// - errorLens.selectProblem
// - errorLens.statusBarCommand
// - errorLens.toggle
// - errorLens.toggleError
// - errorLens.toggleHint
// - errorLens.toggleInfo
// - errorLens.toggleInlineMessage
// - errorLens.toggleWarning
// - errorlens.toggleWorkspace
// - eslint.applyAllFixes
// - eslint.applyDisableFile
// - eslint.applyDisableLine
// - eslint.applySameFixes
// - eslint.applySingleFix
// - eslint.applySuggestion
// - eslint.createConfig
// - eslint.executeAutofix
// - eslint.migrateSettings
// - eslint.openRuleDoc
// - eslint.restart
// - eslint.revalidate
// - eslint.showOutputChannel
// - evenBetterToml.copyAsJson
// - evenBetterToml.copyAsToml
// - evenBetterToml.pasteAsJson
// - evenBetterToml.pasteAsToml
// - evenBetterToml.selectSchema
// - explorer.download
// - explorer.newFile
// - explorer.newFolder
// - explorer.openWith
// - explorer.upload
// - extension.bisect.next
// - extension.bisect.start
// - extension.bisect.stop
// - extension.jsProfileVisualizer.table.clearCodeLenses
// - extension.liveServer.changeWorkspace
// - extension.liveshare.chatStatusBar
// - extension.node-debug.toggleAutoAttach
// - extension.open
// - extension.scanNodeModules
// - extension.tmpl
// - extension.tmplcss
// - extension.tmplhtml
// - extension.tmpljavascript
// - extension.tmplphp
// - extension.tmplpython
// - extension.tmplruby
// - extension.tmplvue
// - extension.tmplxml
// - extension.vim_ctrl+^
// - extensions.actions.searchByCategory.AI
// - extensions.actions.searchByCategory.Azure
// - extensions.actions.searchByCategory.Chat
// - extensions.actions.searchByCategory.Data Science
// - extensions.actions.searchByCategory.Debuggers
// - extensions.actions.searchByCategory.Education
// - extensions.actions.searchByCategory.Extension Packs
// - extensions.actions.searchByCategory.Formatters
// - extensions.actions.searchByCategory.Keymaps
// - extensions.actions.searchByCategory.Language Packs
// - extensions.actions.searchByCategory.Linters
// - extensions.actions.searchByCategory.Machine Learning
// - extensions.actions.searchByCategory.Notebooks
// - extensions.actions.searchByCategory.Other
// - extensions.actions.searchByCategory.Programming Languages
// - extensions.actions.searchByCategory.SCM Providers
// - extensions.actions.searchByCategory.Snippets
// - extensions.actions.searchByCategory.Testing
// - extensions.actions.searchByCategory.Themes
// - extensions.actions.searchByCategory.Visualization
// - extensions.filter.featured
// - extensions.recommendedList.focus
// - extensions.recommendedList.resetViewLocation
// - extensions.sort.installs
// - extensions.sort.name
// - extensions.sort.publishedDate
// - extensions.sort.rating
// - extensions.sort.updateDate
// - files.openTimeline
// - files.participants.resetChoice
// - filesExplorer.findInWorkspace
// - flutter.addSdkToPath
// - flutter.attach
// - flutter.attachProcess
// - flutter.cancelInspectWidget
// - flutter.clean
// - flutter.createProject
// - flutter.createProject.sidebar
// - flutter.doctor
// - flutter.doctor.sidebar
// - flutter.getSelectedDeviceId
// - flutter.hotReload
// - flutter.hotRestart
// - flutter.inspectWidget
// - flutter.inspectWidget.autoCancel
// - flutter.launchEmulator
// - flutter.openDevTools
// - flutter.openDevTools.sidebar
// - flutter.openInAndroidStudio
// - flutter.openInXcode
// - flutter.overridePlatform
// - flutter.packages.get
// - flutter.packages.outdated
// - flutter.packages.upgrade
// - flutter.packages.upgrade.majorVersions
// - flutter.runProfileMode
// - flutter.runReleaseMode
// - flutter.screenshot
// - flutter.selectDevice
// - flutter.task.genl10n
// - flutter.toggleBrightness
// - flutter.toggleDebugModeBanner
// - flutter.toggleDebugPainting
// - flutter.togglePaintBaselines
// - flutter.togglePerformanceOverlay
// - flutter.toggleRepaintRainbow
// - flutter.toggleSlowAnimations
// - flutter.upgrade
// - focusAndAcceptSuggestion
// - getContextKeyInfo
// - git-base.api.getRemoteSources
// - git._syncAll
// - git.acceptMerge
// - git.addRemote
// - git.api.getRemoteSources
// - git.api.getRepositories
// - git.api.getRepositoryState
// - git.branch
// - git.branchFrom
// - git.checkout
// - git.checkoutDetached
// - git.cherryPick
// - git.clean
// - git.cleanAll
// - git.cleanAllTracked
// - git.cleanAllUntracked
// - git.clone
// - git.cloneRecursive
// - git.close
// - git.closeAllDiffEditors
// - git.closeAllUnmodifiedEditors
// - git.closeOtherRepositories
// - git.commit
// - git.commit.FileEntry.CompareAgainstPrevious
// - git.commit.FileEntry.CompareAgainstWorkspace
// - git.commit.FileEntry.ViewFileContents
// - git.commit.FileEntry.compare
// - git.commit.FileEntry.selectForComparison
// - git.commit.ViewChangeLog
// - git.commit.cherryPick
// - git.commit.compare
// - git.commit.compare.file.compare
// - git.commit.compare.selectForComparison
// - git.commit.compare.view.hide
// - git.commit.compare.view.show
// - git.commit.compare.view.showFilesOnly
// - git.commit.compare.view.showFolderView
// - git.commit.createBranch
// - git.commit.merge
// - git.commit.rebase
// - git.commit.view.hide
// - git.commit.view.show
// - git.commit.view.showFilesOnly
// - git.commit.view.showFolderView
// - git.commitAll
// - git.commitAllAmend
// - git.commitAllAmendNoVerify
// - git.commitAllNoVerify
// - git.commitAllSigned
// - git.commitAllSignedNoVerify
// - git.commitAmend
// - git.commitAmendNoVerify
// - git.commitEmpty
// - git.commitEmptyNoVerify
// - git.commitMessageAccept
// - git.commitMessageDiscard
// - git.commitNoVerify
// - git.commitSigned
// - git.commitSignedNoVerify
// - git.commitStaged
// - git.commitStagedAmend
// - git.commitStagedAmendNoVerify
// - git.commitStagedNoVerify
// - git.commitStagedSigned
// - git.commitStagedSignedNoVerify
// - git.continueInLocalClone
// - git.copyCommitId
// - git.copyCommitMessage
// - git.createTag
// - git.deleteBranch
// - git.deleteRemoteTag
// - git.deleteTag
// - git.diff.stageHunk
// - git.diff.stageSelection
// - git.fetch
// - git.fetchAll
// - git.fetchPrune
// - git.fetchRef
// - git.ignore
// - git.init
// - git.manageUnsafeRepositories
// - git.merge
// - git.mergeAbort
// - git.openAllChanges
// - git.openChange
// - git.openFile
// - git.openFile2
// - git.openHEADFile
// - git.openMergeEditor
// - git.openRepositoriesInParentFolders
// - git.openRepository
// - git.openResource
// - git.publish
// - git.pull
// - git.pullFrom
// - git.pullRebase
// - git.pullRef
// - git.push
// - git.pushForce
// - git.pushRef
// - git.pushTags
// - git.pushTo
// - git.pushToForce
// - git.pushWithTags
// - git.pushWithTagsForce
// - git.rebase
// - git.rebaseAbort
// - git.refresh
// - git.removeRemote
// - git.rename
// - git.renameBranch
// - git.reopenClosedRepositories
// - git.restoreCommitTemplate
// - git.revealFileInOS.linux
// - git.revealFileInOS.mac
// - git.revealFileInOS.windows
// - git.revealInExplorer
// - git.revertChange
// - git.runGitMerge
// - git.runGitMergeDiff3
// - git.showOutput
// - git.stage
// - git.stageAll
// - git.stageAllMerge
// - git.stageAllTracked
// - git.stageAllUntracked
// - git.stageChange
// - git.stageFile
// - git.stash
// - git.stashApply
// - git.stashApplyEditor
// - git.stashApplyLatest
// - git.stashDrop
// - git.stashDropAll
// - git.stashDropEditor
// - git.stashIncludeUntracked
// - git.stashPop
// - git.stashPopEditor
// - git.stashPopLatest
// - git.stashStaged
// - git.stashView
// - git.sync
// - git.syncRebase
// - git.timeline.compareWithSelected
// - git.timeline.copyCommitId
// - git.timeline.copyCommitMessage
// - git.timeline.openDiff
// - git.timeline.selectForCompare
// - git.timeline.viewCommit
// - git.undoCommit
// - git.unstage
// - git.unstageAll
// - git.unstageFile
// - git.viewAllChanges
// - git.viewChanges
// - git.viewCommit
// - git.viewHistory
// - git.viewLineHistory
// - git.viewStagedChanges
// - git.viewUntrackedChanges
// - github.copyVscodeDevLink
// - github.copyVscodeDevLinkFile
// - github.copyVscodeDevLinkWithoutRange
// - github.cweijan.mysql.focus
// - github.cweijan.mysql.removeView
// - github.cweijan.mysql.resetViewLocation
// - github.cweijan.mysql.toggleVisibility
// - github.cweijan.nosql.focus
// - github.cweijan.nosql.removeView
// - github.cweijan.nosql.resetViewLocation
// - github.cweijan.nosql.toggleVisibility
// - github.dbclient.history.focus
// - github.dbclient.history.resetViewLocation
// - github.openOnVscodeDev
// - github.publish
// - gitignore.addgitignore
// - gitlens.action.createPullRequest
// - gitlens.action.hover.commands
// - gitlens.action.openPullRequest
// - gitlens.addAuthors
// - gitlens.annotations.nextChange
// - gitlens.annotations.previousChange
// - gitlens.applyPatchFromClipboard
// - gitlens.browseRepoAtRevision
// - gitlens.browseRepoAtRevisionInNewWindow
// - gitlens.browseRepoBeforeRevision
// - gitlens.browseRepoBeforeRevisionInNewWindow
// - gitlens.clearFileAnnotations
// - gitlens.closeUnchangedFiles
// - gitlens.compareHeadWith
// - gitlens.compareWith
// - gitlens.compareWorkingWith
// - gitlens.computingFileAnnotations
// - gitlens.connectRemoteProvider
// - gitlens.copyCurrentBranch
// - gitlens.copyDeepLinkToBranch
// - gitlens.copyDeepLinkToCommit
// - gitlens.copyDeepLinkToComparison
// - gitlens.copyDeepLinkToFile
// - gitlens.copyDeepLinkToFileAtRevision
// - gitlens.copyDeepLinkToLines
// - gitlens.copyDeepLinkToRepo
// - gitlens.copyDeepLinkToTag
// - gitlens.copyDeepLinkToWorkspace
// - gitlens.copyMessageToClipboard
// - gitlens.copyPatchToClipboard
// - gitlens.copyRelativePathToClipboard
// - gitlens.copyRemoteBranchUrl
// - gitlens.copyRemoteBranchesUrl
// - gitlens.copyRemoteCommitUrl
// - gitlens.copyRemoteComparisonUrl
// - gitlens.copyRemoteFileUrlFrom
// - gitlens.copyRemoteFileUrlToClipboard
// - gitlens.copyRemoteFileUrlWithoutRange
// - gitlens.copyRemotePullRequestUrl
// - gitlens.copyRemoteRepositoryUrl
// - gitlens.copyShaToClipboard
// - gitlens.copyWorkingChangesToWorktree
// - gitlens.createCloudPatch
// - gitlens.createPatch
// - gitlens.createPullRequestOnRemote
// - gitlens.diffDirectory
// - gitlens.diffDirectoryWithHead
// - gitlens.diffFolderWithRevision
// - gitlens.diffFolderWithRevisionFrom
// - gitlens.diffHeadWith
// - gitlens.diffLineWithWorking
// - gitlens.diffWith
// - gitlens.diffWithRevision
// - gitlens.diffWithRevisionFrom
// - gitlens.diffWithWorkingInDiffLeft
// - gitlens.diffWithWorkingInDiffRight
// - gitlens.diffWorkingWith
// - gitlens.disableDebugLogging
// - gitlens.disableRebaseEditor
// - gitlens.disconnectRemoteProvider
// - gitlens.enableDebugLogging
// - gitlens.enableRebaseEditor
// - gitlens.externalDiff
// - gitlens.externalDiffAll
// - gitlens.fetchRepositories
// - gitlens.generateCommitMessage
// - gitlens.getStarted
// - gitlens.ghpr.views.openOrCreateWorktree
// - gitlens.gitCommands.branch
// - gitlens.gitCommands.branch.create
// - gitlens.gitCommands.branch.delete
// - gitlens.gitCommands.branch.prune
// - gitlens.gitCommands.branch.rename
// - gitlens.gitCommands.checkout
// - gitlens.gitCommands.cherryPick
// - gitlens.gitCommands.history
// - gitlens.gitCommands.merge
// - gitlens.gitCommands.rebase
// - gitlens.gitCommands.remote
// - gitlens.gitCommands.remote.add
// - gitlens.gitCommands.remote.prune
// - gitlens.gitCommands.remote.remove
// - gitlens.gitCommands.reset
// - gitlens.gitCommands.revert
// - gitlens.gitCommands.show
// - gitlens.gitCommands.stash
// - gitlens.gitCommands.stash.drop
// - gitlens.gitCommands.stash.list
// - gitlens.gitCommands.stash.pop
// - gitlens.gitCommands.stash.push
// - gitlens.gitCommands.stash.rename
// - gitlens.gitCommands.status
// - gitlens.gitCommands.switch
// - gitlens.gitCommands.tag
// - gitlens.gitCommands.tag.create
// - gitlens.gitCommands.tag.delete
// - gitlens.gitCommands.worktree
// - gitlens.gitCommands.worktree.create
// - gitlens.gitCommands.worktree.delete
// - gitlens.gitCommands.worktree.open
// - gitlens.gk.switchOrganization
// - gitlens.graph.addAuthor
// - gitlens.graph.cherryPick
// - gitlens.graph.columnAuthorOff
// - gitlens.graph.columnAuthorOn
// - gitlens.graph.columnChangesOff
// - gitlens.graph.columnChangesOn
// - gitlens.graph.columnDateTimeOff
// - gitlens.graph.columnDateTimeOn
// - gitlens.graph.columnGraphCompact
// - gitlens.graph.columnGraphDefault
// - gitlens.graph.columnGraphOff
// - gitlens.graph.columnGraphOn
// - gitlens.graph.columnMessageOff
// - gitlens.graph.columnMessageOn
// - gitlens.graph.columnRefOff
// - gitlens.graph.columnRefOn
// - gitlens.graph.columnShaOff
// - gitlens.graph.columnShaOn
// - gitlens.graph.compareAncestryWithWorking
// - gitlens.graph.compareWithHead
// - gitlens.graph.compareWithMergeBase
// - gitlens.graph.compareWithUpstream
// - gitlens.graph.compareWithWorking
// - gitlens.graph.copy
// - gitlens.graph.copyDeepLinkToBranch
// - gitlens.graph.copyDeepLinkToCommit
// - gitlens.graph.copyDeepLinkToRepo
// - gitlens.graph.copyDeepLinkToTag
// - gitlens.graph.copyMessage
// - gitlens.graph.copyRemoteBranchUrl
// - gitlens.graph.copyRemoteCommitUrl
// - gitlens.graph.copyRemoteCommitUrl.multi
// - gitlens.graph.copySha
// - gitlens.graph.copyWorkingChangesToWorktree
// - gitlens.graph.createBranch
// - gitlens.graph.createPullRequest
// - gitlens.graph.createTag
// - gitlens.graph.createWorktree
// - gitlens.graph.deleteBranch
// - gitlens.graph.deleteTag
// - gitlens.graph.fetch
// - gitlens.graph.hideLocalBranch
// - gitlens.graph.hideRefGroup
// - gitlens.graph.hideRemote
// - gitlens.graph.hideRemoteBranch
// - gitlens.graph.hideTag
// - gitlens.graph.mergeBranchInto
// - gitlens.graph.openBranchOnRemote
// - gitlens.graph.openChangedFileDiffs
// - gitlens.graph.openChangedFileDiffsIndividually
// - gitlens.graph.openChangedFileDiffsWithMergeBase
// - gitlens.graph.openChangedFileDiffsWithWorking
// - gitlens.graph.openChangedFileDiffsWithWorkingIndividually
// - gitlens.graph.openChangedFileRevisions
// - gitlens.graph.openChangedFiles
// - gitlens.graph.openCommitOnRemote
// - gitlens.graph.openCommitOnRemote.multi
// - gitlens.graph.openOnlyChangedFiles
// - gitlens.graph.openPullRequest
// - gitlens.graph.openPullRequestChanges
// - gitlens.graph.openPullRequestComparison
// - gitlens.graph.openPullRequestOnRemote
// - gitlens.graph.openSCM
// - gitlens.graph.publishBranch
// - gitlens.graph.pull
// - gitlens.graph.push
// - gitlens.graph.rebaseOntoBranch
// - gitlens.graph.rebaseOntoCommit
// - gitlens.graph.rebaseOntoUpstream
// - gitlens.graph.refresh
// - gitlens.graph.renameBranch
// - gitlens.graph.resetColumnsCompact
// - gitlens.graph.resetColumnsDefault
// - gitlens.graph.resetCommit
// - gitlens.graph.resetToCommit
// - gitlens.graph.resetToTip
// - gitlens.graph.revert
// - gitlens.graph.scrollMarkerLocalBranchOff
// - gitlens.graph.scrollMarkerLocalBranchOn
// - gitlens.graph.scrollMarkerRemoteBranchOff
// - gitlens.graph.scrollMarkerRemoteBranchOn
// - gitlens.graph.scrollMarkerStashOff
// - gitlens.graph.scrollMarkerStashOn
// - gitlens.graph.scrollMarkerTagOff
// - gitlens.graph.scrollMarkerTagOn
// - gitlens.graph.shareAsCloudPatch
// - gitlens.graph.showInDetailsView
// - gitlens.graph.split
// - gitlens.graph.stash.apply
// - gitlens.graph.stash.delete
// - gitlens.graph.stash.rename
// - gitlens.graph.stash.save
// - gitlens.graph.switchToAnotherBranch
// - gitlens.graph.switchToBranch
// - gitlens.graph.switchToCommit
// - gitlens.graph.switchToEditorLayout
// - gitlens.graph.switchToPanelLayout
// - gitlens.graph.switchToTag
// - gitlens.graph.undoCommit
// - gitlens.inviteToLiveShare
// - gitlens.launchpad.indicator.action
// - gitlens.launchpad.indicator.toggle
// - gitlens.launchpad.refresh
// - gitlens.launchpad.split
// - gitlens.openAssociatedPullRequestOnRemote
// - gitlens.openBlamePriorToChange
// - gitlens.openBranchInRemote
// - gitlens.openBranchOnRemote
// - gitlens.openBranchesInRemote
// - gitlens.openBranchesOnRemote
// - gitlens.openChangedFiles
// - gitlens.openCloudPatch
// - gitlens.openCommitInRemote
// - gitlens.openCommitOnRemote
// - gitlens.openComparisonOnRemote
// - gitlens.openCurrentBranchOnRemote
// - gitlens.openFileFromRemote
// - gitlens.openFileHistory
// - gitlens.openFileInRemote
// - gitlens.openFileOnRemote
// - gitlens.openFileOnRemoteFrom
// - gitlens.openFileRevision
// - gitlens.openFileRevisionFrom
// - gitlens.openFolderHistory
// - gitlens.openInRemote
// - gitlens.openOnRemote
// - gitlens.openOnlyChangedFiles
// - gitlens.openPatch
// - gitlens.openPullRequestOnRemote
// - gitlens.openRepoInRemote
// - gitlens.openRepoOnRemote
// - gitlens.openRevisionFile
// - gitlens.openRevisionFileInDiffLeft
// - gitlens.openRevisionFileInDiffRight
// - gitlens.openWalkthrough
// - gitlens.openWorkingFile
// - gitlens.openWorkingFileInDiffLeft
// - gitlens.openWorkingFileInDiffRight
// - gitlens.plus.cloudIntegrations.manage
// - gitlens.plus.hide
// - gitlens.plus.login
// - gitlens.plus.logout
// - gitlens.plus.manage
// - gitlens.plus.reactivateProTrial
// - gitlens.plus.refreshRepositoryAccess
// - gitlens.plus.resendVerification
// - gitlens.plus.reset
// - gitlens.plus.resetRepositoryAccess
// - gitlens.plus.restore
// - gitlens.plus.showPlans
// - gitlens.plus.signUp
// - gitlens.plus.startPreviewTrial
// - gitlens.plus.upgrade
// - gitlens.plus.validate
// - gitlens.pullRepositories
// - gitlens.pushRepositories
// - gitlens.quickOpenFileHistory
// - gitlens.refreshHover
// - gitlens.resetAIKey
// - gitlens.resetAvatarCache
// - gitlens.resetSuppressedWarnings
// - gitlens.resetTrackedUsage
// - gitlens.resetViewsLayout
// - gitlens.revealCommitInView
// - gitlens.shareAsCloudPatch
// - gitlens.showAccountView
// - gitlens.showBranchesView
// - gitlens.showCommitDetailsView
// - gitlens.showCommitInView
// - gitlens.showCommitSearch
// - gitlens.showCommitsInView
// - gitlens.showCommitsView
// - gitlens.showContributorsView
// - gitlens.showDraftsView
// - gitlens.showFileHistoryInView
// - gitlens.showFileHistoryView
// - gitlens.showFocusPage
// - gitlens.showGraph
// - gitlens.showGraphPage
// - gitlens.showGraphView
// - gitlens.showHomeView
// - gitlens.showInCommitGraph
// - gitlens.showInCommitGraphView
// - gitlens.showInDetailsView
// - gitlens.showInTimeline
// - gitlens.showLastQuickPick
// - gitlens.showLaunchpad
// - gitlens.showLineCommitInView
// - gitlens.showLineHistoryView
// - gitlens.showPatchDetailsPage
// - gitlens.showQuickBranchHistory
// - gitlens.showQuickCommitDetails
// - gitlens.showQuickRevisionDetails
// - gitlens.showQuickRevisionDetailsInDiffLeft
// - gitlens.showQuickRevisionDetailsInDiffRight
// - gitlens.showQuickStashList
// - gitlens.showRemotesView
// - gitlens.showRepositoriesView
// - gitlens.showSearchAndCompareView
// - gitlens.showSettingsPage
// - gitlens.showSettingsPage!autolinks
// - gitlens.showSettingsPage!branches-view
// - gitlens.showSettingsPage!commit-graph
// - gitlens.showSettingsPage!commits-view
// - gitlens.showSettingsPage!contributors-view
// - gitlens.showSettingsPage!file-annotations
// - gitlens.showSettingsPage!file-history-view
// - gitlens.showSettingsPage!line-history-view
// - gitlens.showSettingsPage!remotes-view
// - gitlens.showSettingsPage!repositories-view
// - gitlens.showSettingsPage!search-compare-view
// - gitlens.showSettingsPage!stashes-view
// - gitlens.showSettingsPage!tags-view
// - gitlens.showSettingsPage!views
// - gitlens.showSettingsPage!worktrees-view
// - gitlens.showStashesView
// - gitlens.showTagsView
// - gitlens.showTimelinePage
// - gitlens.showTimelineView
// - gitlens.showWelcomePage
// - gitlens.showWorkspacesView
// - gitlens.showWorktreesView
// - gitlens.stashApply
// - gitlens.stashSave
// - gitlens.stashSaveFiles
// - gitlens.switchAIModel
// - gitlens.switchMode
// - gitlens.timeline.refresh
// - gitlens.timeline.split
// - gitlens.toggleFileBlameInDiffLeft
// - gitlens.toggleFileBlameInDiffRight
// - gitlens.toggleFileChanges
// - gitlens.toggleFileChangesOnly
// - gitlens.toggleFileHeatmap
// - gitlens.toggleFileHeatmapInDiffLeft
// - gitlens.toggleFileHeatmapInDiffRight
// - gitlens.toggleGraph
// - gitlens.toggleLineBlame
// - gitlens.toggleMaximizedGraph
// - gitlens.toggleReviewMode
// - gitlens.toggleZenMode
// - gitlens.views.account.focus
// - gitlens.views.account.refresh
// - gitlens.views.account.removeView
// - gitlens.views.account.resetViewLocation
// - gitlens.views.account.toggleVisibility
// - gitlens.views.addAuthor
// - gitlens.views.addAuthor.multi
// - gitlens.views.addAuthors
// - gitlens.views.addRemote
// - gitlens.views.applyChanges
// - gitlens.views.branches.focus
// - gitlens.views.branches.refresh
// - gitlens.views.branches.removeView
// - gitlens.views.branches.resetViewLocation
// - gitlens.views.branches.setFilesLayoutToAuto
// - gitlens.views.branches.setFilesLayoutToList
// - gitlens.views.branches.setFilesLayoutToTree
// - gitlens.views.branches.setLayoutToList
// - gitlens.views.branches.setLayoutToTree
// - gitlens.views.branches.setShowAvatarsOff
// - gitlens.views.branches.setShowAvatarsOn
// - gitlens.views.branches.setShowBranchComparisonOff
// - gitlens.views.branches.setShowBranchComparisonOn
// - gitlens.views.branches.setShowBranchPullRequestOff
// - gitlens.views.branches.setShowBranchPullRequestOn
// - gitlens.views.branches.toggleVisibility
// - gitlens.views.browseRepoAtRevision
// - gitlens.views.browseRepoAtRevisionInNewWindow
// - gitlens.views.browseRepoBeforeRevision
// - gitlens.views.browseRepoBeforeRevisionInNewWindow
// - gitlens.views.cherryPick
// - gitlens.views.cherryPick.multi
// - gitlens.views.clearComparison
// - gitlens.views.clearReviewed
// - gitlens.views.closeRepository
// - gitlens.views.collapseNode
// - gitlens.views.commitDetails.focus
// - gitlens.views.commitDetails.refresh
// - gitlens.views.commitDetails.removeView
// - gitlens.views.commitDetails.resetViewLocation
// - gitlens.views.commitDetails.toggleVisibility
// - gitlens.views.commits.focus
// - gitlens.views.commits.refresh
// - gitlens.views.commits.removeView
// - gitlens.views.commits.resetViewLocation
// - gitlens.views.commits.setCommitsFilterAuthors
// - gitlens.views.commits.setCommitsFilterOff
// - gitlens.views.commits.setFilesLayoutToAuto
// - gitlens.views.commits.setFilesLayoutToList
// - gitlens.views.commits.setFilesLayoutToTree
// - gitlens.views.commits.setShowAvatarsOff
// - gitlens.views.commits.setShowAvatarsOn
// - gitlens.views.commits.setShowBranchComparisonOff
// - gitlens.views.commits.setShowBranchComparisonOn
// - gitlens.views.commits.setShowBranchPullRequestOff
// - gitlens.views.commits.setShowBranchPullRequestOn
// - gitlens.views.commits.setShowMergeCommitsOff
// - gitlens.views.commits.setShowMergeCommitsOn
// - gitlens.views.commits.toggleVisibility
// - gitlens.views.compareAncestryWithWorking
// - gitlens.views.compareFileWithSelected
// - gitlens.views.compareWithHead
// - gitlens.views.compareWithMergeBase
// - gitlens.views.compareWithSelected
// - gitlens.views.compareWithUpstream
// - gitlens.views.compareWithWorking
// - gitlens.views.contributors.focus
// - gitlens.views.contributors.refresh
// - gitlens.views.contributors.removeView
// - gitlens.views.contributors.resetViewLocation
// - gitlens.views.contributors.setFilesLayoutToAuto
// - gitlens.views.contributors.setFilesLayoutToList
// - gitlens.views.contributors.setFilesLayoutToTree
// - gitlens.views.contributors.setShowAllBranchesOff
// - gitlens.views.contributors.setShowAllBranchesOn
// - gitlens.views.contributors.setShowAvatarsOff
// - gitlens.views.contributors.setShowAvatarsOn
// - gitlens.views.contributors.setShowMergeCommitsOff
// - gitlens.views.contributors.setShowMergeCommitsOn
// - gitlens.views.contributors.setShowStatisticsOff
// - gitlens.views.contributors.setShowStatisticsOn
// - gitlens.views.contributors.toggleVisibility
// - gitlens.views.copy
// - gitlens.views.copyAsMarkdown
// - gitlens.views.copyRemoteCommitUrl
// - gitlens.views.copyRemoteCommitUrl.multi
// - gitlens.views.copyUrl
// - gitlens.views.copyUrl.multi
// - gitlens.views.createBranch
// - gitlens.views.createPullRequest
// - gitlens.views.createTag
// - gitlens.views.createWorktree
// - gitlens.views.deleteBranch
// - gitlens.views.deleteBranch.multi
// - gitlens.views.deleteTag
// - gitlens.views.deleteTag.multi
// - gitlens.views.deleteWorktree
// - gitlens.views.deleteWorktree.multi
// - gitlens.views.dismissNode
// - gitlens.views.draft.open
// - gitlens.views.draft.openOnWeb
// - gitlens.views.drafts.create
// - gitlens.views.drafts.delete
// - gitlens.views.drafts.focus
// - gitlens.views.drafts.info
// - gitlens.views.drafts.refresh
// - gitlens.views.drafts.removeView
// - gitlens.views.drafts.resetViewLocation
// - gitlens.views.drafts.setShowAvatarsOff
// - gitlens.views.drafts.setShowAvatarsOn
// - gitlens.views.drafts.toggleVisibility
// - gitlens.views.editNode
// - gitlens.views.expandNode
// - gitlens.views.fetch
// - gitlens.views.fileHistory.changeBase
// - gitlens.views.fileHistory.focus
// - gitlens.views.fileHistory.refresh
// - gitlens.views.fileHistory.removeView
// - gitlens.views.fileHistory.resetViewLocation
// - gitlens.views.fileHistory.setCursorFollowingOff
// - gitlens.views.fileHistory.setCursorFollowingOn
// - gitlens.views.fileHistory.setEditorFollowingOff
// - gitlens.views.fileHistory.setEditorFollowingOn
// - gitlens.views.fileHistory.setRenameFollowingOff
// - gitlens.views.fileHistory.setRenameFollowingOn
// - gitlens.views.fileHistory.setShowAllBranchesOff
// - gitlens.views.fileHistory.setShowAllBranchesOn
// - gitlens.views.fileHistory.setShowAvatarsOff
// - gitlens.views.fileHistory.setShowAvatarsOn
// - gitlens.views.fileHistory.setShowMergeCommitsOff
// - gitlens.views.fileHistory.setShowMergeCommitsOn
// - gitlens.views.fileHistory.toggleVisibility
// - gitlens.views.graph.focus
// - gitlens.views.graph.openInTab
// - gitlens.views.graph.refresh
// - gitlens.views.graph.removeView
// - gitlens.views.graph.resetViewLocation
// - gitlens.views.graph.toggleVisibility
// - gitlens.views.graphDetails.focus
// - gitlens.views.graphDetails.refresh
// - gitlens.views.graphDetails.removeView
// - gitlens.views.graphDetails.resetViewLocation
// - gitlens.views.graphDetails.toggleVisibility
// - gitlens.views.highlightChanges
// - gitlens.views.highlightRevisionChanges
// - gitlens.views.home.focus
// - gitlens.views.home.refresh
// - gitlens.views.home.removeView
// - gitlens.views.home.resetViewLocation
// - gitlens.views.home.toggleVisibility
// - gitlens.views.lineHistory.changeBase
// - gitlens.views.lineHistory.focus
// - gitlens.views.lineHistory.refresh
// - gitlens.views.lineHistory.removeView
// - gitlens.views.lineHistory.resetViewLocation
// - gitlens.views.lineHistory.setEditorFollowingOff
// - gitlens.views.lineHistory.setEditorFollowingOn
// - gitlens.views.lineHistory.setShowAvatarsOff
// - gitlens.views.lineHistory.setShowAvatarsOn
// - gitlens.views.lineHistory.toggleVisibility
// - gitlens.views.loadAllChildren
// - gitlens.views.loadMoreChildren
// - gitlens.views.mergeBranchInto
// - gitlens.views.openBranchOnRemote
// - gitlens.views.openBranchOnRemote.multi
// - gitlens.views.openChangedFileDiffs
// - gitlens.views.openChangedFileDiffsIndividually
// - gitlens.views.openChangedFileDiffsWithMergeBase
// - gitlens.views.openChangedFileDiffsWithWorking
// - gitlens.views.openChangedFileDiffsWithWorkingIndividually
// - gitlens.views.openChangedFileRevisions
// - gitlens.views.openChangedFiles
// - gitlens.views.openChanges
// - gitlens.views.openChangesWithWorking
// - gitlens.views.openCommitOnRemote
// - gitlens.views.openCommitOnRemote.multi
// - gitlens.views.openDirectoryDiff
// - gitlens.views.openDirectoryDiffWithWorking
// - gitlens.views.openFile
// - gitlens.views.openFileRevision
// - gitlens.views.openInIntegratedTerminal
// - gitlens.views.openInTerminal
// - gitlens.views.openOnlyChangedFiles
// - gitlens.views.openPreviousChangesWithWorking
// - gitlens.views.openPullRequest
// - gitlens.views.openPullRequestChanges
// - gitlens.views.openPullRequestComparison
// - gitlens.views.openUrl
// - gitlens.views.openUrl.multi
// - gitlens.views.openWorktree
// - gitlens.views.openWorktreeInNewWindow
// - gitlens.views.openWorktreeInNewWindow.multi
// - gitlens.views.patchDetails.close
// - gitlens.views.patchDetails.focus
// - gitlens.views.patchDetails.refresh
// - gitlens.views.patchDetails.resetViewLocation
// - gitlens.views.pruneRemote
// - gitlens.views.publishBranch
// - gitlens.views.publishRepository
// - gitlens.views.pull
// - gitlens.views.pullRequest.close
// - gitlens.views.pullRequest.focus
// - gitlens.views.pullRequest.refresh
// - gitlens.views.pullRequest.resetViewLocation
// - gitlens.views.pullRequest.setFilesLayoutToAuto
// - gitlens.views.pullRequest.setFilesLayoutToList
// - gitlens.views.pullRequest.setFilesLayoutToTree
// - gitlens.views.pullRequest.setShowAvatarsOff
// - gitlens.views.pullRequest.setShowAvatarsOn
// - gitlens.views.push
// - gitlens.views.pushToCommit
// - gitlens.views.pushWithForce
// - gitlens.views.rebaseOntoBranch
// - gitlens.views.rebaseOntoCommit
// - gitlens.views.rebaseOntoUpstream
// - gitlens.views.refreshNode
// - gitlens.views.remotes.focus
// - gitlens.views.remotes.refresh
// - gitlens.views.remotes.removeView
// - gitlens.views.remotes.resetViewLocation
// - gitlens.views.remotes.setFilesLayoutToAuto
// - gitlens.views.remotes.setFilesLayoutToList
// - gitlens.views.remotes.setFilesLayoutToTree
// - gitlens.views.remotes.setLayoutToList
// - gitlens.views.remotes.setLayoutToTree
// - gitlens.views.remotes.setShowAvatarsOff
// - gitlens.views.remotes.setShowAvatarsOn
// - gitlens.views.remotes.setShowBranchPullRequestOff
// - gitlens.views.remotes.setShowBranchPullRequestOn
// - gitlens.views.remotes.toggleVisibility
// - gitlens.views.removeRemote
// - gitlens.views.renameBranch
// - gitlens.views.repositories.focus
// - gitlens.views.repositories.refresh
// - gitlens.views.repositories.removeView
// - gitlens.views.repositories.resetViewLocation
// - gitlens.views.repositories.setAutoRefreshToOff
// - gitlens.views.repositories.setAutoRefreshToOn
// - gitlens.views.repositories.setBranchesLayoutToList
// - gitlens.views.repositories.setBranchesLayoutToTree
// - gitlens.views.repositories.setBranchesShowBranchComparisonOff
// - gitlens.views.repositories.setBranchesShowBranchComparisonOn
// - gitlens.views.repositories.setFilesLayoutToAuto
// - gitlens.views.repositories.setFilesLayoutToList
// - gitlens.views.repositories.setFilesLayoutToTree
// - gitlens.views.repositories.setShowAvatarsOff
// - gitlens.views.repositories.setShowAvatarsOn
// - gitlens.views.repositories.setShowBranchComparisonOff
// - gitlens.views.repositories.setShowBranchComparisonOn
// - gitlens.views.repositories.setShowBranchesOff
// - gitlens.views.repositories.setShowBranchesOn
// - gitlens.views.repositories.setShowCommitsOff
// - gitlens.views.repositories.setShowCommitsOn
// - gitlens.views.repositories.setShowContributorsOff
// - gitlens.views.repositories.setShowContributorsOn
// - gitlens.views.repositories.setShowRemotesOff
// - gitlens.views.repositories.setShowRemotesOn
// - gitlens.views.repositories.setShowSectionOff
// - gitlens.views.repositories.setShowStashesOff
// - gitlens.views.repositories.setShowStashesOn
// - gitlens.views.repositories.setShowTagsOff
// - gitlens.views.repositories.setShowTagsOn
// - gitlens.views.repositories.setShowUpstreamStatusOff
// - gitlens.views.repositories.setShowUpstreamStatusOn
// - gitlens.views.repositories.setShowWorktreesOff
// - gitlens.views.repositories.setShowWorktreesOn
// - gitlens.views.repositories.toggleVisibility
// - gitlens.views.resetCommit
// - gitlens.views.resetToCommit
// - gitlens.views.resetToTip
// - gitlens.views.restore
// - gitlens.views.revealRepositoryInExplorer
// - gitlens.views.revealWorktreeInExplorer
// - gitlens.views.revert
// - gitlens.views.searchAndCompare.clear
// - gitlens.views.searchAndCompare.compareWithSelected
// - gitlens.views.searchAndCompare.focus
// - gitlens.views.searchAndCompare.refresh
// - gitlens.views.searchAndCompare.removeView
// - gitlens.views.searchAndCompare.resetViewLocation
// - gitlens.views.searchAndCompare.searchCommits
// - gitlens.views.searchAndCompare.selectForCompare
// - gitlens.views.searchAndCompare.setFilesFilterOff
// - gitlens.views.searchAndCompare.setFilesFilterOnLeft
// - gitlens.views.searchAndCompare.setFilesFilterOnRight
// - gitlens.views.searchAndCompare.setFilesLayoutToAuto
// - gitlens.views.searchAndCompare.setFilesLayoutToList
// - gitlens.views.searchAndCompare.setFilesLayoutToTree
// - gitlens.views.searchAndCompare.setShowAvatarsOff
// - gitlens.views.searchAndCompare.setShowAvatarsOn
// - gitlens.views.searchAndCompare.swapComparison
// - gitlens.views.searchAndCompare.toggleVisibility
// - gitlens.views.selectFileForCompare
// - gitlens.views.selectForCompare
// - gitlens.views.setAsDefault
// - gitlens.views.setBranchComparisonToBranch
// - gitlens.views.setBranchComparisonToWorking
// - gitlens.views.setResultsCommitsFilterAuthors
// - gitlens.views.setResultsCommitsFilterOff
// - gitlens.views.setShowRelativeDateMarkersOff
// - gitlens.views.setShowRelativeDateMarkersOn
// - gitlens.views.stageDirectory
// - gitlens.views.stageFile
// - gitlens.views.star
// - gitlens.views.star.multi
// - gitlens.views.stash.apply
// - gitlens.views.stash.delete
// - gitlens.views.stash.delete.multi
// - gitlens.views.stash.rename
// - gitlens.views.stashes.focus
// - gitlens.views.stashes.refresh
// - gitlens.views.stashes.removeView
// - gitlens.views.stashes.resetViewLocation
// - gitlens.views.stashes.setFilesLayoutToAuto
// - gitlens.views.stashes.setFilesLayoutToList
// - gitlens.views.stashes.setFilesLayoutToTree
// - gitlens.views.stashes.toggleVisibility
// - gitlens.views.switchToAnotherBranch
// - gitlens.views.switchToBranch
// - gitlens.views.switchToCommit
// - gitlens.views.switchToTag
// - gitlens.views.tags.focus
// - gitlens.views.tags.refresh
// - gitlens.views.tags.removeView
// - gitlens.views.tags.resetViewLocation
// - gitlens.views.tags.setFilesLayoutToAuto
// - gitlens.views.tags.setFilesLayoutToList
// - gitlens.views.tags.setFilesLayoutToTree
// - gitlens.views.tags.setLayoutToList
// - gitlens.views.tags.setLayoutToTree
// - gitlens.views.tags.setShowAvatarsOff
// - gitlens.views.tags.setShowAvatarsOn
// - gitlens.views.tags.toggleVisibility
// - gitlens.views.timeline.focus
// - gitlens.views.timeline.refresh
// - gitlens.views.timeline.removeView
// - gitlens.views.timeline.resetViewLocation
// - gitlens.views.timeline.toggleVisibility
// - gitlens.views.title.createBranch
// - gitlens.views.title.createTag
// - gitlens.views.title.createWorktree
// - gitlens.views.undoCommit
// - gitlens.views.unsetAsDefault
// - gitlens.views.unstageDirectory
// - gitlens.views.unstageFile
// - gitlens.views.unstar
// - gitlens.views.unstar.multi
// - gitlens.views.workspaces.addRepos
// - gitlens.views.workspaces.addReposFromLinked
// - gitlens.views.workspaces.changeAutoAddSetting
// - gitlens.views.workspaces.convert
// - gitlens.views.workspaces.create
// - gitlens.views.workspaces.createLocal
// - gitlens.views.workspaces.delete
// - gitlens.views.workspaces.focus
// - gitlens.views.workspaces.info
// - gitlens.views.workspaces.locateAllRepos
// - gitlens.views.workspaces.openLocal
// - gitlens.views.workspaces.openLocalNewWindow
// - gitlens.views.workspaces.refresh
// - gitlens.views.workspaces.removeView
// - gitlens.views.workspaces.repo.addToWindow
// - gitlens.views.workspaces.repo.locate
// - gitlens.views.workspaces.repo.open
// - gitlens.views.workspaces.repo.openInNewWindow
// - gitlens.views.workspaces.repo.remove
// - gitlens.views.workspaces.resetViewLocation
// - gitlens.views.workspaces.toggleVisibility
// - gitlens.views.worktrees.focus
// - gitlens.views.worktrees.refresh
// - gitlens.views.worktrees.removeView
// - gitlens.views.worktrees.resetViewLocation
// - gitlens.views.worktrees.setFilesLayoutToAuto
// - gitlens.views.worktrees.setFilesLayoutToList
// - gitlens.views.worktrees.setFilesLayoutToTree
// - gitlens.views.worktrees.setShowAvatarsOff
// - gitlens.views.worktrees.setShowAvatarsOn
// - gitlens.views.worktrees.setShowBranchComparisonOff
// - gitlens.views.worktrees.setShowBranchComparisonOn
// - gitlens.views.worktrees.setShowBranchPullRequestOff
// - gitlens.views.worktrees.setShowBranchPullRequestOn
// - gitlens.views.worktrees.toggleVisibility
// - go.add.package.workspace
// - go.add.tags
// - go.apply.coverprofile
// - go.benchmark.cursor
// - go.benchmark.file
// - go.benchmark.package
// - go.browse.packages
// - go.build.package
// - go.build.workspace
// - go.debug.cursor
// - go.debug.previous
// - go.debug.subtest.cursor
// - go.debug.toggleHideSystemGoroutines
// - go.environment.choose
// - go.explorer.focus
// - go.explorer.open
// - go.explorer.refresh
// - go.explorer.resetViewLocation
// - go.extractServerChannel
// - go.get.package
// - go.global.resetState
// - go.gopath
// - go.goroot
// - go.impl.cursor
// - go.import.add
// - go.install.package
// - go.languageserver.maintain
// - go.languageserver.restart
// - go.lint.package
// - go.lint.workspace
// - go.locate.tools
// - go.playground
// - go.remove.tags
// - go.run.modinit
// - go.show.commands
// - go.subtest.cursor
// - go.survey.resetConfig
// - go.survey.showConfig
// - go.test.cancel
// - go.test.captureProfile
// - go.test.coverage
// - go.test.cursor
// - go.test.cursorOrPrevious
// - go.test.deleteProfile
// - go.test.file
// - go.test.generate.file
// - go.test.generate.function
// - go.test.generate.package
// - go.test.package
// - go.test.previous
// - go.test.profile.focus
// - go.test.profile.resetViewLocation
// - go.test.refresh
// - go.test.showProfileFile
// - go.test.showProfiles
// - go.test.workspace
// - go.toggle.gc_details
// - go.toggle.test.file
// - go.tools.install
// - go.vet.package
// - go.vet.workspace
// - go.vulncheck.toggle
// - go.welcome
// - go.workspace.editEnv
// - go.workspace.resetEnv
// - go.workspace.resetState
// - goToNextReferenceFromEmbeddedEditor
// - goToPreviousReferenceFromEmbeddedEditor
// - hediet.vscode-drawio.changeTheme
// - hediet.vscode-drawio.convert
// - hediet.vscode-drawio.editDiagramAsText
// - hediet.vscode-drawio.export
// - hediet.vscode-drawio.linkFileWithSelectedNode
// - hediet.vscode-drawio.linkSymbolWithSelectedNode
// - hediet.vscode-drawio.linkWsSymbolWithSelectedNode
// - hediet.vscode-drawio.newDiagram
// - hediet.vscode-drawio.toggleCodeLinkActivation
// - hideCustomTitleBar
// - hideCustomTitleBarInFullScreen
// - imagePreview.copyImage
// - imagePreview.zoomIn
// - imagePreview.zoomOut
// - inlayHints.startReadingLineWithHint
// - inlineChat.configure
// - inlineChat.copyRecordings
// - inlineChat.toggleDiff
// - interactive.acceptChanges
// - interactive.configure
// - interactive.history.focus
// - interactive.input.clear
// - interactive.input.focus
// - interactiveEditor.start
// - ipynb.cleanInvalidImageAttachment
// - ipynb.newUntitledIpynb
// - ipynb.openIpynbInNotebookEditor
// - isort.restart
// - javascript.goToProjectConfig
// - javascript.reloadProjects
// - javascript.removeUnusedImports
// - javascript.sortImports
// - json.clearCache
// - json.sort
// - keybindings.editor.clearSearchHistory
// - keybindings.editor.copyCommandKeybindingEntry
// - keybindings.editor.copyCommandTitle
// - keybindings.editor.resetKeybinding
// - keybindings.editor.showConflicts
// - keybindings.editor.showDefaultKeybindings
// - keybindings.editor.showExtensionKeybindings
// - keybindings.editor.showUserKeybindings
// - keywordActivation.status.command
// - lastCursorLineSelect
// - lastCursorLineSelectDrag
// - lastCursorWordSelect
// - layoutEditorGroups
// - list.collapseAllToFocus
// - list.focusParent
// - list.scrollLeft
// - list.scrollRight
// - list.selectAndPreserveFocus
// - list.toggleFilterOnType
// - list.toggleFindMatchType
// - list.toggleFindMode
// - list.triggerTypeNavigation
// - liveshare.accessibility.announceCoeditorLocation
// - liveshare.accessibility.setOutputDevice
// - liveshare.accessibility.toggleSoundsEnabled
// - liveshare.accessibility.toggleVoiceEnabled
// - liveshare.activityBar.copyServerURL
// - liveshare.activityBar.makeTerminalReadOnly
// - liveshare.activityBar.makeTerminalReadWrite
// - liveshare.activityBar.openServerInBrowser
// - liveshare.activityBar.openTerminal
// - liveshare.activityBar.removeTerminal
// - liveshare.activityBar.shareServer
// - liveshare.activityBar.shareTerminal
// - liveshare.activityBar.unshareServer
// - liveshare.activityBar.user.decrease
// - liveshare.activityBar.user.elevate
// - liveshare.blockParticipant
// - liveshare.blockParticipantFromActivityBar
// - liveshare.blockParticipantFromFileTreeExplorer
// - liveshare.collaboration.link.copy
// - liveshare.collaboration.link.copyFromActivityBar
// - liveshare.collaboration.link.copyFromFileTreeExplorer
// - liveshare.comments.cancelEditComment
// - liveshare.comments.createThread
// - liveshare.comments.deleteComment
// - liveshare.comments.deleteThread
// - liveshare.comments.editComment
// - liveshare.comments.reply
// - liveshare.comments.saveComment
// - liveshare.configureSettings
// - liveshare.copyToken
// - liveshare.createInvitationLink
// - liveshare.createSession
// - liveshare.debug
// - liveshare.devtools.focus
// - liveshare.devtools.resetViewLocation
// - liveshare.end
// - liveshare.endFromActivityBar
// - liveshare.endFromFileTreeExplorer
// - liveshare.endWithoutProgress
// - liveshare.exportLogs
// - liveshare.fileTreeExplorer.copyServerURL
// - liveshare.fileTreeExplorer.makeTerminalReadOnly
// - liveshare.fileTreeExplorer.makeTerminalReadWrite
// - liveshare.fileTreeExplorer.openServerInBrowser
// - liveshare.fileTreeExplorer.openTerminal
// - liveshare.fileTreeExplorer.removeTerminal
// - liveshare.fileTreeExplorer.shareServer
// - liveshare.fileTreeExplorer.shareTerminal
// - liveshare.fileTreeExplorer.unshareServer
// - liveshare.fileTreeExplorer.user.decrease
// - liveshare.fileTreeExplorer.user.elevate
// - liveshare.focusParticipantFromActivityBar
// - liveshare.focusParticipantFromFileTreeExplorer
// - liveshare.focusParticipants
// - liveshare.focusParticipantsFromActivityBar
// - liveshare.focusParticipantsFromFileTreeExplorer
// - liveshare.followFromActivityBar
// - liveshare.followFromFileTreeExplorer
// - liveshare.followToTheSideFromActivityBar
// - liveshare.followToTheSideFromTreeExplorer
// - liveshare.getCoeditingInformation
// - liveshare.help
// - liveshare.help.focus
// - liveshare.help.resetViewLocation
// - liveshare.joinFromActivityBar
// - liveshare.joinFromFileTreeExplorer
// - liveshare.joinFromWelcomeContent
// - liveshare.leave
// - liveshare.leaveFromActivityBar
// - liveshare.leaveFromFileTreeExplorer
// - liveshare.listParticipants
// - liveshare.listServers
// - liveshare.listTerminals
// - liveshare.moreInfo
// - liveshare.openActivityLog
// - liveshare.openInVS
// - liveshare.openInVSCode
// - liveshare.openLink
// - liveshare.openSessionChat
// - liveshare.removeParticipant
// - liveshare.removeParticipantFromActivityBar
// - liveshare.removeParticipantFromFileTreeExplorer
// - liveshare.reportAProblem
// - liveshare.scc.clean
// - liveshare.scc.cleanAll
// - liveshare.scc.openChange
// - liveshare.scc.openFile
// - liveshare.scc.openFile2
// - liveshare.scc.revertChange
// - liveshare.session.explorer.focus
// - liveshare.session.explorer.resetViewLocation
// - liveshare.session.focus
// - liveshare.session.removeView
// - liveshare.session.resetViewLocation
// - liveshare.session.toggleVisibility
// - liveshare.shareServer
// - liveshare.shareTerminal
// - liveshare.signInAndReload
// - liveshare.signin
// - liveshare.signin.token
// - liveshare.signout
// - liveshare.start
// - liveshare.startFromActivityBar
// - liveshare.startFromFileTreeExplorer
// - liveshare.startFromWelcomeContent
// - liveshare.startFromWelcomePage
// - liveshare.startPresentation
// - liveshare.startReadOnly
// - liveshare.startReadOnlyFromActivityBar
// - liveshare.startReadOnlyFromFileTreeExplorer
// - liveshare.startReadOnlyFromWelcomeContent
// - liveshare.unfollowFromActivityBar
// - liveshare.unfollowFromFileTreeExplorer
// - liveshare.unshareServer
// - liveshare.workbench.dispose
// - loadedScripts.collapse
// - markdown.editor.insertImageFromWorkspace
// - markdown.editor.insertLinkFromWorkspace
// - markdown.findAllFileReferences
// - markdown.preview.refresh
// - markdown.preview.toggleLock
// - markdown.showLockedPreviewToSide
// - markdown.showPreviewSecuritySelector
// - markdown.showSource
// - material-icon-theme.activateIcons
// - material-icon-theme.changeFileColor
// - material-icon-theme.changeFolderColor
// - material-icon-theme.changeFolderTheme
// - material-icon-theme.changeOpacity
// - material-icon-theme.changeSaturation
// - material-icon-theme.restoreDefaultConfig
// - material-icon-theme.toggleExplorerArrows
// - material-icon-theme.toggleGrayscale
// - material-icon-theme.toggleIconPacks
// - menu.resetHiddenStates
// - merge-conflict.accept.all-both
// - merge-conflict.accept.all-current
// - merge-conflict.accept.all-incoming
// - merge-conflict.accept.both
// - merge-conflict.accept.current
// - merge-conflict.accept.incoming
// - merge-conflict.accept.selection
// - merge-conflict.compare
// - merge-conflict.next
// - merge-conflict.previous
// - merge.acceptAllInput1
// - merge.acceptAllInput2
// - merge.columnLayout
// - merge.dev.copyContentsJson
// - merge.dev.loadContentsFromFolder
// - merge.dev.openContentsJson
// - merge.dev.openSelectionInTemporaryMergeEditor
// - merge.dev.saveContentsToFolder
// - merge.goToNextUnhandledConflict
// - merge.goToPreviousUnhandledConflict
// - merge.mixedLayout
// - merge.openBaseEditor
// - merge.openResult
// - merge.showBase
// - merge.showBaseCenter
// - merge.showBaseTop
// - merge.showNonConflictingChanges
// - merge.toggleActiveConflictInput1
// - merge.toggleActiveConflictInput2
// - mergeEditor.acceptMerge
// - mergeEditor.compareInput1WithBase
// - mergeEditor.compareInput2WithBase
// - mergeEditor.resetCloseWithConflictsChoice
// - mergeEditor.resetResultToBaseAndAutoMerge
// - multiDiffEditor.collapseAll
// - multiDiffEditor.expandAll
// - multiDiffEditor.goToFile
// - mysql.bucket.new
// - mysql.change.user
// - mysql.changeTableName
// - mysql.codeLens.copy
// - mysql.codeLens.run
// - mysql.column.add
// - mysql.column.createIndex
// - mysql.column.down
// - mysql.column.drop
// - mysql.column.up
// - mysql.column.update
// - mysql.connection.add
// - mysql.connection.copy
// - mysql.connection.copyKey
// - mysql.connection.delete
// - mysql.connection.disable
// - mysql.connection.edit
// - mysql.connection.neo4j.browser
// - mysql.connection.open
// - mysql.connection.selectDb
// - mysql.connection.startRdp
// - mysql.connection.terminal
// - mysql.console.open
// - mysql.data.export
// - mysql.data.import
// - mysql.database.add
// - mysql.db.drop
// - mysql.db.truncate
// - mysql.delete.event
// - mysql.delete.function
// - mysql.delete.procedure
// - mysql.delete.trigger
// - mysql.delete.user
// - mysql.delete.view
// - mysql.docker.compose.run
// - mysql.docker.container.cleanUp
// - mysql.docker.container.id.copy
// - mysql.docker.container.inspect
// - mysql.docker.container.new
// - mysql.docker.container.open.ports
// - mysql.docker.container.pause
// - mysql.docker.container.restart
// - mysql.docker.container.showLogs
// - mysql.docker.container.showStats
// - mysql.docker.container.start
// - mysql.docker.container.stop
// - mysql.docker.container.terminal
// - mysql.docker.container.unpause
// - mysql.docker.container.updateRestartPolicy
// - mysql.docker.image.cleanUp
// - mysql.docker.image.document
// - mysql.docker.image.id.copy
// - mysql.docker.image.inspect
// - mysql.docker.image.new
// - mysql.docker.image.pull
// - mysql.docker.image.run
// - mysql.docker.image.runDetach
// - mysql.docker.network.cleanUp
// - mysql.docker.network.delete
// - mysql.docker.network.inspect
// - mysql.docker.network.new
// - mysql.docker.node.drop
// - mysql.docker.volume.cleanUp
// - mysql.docker.volume.delete
// - mysql.docker.volume.inspect
// - mysql.docker.volume.new
// - mysql.document.generate
// - mysql.elastic.copyAsCurl
// - mysql.elastic.document
// - mysql.elastic.execute
// - mysql.elastic.lint
// - mysql.es.import
// - mysql.es.index.delete
// - mysql.es.index.mapping
// - mysql.es.index.new
// - mysql.es.index.showSettings
// - mysql.es.stream.new
// - mysql.es.template.aggregations
// - mysql.es.template.analyze
// - mysql.es.template.insert
// - mysql.es.template.search
// - mysql.es.template.update
// - mysql.file.delete
// - mysql.file.download
// - mysql.file.new
// - mysql.file.open
// - mysql.file.upload
// - mysql.folder.new
// - mysql.folder.upload
// - mysql.fs.terminal
// - mysql.history.open
// - mysql.history.record
// - mysql.history.view
// - mysql.host.copy
// - mysql.index.drop
// - mysql.index.modify
// - mysql.kafka.consumer.configOffset
// - mysql.kafka.consumer.delete
// - mysql.kafka.consumer.start
// - mysql.kafka.consumer.stop
// - mysql.kafka.offset.resetOffset
// - mysql.kafka.offset.setOffset
// - mysql.kafka.topic.delete
// - mysql.kafka.topic.new
// - mysql.kafka.topic.produce.send
// - mysql.kafka.topic.producer.kill
// - mysql.keyValue.node.delete
// - mysql.keyValue.node.edit
// - mysql.keyValue.node.new
// - mysql.loki.label.viewLog
// - mysql.mock.reset
// - mysql.mock.table
// - mysql.mongo.collection.delete
// - mysql.mongo.collection.insert
// - mysql.mq.consume
// - mysql.mq.produce
// - mysql.name.copy
// - mysql.neo4j.relation.find
// - mysql.node.create
// - mysql.node.favorite
// - mysql.node.favorite.cancel
// - mysql.node.favorite.clear
// - mysql.node.filterChildren
// - mysql.node.rename
// - mysql.notebook.new
// - mysql.notebook.open
// - mysql.notebook.sql
// - mysql.package.drop
// - mysql.package.source
// - mysql.path.copy
// - mysql.query.add
// - mysql.query.book.add
// - mysql.query.delete
// - mysql.query.link
// - mysql.query.open
// - mysql.query.rename
// - mysql.query.switch
// - mysql.rabbit.queue.delete
// - mysql.rabbit.queue.new
// - mysql.redis.connection.status
// - mysql.redis.import
// - mysql.redis.key.del
// - mysql.redis.key.detail
// - mysql.redis.key.new
// - mysql.redis.loadMore
// - mysql.runSQLAsJSON
// - mysql.runSQLWithoutParse
// - mysql.s3.openSite
// - mysql.s3.selectBuckets
// - mysql.s3.url.public
// - mysql.s3.url.temp
// - mysql.server.info
// - mysql.show.esIndex
// - mysql.show.event
// - mysql.show.function
// - mysql.show.procedure
// - mysql.show.trigger
// - mysql.ssh.connect
// - mysql.ssh.folder.terminal
// - mysql.ssh.forward.port
// - mysql.ssh.server.status
// - mysql.ssh.sh.execute
// - mysql.ssh.user.delete
// - mysql.ssh.user.new
// - mysql.ssh.user.updatePassword
// - mysql.ssh.user.uploadPublicKey
// - mysql.struct.diff
// - mysql.struct.export
// - mysql.table.copy
// - mysql.table.design
// - mysql.table.drop
// - mysql.table.find
// - mysql.table.fullTextSearch
// - mysql.table.show
// - mysql.table.sort
// - mysql.table.source
// - mysql.table.truncate
// - mysql.template.event.new
// - mysql.template.function
// - mysql.template.procedure
// - mysql.template.schema
// - mysql.template.sql
// - mysql.template.table
// - mysql.template.table.delete
// - mysql.template.table.insert
// - mysql.template.table.reset
// - mysql.template.table.select
// - mysql.template.table.update
// - mysql.template.trigger
// - mysql.template.user
// - mysql.template.view
// - mysql.treeview.collapse
// - mysql.treeview.nosql.collapse
// - mysql.user.grant
// - mysql.user.sql
// - mysql.view.source
// - mysql2.refresh
// - mysql2.refreshTree
// - noop
// - notebook.action.changeTabDisplaySize
// - notebook.action.convertIndentationToSpaces
// - notebook.action.convertIndentationToTabs
// - notebook.action.indentUsingSpaces
// - notebook.action.indentUsingTabs
// - notebook.action.toggleNotebookStickyScroll
// - notebook.cancelExecution
// - notebook.cell.cancelExecution
// - notebook.cell.changeLanguage
// - notebook.cell.chat.close
// - notebook.cell.chat.restore
// - notebook.cell.chat.startAtTop
// - notebook.cell.chat.stop
// - notebook.cell.collapseAllCellInputs
// - notebook.cell.collapseAllCellOutputs
// - notebook.cell.copy
// - notebook.cell.cut
// - notebook.cell.executeAndFocusContainer
// - notebook.cell.executeCellAndBelow
// - notebook.cell.executeCellsAbove
// - notebook.cell.expandAllCellInputs
// - notebook.cell.expandAllCellOutputs
// - notebook.cell.insertCodeCellAboveAndFocusContainer
// - notebook.cell.insertCodeCellAtTop
// - notebook.cell.insertCodeCellBelowAndFocusContainer
// - notebook.cell.insertMarkdownCellAbove
// - notebook.cell.insertMarkdownCellAtTop
// - notebook.cell.insertMarkdownCellBelow
// - notebook.cell.joinSelected
// - notebook.cell.paste
// - notebook.cell.toggleLineNumbers
// - notebook.cell.toggleOutputs
// - notebook.cellOuput.showEmptyOutputs
// - notebook.cellOutput.copy
// - notebook.cellOutput.openInTextEditor
// - notebook.clearAllCellsOutputs
// - notebook.clearNotebookEdtitorTypeCache
// - notebook.clearNotebookKernelsMRUCache
// - notebook.diff.cell.revertInput
// - notebook.diff.cell.revertMetadata
// - notebook.diff.cell.revertOutputs
// - notebook.diff.cell.switchOutputRenderingStyleToText
// - notebook.diff.showMetadata
// - notebook.diff.showOutputs
// - notebook.diff.switchToText
// - notebook.execute
// - notebook.inspectLayout
// - notebook.interruptExecution
// - notebook.outline.toggleCodeCellSymbols
// - notebook.outline.toggleCodeCells
// - notebook.outline.toggleShowMarkdownHeadersOnly
// - notebook.renderAllMarkdownCells
// - notebook.revealLastFailedCell
// - notebook.revealRunningCell
// - notebook.saveMimeTypeOrder
// - notebook.section.expandSection
// - notebook.section.foldSection
// - notebook.section.runCells
// - notebook.section.runSingleCell
// - notebook.selectIndentation
// - notebook.setProfile
// - notebook.toggleCellToolbarPosition
// - notebook.toggleCellToolbarPositionFromEditorTitle
// - notebook.toggleLayoutTroubleshoot
// - notebook.toggleLineNumbers
// - notebook.toggleLineNumbersFromEditorTitle
// - notifications.clearAll
// - notifications.focusToasts
// - notifications.toggleDoNotDisturbMode
// - notifications.toggleDoNotDisturbModeBySource
// - notifications.toggleList
// - npm.debugScript
// - npm.focus
// - npm.openScript
// - npm.packageManager
// - npm.refresh
// - npm.resetViewLocation
// - npm.runInstall
// - npm.runScript
// - npm.runScriptFromFolder
// - npm.runSelectedScript
// - oneDarkPro.cancelBold
// - oneDarkPro.cancelItalic
// - oneDarkPro.cancelVivid
// - oneDarkPro.setBold
// - oneDarkPro.setItalic
// - oneDarkPro.setVivid
// - oneDarkPro.showChangelog
// - openEditors.closeAll
// - openEditors.newUntitledFile
// - openInIntegratedTerminal
// - openInTerminal
// - openReference
// - opensshremotes.addNewSshHost
// - opensshremotes.cleanCurrentRemoteServer
// - opensshremotes.cleanDevBox
// - opensshremotes.cleanLocalServer
// - opensshremotes.cleanRemoteServer
// - opensshremotes.getHelp
// - opensshremotes.getStarted
// - opensshremotes.openConfigFile
// - opensshremotes.openEmptyWindow
// - opensshremotes.openEmptyWindowInCurrentWindow
// - opensshremotes.openEmptyWindowOnCurrentHost
// - opensshremotes.openWebUI
// - opensshremotes.provideFeedback
// - opensshremotes.reportIssue
// - opensshremotes.settings
// - opensshremotes.showLog
// - outline.collapse
// - outline.expand
// - outline.filterOnType
// - outline.focus
// - outline.followCursor
// - outline.removeView
// - outline.resetViewLocation
// - outline.sortByKind
// - outline.sortByName
// - outline.sortByPosition
// - outline.toggleVisibility
// - paste
// - perf.event.profiling
// - perf.insta.printAsyncCycles
// - perf.insta.printTraces
// - perfview.show
// - platformio-debug.disassembly.focus
// - platformio-debug.disassembly.removeView
// - platformio-debug.disassembly.resetViewLocation
// - platformio-debug.disassembly.toggleVisibility
// - platformio-debug.examineMemory
// - platformio-debug.memory.clearHistory
// - platformio-debug.memory.deleteHistoryItem
// - platformio-debug.memory.focus
// - platformio-debug.memory.removeView
// - platformio-debug.memory.resetViewLocation
// - platformio-debug.memory.toggleVisibility
// - platformio-debug.peripherals.copyValue
// - platformio-debug.peripherals.focus
// - platformio-debug.peripherals.removeView
// - platformio-debug.peripherals.resetViewLocation
// - platformio-debug.peripherals.selectedNode
// - platformio-debug.peripherals.setFormat
// - platformio-debug.peripherals.toggleVisibility
// - platformio-debug.peripherals.updateNode
// - platformio-debug.registers.copyValue
// - platformio-debug.registers.focus
// - platformio-debug.registers.removeView
// - platformio-debug.registers.resetViewLocation
// - platformio-debug.registers.selectedNode
// - platformio-debug.registers.setFormat
// - platformio-debug.registers.toggleVisibility
// - platformio-debug.setForceDisassembly
// - platformio-debug.viewDisassembly
// - platformio-ide.clean
// - platformio-ide.newTerminal
// - platformio-ide.openPIOCoreCLI
// - platformio-ide.pickProjectEnv
// - platformio-ide.projectTasks.focus
// - platformio-ide.projectTasks.resetViewLocation
// - platformio-ide.quickAccess.focus
// - platformio-ide.quickAccess.removeView
// - platformio-ide.quickAccess.resetViewLocation
// - platformio-ide.quickAccess.toggleVisibility
// - platformio-ide.rebuildProjectIndex
// - platformio-ide.refreshProjectTasks
// - platformio-ide.setProjectPort
// - platformio-ide.showHome
// - platformio-ide.showReleaseNotes
// - platformio-ide.startDebugging
// - platformio-ide.test
// - platformio-ide.toggleMultiEnvProjectTasks
// - platformio-ide.upgradeCore
// - platformio-ide.uploadAndMonitor
// - prettier.createConfigFile
// - prettier.forceFormatDocument
// - prettier.openOutput
// - problems.action.copyMessage
// - problems.action.copyRelatedInformationMessage
// - problems.action.showMultilineMessage
// - problems.action.showSinglelineMessage
// - projectManager.addToFavorites
// - projectManager.addToWorkspace
// - projectManager.addToWorkspace#sideBar
// - projectManager.editProjects
// - projectManager.filterProjectsByTag
// - projectManager.filterProjectsByTag#sideBar
// - projectManager.hideGitWelcome
// - projectManager.listAnyProjects#sideBarAny
// - projectManager.listFavoriteProjects#sideBarFavorites
// - projectManager.listGitProjects#sideBarGit
// - projectManager.listMercurialProjects#sideBarMercurial
// - projectManager.listProjectsNewWindow
// - projectManager.listSVNProjects#sideBarSVN
// - projectManager.listVSCodeProjects#sideBarVSCode
// - projectManager.openSettings#sideBarAny
// - projectManager.openSettings#sideBarFavorites
// - projectManager.openSettings#sideBarGit
// - projectManager.openSettings#sideBarMercurial
// - projectManager.openSettings#sideBarSVN
// - projectManager.openSettings#sideBarVSCode
// - projectManager.refreshAnyProjects
// - projectManager.refreshGitProjects
// - projectManager.refreshMercurialProjects
// - projectManager.refreshProjects
// - projectManager.refreshSVNProjects
// - projectManager.refreshVSCodeProjects
// - projectManager.saveProject
// - projectManager.showGitWelcome
// - projectManager.supportProjectManager
// - projectManager.whatsNew
// - projectManagerHelpAndFeedback.focus
// - projectManagerHelpAndFeedback.openHelpLink
// - projectManagerHelpAndFeedback.removeView
// - projectManagerHelpAndFeedback.resetViewLocation
// - projectManagerHelpAndFeedback.toggleVisibility
// - projectsExplorerAny.focus
// - projectsExplorerAny.resetViewLocation
// - projectsExplorerFavorites.focus
// - projectsExplorerFavorites.removeView
// - projectsExplorerFavorites.resetViewLocation
// - projectsExplorerFavorites.toggleVisibility
// - projectsExplorerGit.focus
// - projectsExplorerGit.removeView
// - projectsExplorerGit.resetViewLocation
// - projectsExplorerGit.toggleVisibility
// - projectsExplorerMercurial.focus
// - projectsExplorerMercurial.resetViewLocation
// - projectsExplorerSVN.focus
// - projectsExplorerSVN.resetViewLocation
// - projectsExplorerVSCode.focus
// - projectsExplorerVSCode.resetViewLocation
// - proto3.compile.all
// - proto3.compile.one
// - protolint.lint
// - pub.get
// - pub.outdated
// - pub.upgrade
// - pub.upgrade.majorVersions
// - pubspec-assist.addDependency
// - pubspec-assist.addDevDependency
// - pubspec-assist.sortAllDependencies
// - python.analysis.restartLanguageServer
// - python.clearCacheAndReload
// - python.clearWorkspaceInterpreter
// - python.configureTests
// - python.createEnvironment
// - python.createEnvironment-button
// - python.createNewFile
// - python.createTerminal
// - python.enableSourceMapSupport
// - python.envManager.clearPersistentStorage
// - python.envManager.create
// - python.envManager.delete
// - python.envManager.exportEnvironment
// - python.envManager.installPython
// - python.envManager.openInTerminal
// - python.envManager.refresh
// - python.envManager.refreshPackages
// - python.envManager.refreshing
// - python.envManager.searchAndInstallPackage
// - python.envManager.setAsActiveInterpreter
// - python.envManager.uninstallPackage
// - python.envManager.updateAllPackages
// - python.envManager.updatePackage
// - python.envManager.viewPackages
// - python.execInDedicatedTerminal
// - python.execInTerminal
// - python.execInTerminal-icon
// - python.execSelectionInDjangoShell
// - python.installJupyter
// - python.launchTensorBoard
// - python.reportIssue
// - python.setInterpreter
// - python.startREPL
// - python.viewLanguageServerOutput
// - python.viewOutput
// - pythonEnvironments.focus
// - pythonEnvironments.removeView
// - pythonEnvironments.resetViewLocation
// - pythonEnvironments.toggleVisibility
// - quicktype.changeTargetLanguage
// - quicktype.openForJSON
// - quicktype.openForJSONSchema
// - quicktype.openForTypeScript
// - quicktype.pasteJSONSchemaAsTypes
// - quicktype.pasteJSONSchemaAsTypesAndSerialization
// - quicktype.pasteTypeScriptAsTypesAndSerialization
// - rainbow-csv.Align
// - rainbow-csv.CSVLint
// - rainbow-csv.ColumnEditAfter
// - rainbow-csv.ColumnEditBefore
// - rainbow-csv.ColumnEditSelect
// - rainbow-csv.CopyBack
// - rainbow-csv.RBQL
// - rainbow-csv.RainbowSeparator
// - rainbow-csv.RainbowSeparatorOff
// - rainbow-csv.RainbowSeparatorOn
// - rainbow-csv.SampleHead
// - rainbow-csv.SampleTail
// - rainbow-csv.SetCommentPrefix
// - rainbow-csv.SetHeaderLine
// - rainbow-csv.SetJoinTableName
// - rainbow-csv.SetVirtualHeader
// - rainbow-csv.Shrink
// - refactorPreview
// - refactorPreview.discard
// - refactorPreview.focus
// - refactorPreview.groupByFile
// - refactorPreview.groupByType
// - refactorPreview.resetViewContainerLocation
// - refactorPreview.resetViewLocation
// - refactorPreview.toggleGrouping
// - references-view.clear
// - references-view.clearHistory
// - references-view.copy
// - references-view.copyAll
// - references-view.copyPath
// - references-view.findImplementations
// - references-view.pickFromHistory
// - references-view.refind
// - references-view.refresh
// - references-view.removeCallItem
// - references-view.removeReferenceItem
// - references-view.removeTypeItem
// - references-view.showIncomingCalls
// - references-view.showOutgoingCalls
// - references-view.showSubtypes
// - references-view.showSupertypes
// - references-view.showTypeHierarchy
// - references-view.tree.focus
// - references-view.tree.resetViewLocation
// - remote-containers.addExtensionToConfig
// - remote-containers.attachToContainerInCurrentWindow
// - remote-containers.attachToContainerInNewWindow
// - remote-containers.attachToK8sContainerFromViewlet
// - remote-containers.attachToRunningContainer
// - remote-containers.attachToRunningContainerFromViewlet
// - remote-containers.checkoutPRInVolume
// - remote-containers.cleanUpDevContainers
// - remote-containers.cloneInVolume
// - remote-containers.cloneInVolumeFromViewlet
// - remote-containers.cloneRepositoryInVolumeFromViewlet
// - remote-containers.configureContainerFeatures
// - remote-containers.createDevContainer
// - remote-containers.createDevContainerFile
// - remote-containers.createDevContainerFileWithCopilot
// - remote-containers.editDevContainerJSON
// - remote-containers.explorerDetailsRefresh
// - remote-containers.explorerTargetsRefresh
// - remote-containers.explorerVolumesRefresh
// - remote-containers.getHelp
// - remote-containers.getStarted
// - remote-containers.inspectDockerResource
// - remote-containers.inspectInBasicDevContainer
// - remote-containers.inspectVolume
// - remote-containers.inspectVolumeFromViewlet
// - remote-containers.installDocker
// - remote-containers.installDockerInWSL
// - remote-containers.installUserCLI
// - remote-containers.labelPortAndUpdateConfig
// - remote-containers.newContainer
// - remote-containers.openAttachConfigByNameFile
// - remote-containers.openAttachDevContainerFile
// - remote-containers.openDevContainerFile
// - remote-containers.openFolder
// - remote-containers.openFolderInContainerInCurrentWindow
// - remote-containers.openFolderInContainerInNewWindow
// - remote-containers.openInformationAboutMountPerformance
// - remote-containers.openLastLogFile
// - remote-containers.openLogFile
// - remote-containers.openPullRequestInVolume
// - remote-containers.openRepositoryFromGitWithEditSession
// - remote-containers.openRepositoryFromRemoteHubWithEditSession
// - remote-containers.openRepositoryInUniqueVolume
// - remote-containers.openRepositoryInVolume
// - remote-containers.openWorkspace
// - remote-containers.provideFeedback
// - remote-containers.pruneVolumes
// - remote-containers.rebuildAndReopenInContainer
// - remote-containers.rebuildContainer
// - remote-containers.rebuildContainerNoCache
// - remote-containers.rebuildNoCacheAndReopenInContainer
// - remote-containers.removeContainer
// - remote-containers.removeRecentFolder
// - remote-containers.removeVolume
// - remote-containers.reopenInContainer
// - remote-containers.reopenInSSH
// - remote-containers.reopenInTunnel
// - remote-containers.reopenInWSL
// - remote-containers.reopenLocally
// - remote-containers.reportIssue
// - remote-containers.revealLogTerminal
// - remote-containers.revealPostCreateTerminal
// - remote-containers.settings
// - remote-containers.showContainerLog
// - remote-containers.showDetails
// - remote-containers.showRecoveryContainerNotificationReset
// - remote-containers.showReopenInContainerNotificationReset
// - remote-containers.startContainer
// - remote-containers.stopContainer
// - remote-containers.switchContainer
// - remote-containers.testConnection
// - remote-containers.trySample
// - remote-explorer.add
// - remote-explorer.configureSsh
// - remote-explorer.connectToFolderInCurrentWindow
// - remote-explorer.connectToFolderInNewWindow
// - remote-explorer.connectToRemoteInCurrentWindow
// - remote-explorer.connectToRemoteInNewWindow
// - remote-explorer.connectToWslUsingDistro
// - remote-explorer.connectToWslUsingDistroInNewWindow
// - remote-explorer.deleteFolderHistoryItem
// - remote-explorer.refresh
// - remote-explorer.signIntoTunnelGithub
// - remote-explorer.signIntoTunnelMicrosoft
// - remote-explorer.unregisterTunnel
// - remote-wsl.connect
// - remote-wsl.connectInNewWindow
// - remote-wsl.connectUsingDistro
// - remote-wsl.connectUsingDistroInNewWindow
// - remote-wsl.explorer.addDistro
// - remote-wsl.explorer.connectInCurrentWindow
// - remote-wsl.explorer.connectInNewWindow
// - remote-wsl.explorer.deleteDistro
// - remote-wsl.explorer.openDistroInCurrentWindow
// - remote-wsl.explorer.openDistroInNewWindow
// - remote-wsl.explorer.refresh
// - remote-wsl.explorer.removeFolder
// - remote-wsl.explorer.setDefaultDistro
// - remote-wsl.getHelp
// - remote-wsl.getStarted
// - remote-wsl.newWindow
// - remote-wsl.newWindowForDistro
// - remote-wsl.openFolder
// - remote-wsl.provideFeedback
// - remote-wsl.reopenFromRecommendation
// - remote-wsl.reopenInWSL
// - remote-wsl.reopenInWindows
// - remote-wsl.reportIssue
// - remote-wsl.showLog
// - remote.tunnel.changeLocalPort
// - remote.tunnel.closeCommandPalette
// - remote.tunnel.copyAddressCommandPalette
// - remote.tunnel.forwardCommandPalette
// - remote.tunnel.forwardInline
// - remote.tunnel.open
// - remote.tunnel.openCommandPalette
// - remote.tunnel.openPreview
// - remote.tunnel.setProtocolHttp
// - remote.tunnel.setProtocolHttps
// - remoteTargets.focus
// - remoteTargets.resetViewLocation
// - removeRootFolder
// - repl.action.copyAll
// - repl.newRepl
// - replacePreviousChar
// - resetGettingStartedProgress
// - revealInExplorer
// - rust-analyzer.analyzerStatus
// - rust-analyzer.cancelFlycheck
// - rust-analyzer.clearFlycheck
// - rust-analyzer.copyRunCommandLine
// - rust-analyzer.debug
// - rust-analyzer.expandMacro
// - rust-analyzer.interpretFunction
// - rust-analyzer.matchingBrace
// - rust-analyzer.memoryUsage
// - rust-analyzer.moveItemDown
// - rust-analyzer.moveItemUp
// - rust-analyzer.newDebugConfig
// - rust-analyzer.onEnter
// - rust-analyzer.openCargoToml
// - rust-analyzer.openDocs
// - rust-analyzer.openExternalDocs
// - rust-analyzer.peekTests
// - rust-analyzer.rebuildProcMacros
// - rust-analyzer.reloadWorkspace
// - rust-analyzer.restartServer
// - rust-analyzer.revealDependency
// - rust-analyzer.run
// - rust-analyzer.runFlycheck
// - rust-analyzer.serverVersion
// - rust-analyzer.shuffleCrateGraph
// - rust-analyzer.ssr
// - rust-analyzer.startServer
// - rust-analyzer.stopServer
// - rust-analyzer.syntaxTree
// - rust-analyzer.toggleCheckOnSave
// - rust-analyzer.toggleLSPLogs
// - rust-analyzer.viewCrateGraph
// - rust-analyzer.viewFileText
// - rust-analyzer.viewFullCrateGraph
// - rust-analyzer.viewHir
// - rust-analyzer.viewItemTree
// - rust-analyzer.viewMemoryLayout
// - rust-analyzer.viewMir
// - rustDependencies.focus
// - rustDependencies.resetViewLocation
// - scm.openInIntegratedTerminal
// - scm.openInTerminal
// - scrollEditorBottom
// - scrollEditorTop
// - scrollLeft
// - scrollRight
// - scssFormatter.clearOutput
// - scssFormatter.showOutput
// - search.action.clearHistory
// - search.action.clearSearchResults
// - search.action.collapseSearchResults
// - search.action.copyAll
// - search.action.excludeFromSearch
// - search.action.expandRecursively
// - search.action.expandSearchResults
// - search.action.focusFilesToExclude
// - search.action.focusFilesToInclude
// - search.action.focusSearchList
// - search.action.openEditor
// - search.action.openNewEditor
// - search.action.openNewEditorFromView
// - search.action.openNewEditorToSide
// - search.action.refreshSearchResults
// - search.action.revealInSideBar
// - search.action.viewAsList
// - search.action.viewAsTree
// - selectFirstSuggestion
// - selectForCompare
// - selectLastSuggestion
// - setRootFolder
// - setSelection
// - settings.filterByOnline
// - settings.filterByTelemetry
// - settings.filterUntrusted
// - settings.switchToJSON
// - showCustomTitleBar
// - showEditorScreenReaderNotification
// - signals.sounds.help
// - simpleBrowser.show
// - targetsContainers.focus
// - targetsContainers.resetViewLocation
// - targetsWsl.focus
// - targetsWsl.resetViewLocation
// - terminal.focus
// - terminal.removeView
// - terminal.resetViewContainerLocation
// - terminal.resetViewLocation
// - terminal.toggleVisibility
// - testing.callStack.debug
// - testing.callStack.run
// - testing.cancelTestRefresh
// - testing.clearTestResults
// - testing.collapseAll
// - testing.configureProfile
// - testing.continuousRunUsingForTest
// - testing.coverage
// - testing.coverage.close
// - testing.coverage.uri
// - testing.coverageFilterToTest
// - testing.coverageFilterToTestInEditor
// - testing.coverageSelected
// - testing.coverageToggleToolbar
// - testing.coverageViewChangeSorting
// - testing.debug
// - testing.debug.uri
// - testing.debugSelected
// - testing.getSelectedProfiles
// - testing.goToRelatedCode
// - testing.goToRelatedTest
// - testing.hideTest
// - testing.openCoverage
// - testing.openMessageInEditor
// - testing.peekRelatedCode
// - testing.peekRelatedTest
// - testing.run
// - testing.run.uri
// - testing.runSelected
// - testing.runUsing
// - testing.searchForTestExtension
// - testing.selectDefaultTestProfiles
// - testing.sortByDuration
// - testing.sortByLocation
// - testing.sortByStatus
// - testing.startContinuousRun
// - testing.stopContinuousRun
// - testing.toggleContinuousRunForTest
// - testing.unhideAllTests
// - testing.unhideTest
// - testing.viewAsList
// - testing.viewAsTree
// - timeline.focus
// - timeline.refresh
// - timeline.removeView
// - timeline.resetViewLocation
// - timeline.toggleExcludeSource:timeline.localHistory
// - timeline.toggleFollowActiveEditor
// - timeline.toggleVisibility
// - toggle.diff.ignoreTrimWhitespace
// - toggle.diff.renderSideBySide
// - toggle.toggleCustomTitleBar
// - toggle.window.commandCenter
// - toggle.window.customTitleBarVisibility
// - toggle.window.customTitleBarVisibility.windowed
// - toggle.workbench.editor.editorActionsLocation
// - toggle.workbench.layoutControl.enabled
// - toggleVim
// - tree.toggleStickyScroll
// - tunnel-forwarding.restart
// - tunnel-forwarding.showLog
// - type
// - typescript.findAllFileReferences
// - typescript.goToProjectConfig
// - typescript.goToSourceDefinition
// - typescript.openTsServerLog
// - typescript.reloadProjects
// - typescript.removeUnusedImports
// - typescript.restartTsServer
// - typescript.selectTypeScriptVersion
// - typescript.sortImports
// - typescript.tsserverRequest
// - update.check
// - update.checkForUpdate
// - update.checking
// - update.downloadNow
// - update.downloadUpdate
// - update.downloading
// - update.install
// - update.installUpdate
// - update.restart
// - update.restartToUpdate
// - update.showCurrentReleaseNotes
// - update.showUpdateReleaseNotes
// - update.updating
// - userDataProfiles
// - userDataProfiles.resetViewContainerLocation
// - variables.collapse
// - vetur.generateGrammar
// - vetur.openUserScaffoldSnippetFolder
// - vetur.restartVLS
// - vetur.showCorrespondingVirtualFile
// - vetur.showDoctorInfo
// - vetur.showOutputChannel
// - vim.editVimrc
// - vim.remap
// - vim.showQuickpickCmdLine
// - vscode-account.askForLogin
// - vscode-account.login
// - vscode-account.logout
// - vscode-docker.activateRegistryProviders
// - vscode-docker.compose.down
// - vscode-docker.compose.restart
// - vscode-docker.compose.up
// - vscode-docker.compose.up.subset
// - vscode-docker.configure
// - vscode-docker.configureCompose
// - vscode-docker.containers.attachShell
// - vscode-docker.containers.browse
// - vscode-docker.containers.composeGroup.down
// - vscode-docker.containers.composeGroup.logs
// - vscode-docker.containers.composeGroup.restart
// - vscode-docker.containers.composeGroup.start
// - vscode-docker.containers.composeGroup.stop
// - vscode-docker.containers.configureExplorer
// - vscode-docker.containers.downloadFile
// - vscode-docker.containers.group.remove
// - vscode-docker.containers.inspect
// - vscode-docker.containers.openFile
// - vscode-docker.containers.prune
// - vscode-docker.containers.refresh
// - vscode-docker.containers.remove
// - vscode-docker.containers.restart
// - vscode-docker.containers.select
// - vscode-docker.containers.start
// - vscode-docker.containers.stats
// - vscode-docker.containers.stop
// - vscode-docker.containers.viewLogs
// - vscode-docker.contexts.configureExplorer
// - vscode-docker.contexts.help
// - vscode-docker.contexts.inspect
// - vscode-docker.contexts.refresh
// - vscode-docker.contexts.remove
// - vscode-docker.contexts.use
// - vscode-docker.debugging.initializeForDebugging
// - vscode-docker.help
// - vscode-docker.help.openWalkthrough
// - vscode-docker.help.reportIssue
// - vscode-docker.images.build
// - vscode-docker.images.configureExplorer
// - vscode-docker.images.copyFullTag
// - vscode-docker.images.group.remove
// - vscode-docker.images.hideDangling
// - vscode-docker.images.inspect
// - vscode-docker.images.prune
// - vscode-docker.images.pull
// - vscode-docker.images.push
// - vscode-docker.images.refresh
// - vscode-docker.images.remove
// - vscode-docker.images.run
// - vscode-docker.images.runAzureCli
// - vscode-docker.images.runInteractive
// - vscode-docker.images.showDangling
// - vscode-docker.images.tag
// - vscode-docker.networks.configureExplorer
// - vscode-docker.networks.create
// - vscode-docker.networks.inspect
// - vscode-docker.networks.prune
// - vscode-docker.networks.refresh
// - vscode-docker.networks.remove
// - vscode-docker.openDockerDownloadPage
// - vscode-docker.pruneSystem
// - vscode-docker.registries.azure.buildImage
// - vscode-docker.registries.azure.createRegistry
// - vscode-docker.registries.azure.deleteRegistry
// - vscode-docker.registries.azure.deleteRepository
// - vscode-docker.registries.azure.openInPortal
// - vscode-docker.registries.azure.untagImage
// - vscode-docker.registries.azure.viewProperties
// - vscode-docker.registries.connectRegistry
// - vscode-docker.registries.copyImageDigest
// - vscode-docker.registries.copyRemoteFullTag
// - vscode-docker.registries.deleteImage
// - vscode-docker.registries.deployImageToAca
// - vscode-docker.registries.deployImageToAzure
// - vscode-docker.registries.disconnectRegistry
// - vscode-docker.registries.dockerHub.openInBrowser
// - vscode-docker.registries.genericV2.addTrackedRegistry
// - vscode-docker.registries.genericV2.removeTrackedRegistry
// - vscode-docker.registries.help
// - vscode-docker.registries.inspectRemoteImageManifest
// - vscode-docker.registries.logInToDockerCli
// - vscode-docker.registries.logOutOfDockerCli
// - vscode-docker.registries.pullImage
// - vscode-docker.registries.pullRepository
// - vscode-docker.registries.reconnectRegistry
// - vscode-docker.registries.refresh
// - vscode-docker.views.dockerContexts.focus
// - vscode-docker.views.dockerContexts.removeView
// - vscode-docker.views.dockerContexts.resetViewLocation
// - vscode-docker.views.dockerContexts.toggleVisibility
// - vscode-docker.views.help.focus
// - vscode-docker.views.help.removeView
// - vscode-docker.views.help.resetViewLocation
// - vscode-docker.views.help.toggleVisibility
// - vscode-docker.volumes.configureExplorer
// - vscode-docker.volumes.inspect
// - vscode-docker.volumes.prune
// - vscode-docker.volumes.refresh
// - vscode-docker.volumes.remove
// - vscode-html-css.clear
// - vscode-html-css.validate
// - vue.action.doctor
// - vue.action.splitEditors
// - vue.action.writeVirtualFiles
// - vue3snippets.generator-component
// - vue3snippets.generator-module
// - vue3snippets.generator-service
// - walkthroughs.selectStep
// - watch.collapse
// - welcome.markStepComplete
// - welcome.markStepIncomplete
// - welcome.showAllWalkthroughs
// - workbench.action.acceptSelectedQuickOpenItem
// - workbench.action.activityBarLocation.bottom
// - workbench.action.activityBarLocation.default
// - workbench.action.activityBarLocation.hide
// - workbench.action.activityBarLocation.top
// - workbench.action.addRootFolder
// - workbench.action.alignPanelCenter
// - workbench.action.alignPanelJustify
// - workbench.action.alignPanelLeft
// - workbench.action.alignPanelRight
// - workbench.action.alternativeAcceptSelectedQuickOpenItem
// - workbench.action.blur
// - workbench.action.browseColorThemesInMarketplace
// - workbench.action.chat.addDynamicVariable
// - workbench.action.chat.applyCompareEdits
// - workbench.action.chat.assignSelectedAgent
// - workbench.action.chat.attachFile
// - workbench.action.chat.attachSelection
// - workbench.action.chat.clearHistory
// - workbench.action.chat.clearInputHistory
// - workbench.action.chat.copyAll
// - workbench.action.chat.copyCodeBlock
// - workbench.action.chat.copyItem
// - workbench.action.chat.discardCompareEdits
// - workbench.action.chat.export
// - workbench.action.chat.history
// - workbench.action.chat.import
// - workbench.action.chat.inlineVoiceChat
// - workbench.action.chat.insertIntoNewFile
// - workbench.action.chat.insertIntoNotebook
// - workbench.action.chat.installProviderForSynthesis
// - workbench.action.chat.installProviderForVoiceChat
// - workbench.action.chat.logInputHistory
// - workbench.action.chat.markHelpful
// - workbench.action.chat.markUnhelpful
// - workbench.action.chat.openInEditor
// - workbench.action.chat.openInNewWindow
// - workbench.action.chat.openInSidebar
// - workbench.action.chat.quickVoiceChat
// - workbench.action.chat.readChatResponseAloud
// - workbench.action.chat.reportIssueForBug
// - workbench.action.chat.selectAndInsertFile
// - workbench.action.chat.voiceChatInChatView
// - workbench.action.chatEditor.newChat
// - workbench.action.clearCommandHistory
// - workbench.action.clearEditorHistory
// - workbench.action.clearLocalePreference
// - workbench.action.clearRecentFiles
// - workbench.action.closeActivePinnedEditor
// - workbench.action.closeAuxiliaryBar
// - workbench.action.closeEditorInAllGroups
// - workbench.action.closeEditorsAndGroup
// - workbench.action.closeEditorsInOtherGroups
// - workbench.action.closeEditorsToTheLeft
// - workbench.action.closeEditorsToTheRight
// - workbench.action.closePanel
// - workbench.action.closeSidebar
// - workbench.action.collapseAllComments
// - workbench.action.compareEditor.focusOtherSide
// - workbench.action.compareEditor.focusPrimarySide
// - workbench.action.compareEditor.focusSecondarySide
// - workbench.action.compareEditor.swapSides
// - workbench.action.configureEditor
// - workbench.action.configureEditorTabs
// - workbench.action.configureLanguageBasedSettings
// - workbench.action.configureLocale
// - workbench.action.configureRuntimeArguments
// - workbench.action.continueOn.extensions
// - workbench.action.copyEditorGroupToNewWindow
// - workbench.action.createTerminalEditor
// - workbench.action.createTerminalEditorSameGroup
// - workbench.action.createTerminalEditorSide
// - workbench.action.customizeLayout
// - workbench.action.debug.callStackBottom
// - workbench.action.debug.callStackDown
// - workbench.action.debug.callStackTop
// - workbench.action.debug.callStackUp
// - workbench.action.debug.configure
// - workbench.action.debug.disconnectAndSuspend
// - workbench.action.debug.focusProcess
// - workbench.action.debug.restartFrame
// - workbench.action.debug.reverseContinue
// - workbench.action.debug.selectDebugConsole
// - workbench.action.debug.selectDebugSession
// - workbench.action.debug.selectRepl
// - workbench.action.debug.selectandstart
// - workbench.action.debug.showLoadedScripts
// - workbench.action.debug.stepBack
// - workbench.action.debug.terminateThread
// - workbench.action.decreaseViewHeight
// - workbench.action.decreaseViewSize
// - workbench.action.decreaseViewWidth
// - workbench.action.download
// - workbench.action.duplicateActiveEditorGroupDown
// - workbench.action.duplicateActiveEditorGroupLeft
// - workbench.action.duplicateActiveEditorGroupRight
// - workbench.action.duplicateActiveEditorGroupUp
// - workbench.action.duplicateWorkspaceInNewWindow
// - workbench.action.editor.changeEOL
// - workbench.action.editor.changeEncoding
// - workbench.action.editorActionsDefault
// - workbench.action.editorActionsTitleBar
// - workbench.action.editorLayoutSingle
// - workbench.action.editorLayoutThreeColumns
// - workbench.action.editorLayoutThreeRows
// - workbench.action.editorLayoutTwoByTwoGrid
// - workbench.action.editorLayoutTwoColumns
// - workbench.action.editorLayoutTwoColumnsBottom
// - workbench.action.editorLayoutTwoRows
// - workbench.action.editorLayoutTwoRowsRight
// - workbench.action.evenEditorWidths
// - workbench.action.expandAllComments
// - workbench.action.expandUnresolvedComments
// - workbench.action.extensionHostProfiler.stop
// - workbench.action.files.newFile
// - workbench.action.files.openFileFolderInNewWindow
// - workbench.action.files.openFileInNewWindow
// - workbench.action.files.openFolder
// - workbench.action.files.openFolderInNewWindow
// - workbench.action.files.resetActiveEditorReadonlyInSession
// - workbench.action.files.revert
// - workbench.action.files.saveAll
// - workbench.action.files.saveFiles
// - workbench.action.files.setActiveEditorReadonlyInSession
// - workbench.action.files.setActiveEditorWriteableInSession
// - workbench.action.files.showOpenedFileInNewWindow
// - workbench.action.files.toggleActiveEditorReadonlyInSession
// - workbench.action.firstEditorInGroup
// - workbench.action.focusAboveGroupWithoutWrap
// - workbench.action.focusActiveEditorGroup
// - workbench.action.focusActivityBar
// - workbench.action.focusAuxiliaryBar
// - workbench.action.focusBanner
// - workbench.action.focusBelowGroupWithoutWrap
// - workbench.action.focusFirstSideEditor
// - workbench.action.focusLastEditorGroup
// - workbench.action.focusLeftGroupWithoutWrap
// - workbench.action.focusNextGroup
// - workbench.action.focusOtherSideEditor
// - workbench.action.focusPanel
// - workbench.action.focusPreviousGroup
// - workbench.action.focusQuickOpen
// - workbench.action.focusRightGroupWithoutWrap
// - workbench.action.focusSecondSideEditor
// - workbench.action.focusStatusBar
// - workbench.action.focusTitleBar
// - workbench.action.generateColorTheme
// - workbench.action.hideEditorActions
// - workbench.action.hideEditorTabs
// - workbench.action.holdLockedScrolling
// - workbench.action.increaseViewHeight
// - workbench.action.increaseViewSize
// - workbench.action.increaseViewWidth
// - workbench.action.inspectContextKeys
// - workbench.action.inspectKeyMappings
// - workbench.action.inspectKeyMappingsJSON
// - workbench.action.installCommandLine
// - workbench.action.joinAllGroups
// - workbench.action.joinTwoGroups
// - workbench.action.localHistory.compareWithFile
// - workbench.action.localHistory.compareWithPrevious
// - workbench.action.localHistory.compareWithSelected
// - workbench.action.localHistory.create
// - workbench.action.localHistory.delete
// - workbench.action.localHistory.deleteAll
// - workbench.action.localHistory.open
// - workbench.action.localHistory.rename
// - workbench.action.localHistory.restore
// - workbench.action.localHistory.restoreViaEditor
// - workbench.action.localHistory.restoreViaPicker
// - workbench.action.localHistory.revealInOS
// - workbench.action.localHistory.selectForCompare
// - workbench.action.lockEditorGroup
// - workbench.action.logStorage
// - workbench.action.logWorkingCopies
// - workbench.action.manageTrustedDomain
// - workbench.action.maximizeEditorHideSidebar
// - workbench.action.mergeAllWindowTabs
// - workbench.action.minimizeOtherEditors
// - workbench.action.minimizeOtherEditorsHideSidebar
// - workbench.action.moveEditorGroupToNewWindow
// - workbench.action.moveEditorToAboveGroup
// - workbench.action.moveEditorToBelowGroup
// - workbench.action.moveEditorToLeftGroup
// - workbench.action.moveEditorToNewWindow
// - workbench.action.moveEditorToRightGroup
// - workbench.action.moveFocusedView
// - workbench.action.movePanelToSecondarySideBar
// - workbench.action.movePanelToSidePanel
// - workbench.action.moveSecondarySideBarToPanel
// - workbench.action.moveSideBarLeft
// - workbench.action.moveSideBarRight
// - workbench.action.moveSidePanelToPanel
// - workbench.action.moveView
// - workbench.action.moveWindowTabToNewWindow
// - workbench.action.navigateBackInEditLocations
// - workbench.action.navigateBackInNavigationLocations
// - workbench.action.navigateDown
// - workbench.action.navigateEditorGroups
// - workbench.action.navigateForwardInEditLocations
// - workbench.action.navigateForwardInNavigationLocations
// - workbench.action.navigateLast
// - workbench.action.navigateLeft
// - workbench.action.navigatePreviousInEditLocations
// - workbench.action.navigatePreviousInNavigationLocations
// - workbench.action.navigateRight
// - workbench.action.navigateToLastNavigationLocation
// - workbench.action.navigateUp
// - workbench.action.newEmptyEditorWindow
// - workbench.action.newGroupAbove
// - workbench.action.newGroupBelow
// - workbench.action.newGroupLeft
// - workbench.action.newGroupRight
// - workbench.action.newWindowTab
// - workbench.action.nextPanelView
// - workbench.action.nextSideBarView
// - workbench.action.openAccessibilitySettings
// - workbench.action.openActiveLogOutputFile
// - workbench.action.openActiveLogOutputFileInNewWindow
// - workbench.action.openApplicationSettingsJson
// - workbench.action.openChat
// - workbench.action.openDefaultKeybindingsFile
// - workbench.action.openDocumentationUrl
// - workbench.action.openEditorAtIndex
// - workbench.action.openExtensionLogsFolder
// - workbench.action.openFolderSettings
// - workbench.action.openFolderSettingsFile
// - workbench.action.openGlobalKeybindingsFile
// - workbench.action.openGlobalSettings
// - workbench.action.openIssueReporter
// - workbench.action.openLicenseUrl
// - workbench.action.openLogFile
// - workbench.action.openLogsFolder
// - workbench.action.openNewsletterSignupUrl
// - workbench.action.openNextRecentlyUsedEditor
// - workbench.action.openNextRecentlyUsedEditorInGroup
// - workbench.action.openPreviousEditorFromHistory
// - workbench.action.openPreviousRecentlyUsedEditor
// - workbench.action.openPreviousRecentlyUsedEditorInGroup
// - workbench.action.openPrivacyStatementUrl
// - workbench.action.openProcessExplorer
// - workbench.action.openProfile.default
// - workbench.action.openQuickChat
// - workbench.action.openRawDefaultSettings
// - workbench.action.openRemoteSettings
// - workbench.action.openRemoteSettingsFile
// - workbench.action.openRequestFeatureUrl
// - workbench.action.openSettings2
// - workbench.action.openSettingsJson
// - workbench.action.openSnippets
// - workbench.action.openTipsAndTricksUrl
// - workbench.action.openUserDataFolder
// - workbench.action.openVideoTutorialsUrl
// - workbench.action.openView
// - workbench.action.openWalkthrough
// - workbench.action.openWorkspace
// - workbench.action.openWorkspaceConfigFile
// - workbench.action.openWorkspaceFromEditor
// - workbench.action.openWorkspaceInNewWindow
// - workbench.action.openWorkspaceSettings
// - workbench.action.openWorkspaceSettingsFile
// - workbench.action.openYouTubeUrl
// - workbench.action.output.activeOutputLogLevel.0
// - workbench.action.output.activeOutputLogLevel.1
// - workbench.action.output.activeOutputLogLevel.2
// - workbench.action.output.activeOutputLogLevel.3
// - workbench.action.output.activeOutputLogLevel.4
// - workbench.action.output.activeOutputLogLevel.5
// - workbench.action.output.activeOutputLogLevelDefault
// - workbench.action.output.show.editSessions
// - workbench.action.output.show.extension-output-cweijan.vscode-mysql-client2-#1-Database Client
// - workbench.action.output.show.extension-output-dbaeumer.vscode-eslint-#1-ESLint
// - workbench.action.output.show.extension-output-eamodio.gitlens-#1-GitLens
// - workbench.action.output.show.extension-output-esbenp.prettier-vscode-#1-Prettier
// - workbench.action.output.show.extension-output-formulahendry.auto-rename-tag-#1-Auto Rename Tag
// - workbench.action.output.show.extension-output-formulahendry.code-runner-#1-Code
// - workbench.action.output.show.exthost
// - workbench.action.output.show.main
// - workbench.action.output.show.notebook.rendering
// - workbench.action.output.show.remoteTunnelService
// - workbench.action.output.show.rendererLog
// - workbench.action.output.show.sharedprocess
// - workbench.action.output.show.tasks
// - workbench.action.output.show.terminal
// - workbench.action.output.show.userDataSync
// - workbench.action.output.show.vscode.git.Git
// - workbench.action.output.show.vscode.github-authentication.GitHub Authentication
// - workbench.action.output.show.vscode.github.GitHub
// - workbench.action.output.show.vscode.json-language-features.JSON Language Server
// - workbench.action.output.show.vscodevim.vim.Vim
// - workbench.action.pauseSocketWriting
// - workbench.action.populateFileFromSnippet
// - workbench.action.positionPanelBottom
// - workbench.action.positionPanelLeft
// - workbench.action.positionPanelRight
// - workbench.action.positionPanelTop
// - workbench.action.previewColorTheme
// - workbench.action.previousPanelView
// - workbench.action.previousSideBarView
// - workbench.action.problems.focus
// - workbench.action.quickOpenLeastRecentlyUsedEditor
// - workbench.action.quickOpenNavigateNext
// - workbench.action.quickOpenNavigateNextInTerminalPicker
// - workbench.action.quickOpenNavigatePrevious
// - workbench.action.quickOpenNavigatePreviousInTerminalPicker
// - workbench.action.quickOpenPreviousEditor
// - workbench.action.quickOpenPreviousRecentlyUsedEditor
// - workbench.action.quickOpenRecent
// - workbench.action.quickOpenTerm
// - workbench.action.quickOpenWithModes
// - workbench.action.quickPickManyToggle
// - workbench.action.quickSwitchWindow
// - workbench.action.quickTextSearch
// - workbench.action.quickchat.close
// - workbench.action.quickchat.launchInlineChat
// - workbench.action.quickchat.openInChatView
// - workbench.action.reloadWindowWithExtensionsDisabled
// - workbench.action.remote.close
// - workbench.action.remote.extensions
// - workbench.action.removeLargeStorageDatabaseEntries
// - workbench.action.removeRootFolder
// - workbench.action.reopenTextEditor
// - workbench.action.reopenWithEditor
// - workbench.action.reportPerformanceIssueUsingReporter
// - workbench.action.resetFocusedViewLocation
// - workbench.action.resetViewLocations
// - workbench.action.restartExtensionHost
// - workbench.action.restoreEditorsToMainWindow
// - workbench.action.revertAndCloseActiveEditor
// - workbench.action.saveWorkspaceAs
// - workbench.action.selectIconTheme
// - workbench.action.selectProductIconTheme
// - workbench.action.setDefaultLogLevel
// - workbench.action.setLogLevel
// - workbench.action.showAboutDialog
// - workbench.action.showAllEditorsByMostRecentlyUsed
// - workbench.action.showEditorActions
// - workbench.action.showEditorTab
// - workbench.action.showEditorsInActiveGroup
// - workbench.action.showEditorsInGroup
// - workbench.action.showEmmetCommands
// - workbench.action.showErrorsWarnings
// - workbench.action.showInteractivePlayground
// - workbench.action.showLogs
// - workbench.action.showMultipleEditorTabs
// - workbench.action.showNextWindowTab
// - workbench.action.showOutputChannels
// - workbench.action.showPreviousWindowTab
// - workbench.action.showRuntimeExtensions
// - workbench.action.showWindowLog
// - workbench.action.splitEditorToAboveGroup
// - workbench.action.splitEditorToBelowGroup
// - workbench.action.splitEditorToFirstGroup
// - workbench.action.splitEditorToLastGroup
// - workbench.action.splitEditorToLeftGroup
// - workbench.action.splitEditorToNextGroup
// - workbench.action.splitEditorToPreviousGroup
// - workbench.action.splitEditorToRightGroup
// - workbench.action.stopTracing
// - workbench.action.tasks.configureDefaultBuildTask
// - workbench.action.tasks.configureDefaultTestTask
// - workbench.action.tasks.configureTaskRunner
// - workbench.action.tasks.manageAutomaticRunning
// - workbench.action.tasks.openUserTasks
// - workbench.action.tasks.openWorkspaceFileTasks
// - workbench.action.tasks.reRunTask
// - workbench.action.tasks.restartTask
// - workbench.action.tasks.runTask
// - workbench.action.tasks.showLog
// - workbench.action.tasks.showTasks
// - workbench.action.tasks.terminate
// - workbench.action.tasks.test
// - workbench.action.tasks.toggleProblems
// - workbench.action.terminal.attachToSession
// - workbench.action.terminal.changeColor
// - workbench.action.terminal.changeColorActiveTab
// - workbench.action.terminal.changeIcon
// - workbench.action.terminal.changeIconActiveTab
// - workbench.action.terminal.chat.cancel
// - workbench.action.terminal.chat.discard
// - workbench.action.terminal.chat.viewInChat
// - workbench.action.terminal.clearPreviousSessionHistory
// - workbench.action.terminal.clearSuggestCache
// - workbench.action.terminal.copyAndClearSelection
// - workbench.action.terminal.copyLastCommand
// - workbench.action.terminal.copyLastCommandAndLastCommandOutput
// - workbench.action.terminal.copyLastCommandOutput
// - workbench.action.terminal.copySelectionAsHtml
// - workbench.action.terminal.detachSession
// - workbench.action.terminal.focusAtIndex1
// - workbench.action.terminal.focusAtIndex2
// - workbench.action.terminal.focusAtIndex3
// - workbench.action.terminal.focusAtIndex4
// - workbench.action.terminal.focusAtIndex5
// - workbench.action.terminal.focusAtIndex6
// - workbench.action.terminal.focusAtIndex7
// - workbench.action.terminal.focusAtIndex8
// - workbench.action.terminal.focusAtIndex9
// - workbench.action.terminal.fontZoomIn
// - workbench.action.terminal.fontZoomOut
// - workbench.action.terminal.fontZoomReset
// - workbench.action.terminal.join
// - workbench.action.terminal.joinActiveTab
// - workbench.action.terminal.kill
// - workbench.action.terminal.killAll
// - workbench.action.terminal.killViewOrEditor
// - workbench.action.terminal.moveIntoNewWindow
// - workbench.action.terminal.moveToEditor
// - workbench.action.terminal.moveToTerminalPanel
// - workbench.action.terminal.newInActiveWorkspace
// - workbench.action.terminal.newWithCwd
// - workbench.action.terminal.newWithProfile
// - workbench.action.terminal.openFileLink
// - workbench.action.terminal.openSettings
// - workbench.action.terminal.openUrlLink
// - workbench.action.terminal.recordSession
// - workbench.action.terminal.relaunch
// - workbench.action.terminal.rename
// - workbench.action.terminal.renameWithArg
// - workbench.action.terminal.restartPtyHost
// - workbench.action.terminal.runActiveFile
// - workbench.action.terminal.runSelectedText
// - workbench.action.terminal.selectDefaultShell
// - workbench.action.terminal.selectToNextLine
// - workbench.action.terminal.selectToPreviousLine
// - workbench.action.terminal.setDimensions
// - workbench.action.terminal.showEnvironmentContributions
// - workbench.action.terminal.showTextureAtlas
// - workbench.action.terminal.splitInActiveWorkspace
// - workbench.action.terminal.switchTerminal
// - workbench.action.terminal.toggleStickyScroll
// - workbench.action.terminal.unsplit
// - workbench.action.terminal.writeDataToTerminal
// - workbench.action.toggleActivityBarVisibility
// - workbench.action.toggleAutoSave
// - workbench.action.toggleCenteredLayout
// - workbench.action.toggleCommenting
// - workbench.action.toggleConfirmBeforeClose
// - workbench.action.toggleEditorGroupLock
// - workbench.action.toggleEditorType
// - workbench.action.toggleEditorVisibility
// - workbench.action.toggleEditorWidths
// - workbench.action.toggleKeepEditors
// - workbench.action.toggleKeybindingsLog
// - workbench.action.toggleLightDarkThemes
// - workbench.action.toggleLockedScrolling
// - workbench.action.toggleMaximizedPanel
// - workbench.action.toggleMultiCursorModifier
// - workbench.action.toggleNotebookClipboardLog
// - workbench.action.toggleScreencastMode
// - workbench.action.toggleSearchOnType
// - workbench.action.toggleSeparatePinnedEditorTabs
// - workbench.action.toggleSidebarPosition
// - workbench.action.toggleSplitEditorInGroup
// - workbench.action.toggleSplitEditorInGroupLayout
// - workbench.action.toggleStatusbarVisibility
// - workbench.action.toggleWindowTabsBar
// - workbench.action.triggerReconnect
// - workbench.action.troubleshootIssue.start
// - workbench.action.troubleshootIssue.stop
// - workbench.action.uninstallCommandLine
// - workbench.action.unlockEditorGroup
// - workbench.action.url.openUrl
// - workbench.action.webview.openDeveloperTools
// - workbench.action.webview.reloadWebviewAction
// - workbench.action.zenHideEditorTabs
// - workbench.action.zenShowEditorTab
// - workbench.action.zenShowMultipleEditorTabs
// - workbench.actions.sync.editMachineName
// - workbench.actions.sync.loadActivity
// - workbench.actions.sync.turnOffSyncOnMachine
// - workbench.actions.sync.workbench.views.sync.localActivity.compareWithLocal
// - workbench.actions.sync.workbench.views.sync.localActivity.replaceCurrent
// - workbench.actions.sync.workbench.views.sync.localActivity.resolveResource
// - workbench.actions.sync.workbench.views.sync.remoteActivity.compareWithLocal
// - workbench.actions.sync.workbench.views.sync.remoteActivity.replaceCurrent
// - workbench.actions.sync.workbench.views.sync.remoteActivity.resolveResource
// - workbench.actions.syncData.reset
// - workbench.actions.table.workbench.panel.markers.view.viewAsTable
// - workbench.actions.table.workbench.panel.markers.view.viewAsTree
// - workbench.actions.treeView.workbench.panel.markers.view.collapseAll
// - workbench.actions.view.toggleProblems
// - workbench.actions.workbench.panel.comments.toggleResolvedComments
// - workbench.actions.workbench.panel.comments.toggleUnResolvedComments
// - workbench.actions.workbench.panel.markers.view.toggleActiveFile
// - workbench.actions.workbench.panel.markers.view.toggleErrors
// - workbench.actions.workbench.panel.markers.view.toggleExcludedFiles
// - workbench.actions.workbench.panel.markers.view.toggleInfos
// - workbench.actions.workbench.panel.markers.view.toggleWarnings
// - workbench.debug.action.copyAll
// - workbench.debug.action.focusBreakpointsView
// - workbench.debug.action.focusCallStackView
// - workbench.debug.action.focusRepl
// - workbench.debug.action.focusVariablesView
// - workbench.debug.action.focusWatchView
// - workbench.debug.breakPointsView.resetViewLocation
// - workbench.debug.callStackView.resetViewLocation
// - workbench.debug.loadedScriptsView.focus
// - workbench.debug.loadedScriptsView.resetViewLocation
// - workbench.debug.panel.action.clearReplAction
// - workbench.debug.variablesView.resetViewLocation
// - workbench.debug.viewlet.action.addDataBreakpointOnAddress
// - workbench.debug.viewlet.action.addFunctionBreakpointAction
// - workbench.debug.viewlet.action.addWatchExpression
// - workbench.debug.viewlet.action.copyValue
// - workbench.debug.viewlet.action.copyWorkspaceVariableValue
// - workbench.debug.viewlet.action.disableAllBreakpoints
// - workbench.debug.viewlet.action.editDataBreakpointOnAddress
// - workbench.debug.viewlet.action.enableAllBreakpoints
// - workbench.debug.viewlet.action.reapplyBreakpointsAction
// - workbench.debug.viewlet.action.removeAllBreakpoints
// - workbench.debug.viewlet.action.removeAllWatchExpressions
// - workbench.debug.viewlet.action.removeBreakpoint
// - workbench.debug.viewlet.action.toggleBreakpointsActivatedAction
// - workbench.debug.viewlet.action.viewMemory
// - workbench.debug.watchExpressionsView.resetViewLocation
// - workbench.debug.welcome.focus
// - workbench.debug.welcome.removeView
// - workbench.debug.welcome.resetViewLocation
// - workbench.debug.welcome.toggleVisibility
// - workbench.editSessions.actions.delete
// - workbench.editSessions.actions.deleteAll
// - workbench.editSessions.actions.resetAuth
// - workbench.editSessions.actions.resume
// - workbench.editSessions.actions.resumeFromSerializedPayload
// - workbench.editSessions.actions.resumeLatest
// - workbench.editSessions.actions.showEditSessions
// - workbench.editSessions.actions.showOutputChannel
// - workbench.editSessions.actions.signIn
// - workbench.editSessions.actions.store
// - workbench.editSessions.actions.storeCurrent
// - workbench.explorer.fileView.focus
// - workbench.explorer.fileView.removeView
// - workbench.explorer.fileView.resetViewLocation
// - workbench.explorer.fileView.toggleVisibility
// - workbench.explorer.openEditorsView.removeView
// - workbench.explorer.openEditorsView.resetViewLocation
// - workbench.explorer.openEditorsView.toggleVisibility
// - workbench.extensions.action.addExtensionToWorkspaceRecommendations
// - workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations
// - workbench.extensions.action.addToWorkspaceFolderRecommendations
// - workbench.extensions.action.addToWorkspaceIgnoredRecommendations
// - workbench.extensions.action.addToWorkspaceRecommendations
// - workbench.extensions.action.checkForUpdates
// - workbench.extensions.action.clearExtensionsSearchResults
// - workbench.extensions.action.clearLanguage
// - workbench.extensions.action.configure
// - workbench.extensions.action.configureKeybindings
// - workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions
// - workbench.extensions.action.configureWorkspaceRecommendedExtensions
// - workbench.extensions.action.copyExtension
// - workbench.extensions.action.copyExtensionId
// - workbench.extensions.action.debugExtensionHost
// - workbench.extensions.action.disableAll
// - workbench.extensions.action.disableAllWorkspace
// - workbench.extensions.action.disableAutoUpdate
// - workbench.extensions.action.enableAll
// - workbench.extensions.action.enableAllWorkspace
// - workbench.extensions.action.enableAutoUpdate
// - workbench.extensions.action.extensionHostProfile
// - workbench.extensions.action.extensionUpdates
// - workbench.extensions.action.focusExtensionsView
// - workbench.extensions.action.ignoreRecommendation
// - workbench.extensions.action.install.anotherVersion
// - workbench.extensions.action.install.specificVersion
// - workbench.extensions.action.installAndDonotSync
// - workbench.extensions.action.installExtensionFromLocation
// - workbench.extensions.action.installExtensions
// - workbench.extensions.action.installPrereleaseAndDonotSync
// - workbench.extensions.action.installVSIX
// - workbench.extensions.action.installWorkspaceRecommendedExtensions
// - workbench.extensions.action.listBuiltInExtensions
// - workbench.extensions.action.listWorkspaceUnsupportedExtensions
// - workbench.extensions.action.manageAuthorizedExtensionURIs
// - workbench.extensions.action.openExtensionsFolder
// - workbench.extensions.action.recentlyPublishedExtensions
// - workbench.extensions.action.refreshExtension
// - workbench.extensions.action.reinstall
// - workbench.extensions.action.removeExtensionFromWorkspaceRecommendations
// - workbench.extensions.action.saveExtensionHostProfile
// - workbench.extensions.action.setColorTheme
// - workbench.extensions.action.setFileIconTheme
// - workbench.extensions.action.setProductIconTheme
// - workbench.extensions.action.showDisabledExtensions
// - workbench.extensions.action.showEnabledExtensions
// - workbench.extensions.action.showExtensionsForLanguage
// - workbench.extensions.action.showExtensionsWithIds
// - workbench.extensions.action.showLanguageExtensions
// - workbench.extensions.action.showPopularExtensions
// - workbench.extensions.action.showPreReleaseVersion
// - workbench.extensions.action.showRecommendedExtensions
// - workbench.extensions.action.showRecommendedKeymapExtensions
// - workbench.extensions.action.showReleasedVersion
// - workbench.extensions.action.stopExtensionHostProfile
// - workbench.extensions.action.switchToPreRlease
// - workbench.extensions.action.switchToRelease
// - workbench.extensions.action.toggleApplyToAllProfiles
// - workbench.extensions.action.toggleAutoUpdateForExtension
// - workbench.extensions.action.toggleAutoUpdatesForPublisher
// - workbench.extensions.action.toggleIgnoreExtension
// - workbench.extensions.action.undoIgnoredRecommendation
// - workbench.extensions.action.updateAllExtensions
// - workbench.extensions.command.installFromVSIX
// - workbench.extensions.installMissingDependencies
// - workbench.files.action.acceptLocalChanges
// - workbench.files.action.collapseExplorerFolders
// - workbench.files.action.compareFileWith
// - workbench.files.action.compareNewUntitledTextFiles
// - workbench.files.action.createFileFromExplorer
// - workbench.files.action.createFolderFromExplorer
// - workbench.files.action.focusFilesExplorer
// - workbench.files.action.refreshFilesExplorer
// - workbench.files.action.revertLocalChanges
// - workbench.files.action.saveAllInGroup
// - workbench.files.action.showActiveFileInExplorer
// - workbench.getCodeExchangeProxyEndpoints
// - workbench.notebook.layout.configure
// - workbench.notebook.layout.configure.editorTitle
// - workbench.notebook.layout.gettingStarted
// - workbench.notebook.layout.select
// - workbench.notebook.layout.webview.reset
// - workbench.output.action.clearOutput
// - workbench.output.action.switchBetweenOutputs
// - workbench.output.action.toggleAutoScroll
// - workbench.panel.chatSidebar
// - workbench.panel.chatSidebar.resetViewContainerLocation
// - workbench.panel.markers.resetViewContainerLocation
// - workbench.panel.markers.view.focus
// - workbench.panel.markers.view.removeView
// - workbench.panel.markers.view.resetViewLocation
// - workbench.panel.markers.view.toggleVisibility
// - workbench.panel.output.focus
// - workbench.panel.output.removeView
// - workbench.panel.output.resetViewContainerLocation
// - workbench.panel.output.resetViewLocation
// - workbench.panel.output.toggleVisibility
// - workbench.panel.repl.resetViewContainerLocation
// - workbench.panel.repl.view.focus
// - workbench.panel.repl.view.removeView
// - workbench.panel.repl.view.resetViewLocation
// - workbench.panel.repl.view.toggleVisibility
// - workbench.panel.testResults.resetViewContainerLocation
// - workbench.panel.testResults.view.focus
// - workbench.panel.testResults.view.resetViewLocation
// - workbench.profiles.actions.cleanupProfiles
// - workbench.profiles.actions.createFromCurrentProfile
// - workbench.profiles.actions.createProfile
// - workbench.profiles.actions.createTemporaryProfile
// - workbench.profiles.actions.deleteProfile
// - workbench.profiles.actions.editCurrentProfile
// - workbench.profiles.actions.exportProfile
// - workbench.profiles.actions.help
// - workbench.profiles.actions.importProfile
// - workbench.profiles.actions.manage
// - workbench.profiles.actions.manageProfiles
// - workbench.profiles.actions.newWindowWithProfile
// - workbench.profiles.actions.profileEntry.__default__profile__
// - workbench.profiles.actions.renameProfile
// - workbench.profiles.actions.resetWorkspaces
// - workbench.profiles.actions.showProfileContents
// - workbench.profiles.actions.switchProfile
// - workbench.remoteTunnel.actions.configure
// - workbench.remoteTunnel.actions.connecting
// - workbench.remoteTunnel.actions.copyToClipboard
// - workbench.remoteTunnel.actions.learnMore
// - workbench.remoteTunnel.actions.manage
// - workbench.remoteTunnel.actions.showLog
// - workbench.remoteTunnel.actions.turnOff
// - workbench.remoteTunnel.actions.turnOn
// - workbench.scm.action.collapseAllRepositories
// - workbench.scm.action.expandAllRepositories
// - workbench.scm.action.focusNextInput
// - workbench.scm.action.focusNextResourceGroup
// - workbench.scm.action.focusPreviousInput
// - workbench.scm.action.focusPreviousResourceGroup
// - workbench.scm.action.repositories.setSortKey.discoveryTime
// - workbench.scm.action.repositories.setSortKey.name
// - workbench.scm.action.repositories.setSortKey.path
// - workbench.scm.action.scm.showChangesSummary
// - workbench.scm.action.scm.viewChanges
// - workbench.scm.action.setListViewMode
// - workbench.scm.action.setListViewModeNavigation
// - workbench.scm.action.setSortKey.name
// - workbench.scm.action.setSortKey.path
// - workbench.scm.action.setSortKey.status
// - workbench.scm.action.setTreeViewMode
// - workbench.scm.action.setTreeViewModeNavigation
// - workbench.scm.action.showIncomingChanges.always
// - workbench.scm.action.showIncomingChanges.auto
// - workbench.scm.action.showIncomingChanges.never
// - workbench.scm.action.showOutgoingChanges.always
// - workbench.scm.action.showOutgoingChanges.auto
// - workbench.scm.action.showOutgoingChanges.never
// - workbench.scm.focus
// - workbench.scm.removeView
// - workbench.scm.repositories.focus
// - workbench.scm.repositories.resetViewLocation
// - workbench.scm.resetViewLocation
// - workbench.scm.toggleVisibility
// - workbench.trust.configure
// - workbench.trust.manage
// - workbench.userData.actions.cancelTurnOn
// - workbench.userData.actions.openSyncBackupsFolder
// - workbench.userData.actions.signin
// - workbench.userData.actions.turningOn
// - workbench.userDataSync.actions.acceptMerges
// - workbench.userDataSync.actions.configure
// - workbench.userDataSync.actions.downloadSyncActivity
// - workbench.userDataSync.actions.help
// - workbench.userDataSync.actions.manage
// - workbench.userDataSync.actions.settings
// - workbench.userDataSync.actions.showConflicts
// - workbench.userDataSync.actions.showLog
// - workbench.userDataSync.actions.showSyncedData
// - workbench.userDataSync.actions.syncNow
// - workbench.userDataSync.actions.turnOff
// - workbench.userDataSync.actions.turnOn
// - workbench.view.debug.resetViewContainerLocation
// - workbench.view.editSessions.resetViewContainerLocation
// - workbench.view.explorer.resetViewContainerLocation
// - workbench.view.extension.cmake-view
// - workbench.view.extension.cmake-view.resetViewContainerLocation
// - workbench.view.extension.cspell-explorer
// - workbench.view.extension.cspell-explorer.resetViewContainerLocation
// - workbench.view.extension.dbclient-search-result
// - workbench.view.extension.dbclient-search-result.resetViewContainerLocation
// - workbench.view.extension.dockerView
// - workbench.view.extension.dockerView.resetViewContainerLocation
// - workbench.view.extension.flutter
// - workbench.view.extension.flutter.resetViewContainerLocation
// - workbench.view.extension.github-cweijan-mysql
// - workbench.view.extension.github-cweijan-mysql.resetViewContainerLocation
// - workbench.view.extension.github-cweijan-nosql
// - workbench.view.extension.github-cweijan-nosql.resetViewContainerLocation
// - workbench.view.extension.github-dbclient-history
// - workbench.view.extension.github-dbclient-history.resetViewContainerLocation
// - workbench.view.extension.gitlens
// - workbench.view.extension.gitlens.resetViewContainerLocation
// - workbench.view.extension.gitlensInspect
// - workbench.view.extension.gitlensInspect.resetViewContainerLocation
// - workbench.view.extension.gitlensPanel
// - workbench.view.extension.gitlensPanel.resetViewContainerLocation
// - workbench.view.extension.gitlensPatch
// - workbench.view.extension.gitlensPatch.resetViewContainerLocation
// - workbench.view.extension.liveshare
// - workbench.view.extension.liveshare.resetViewContainerLocation
// - workbench.view.extension.package-explorer
// - workbench.view.extension.package-explorer.resetViewContainerLocation
// - workbench.view.extension.platformio
// - workbench.view.extension.platformio.resetViewContainerLocation
// - workbench.view.extension.project-manager
// - workbench.view.extension.project-manager.resetViewContainerLocation
// - workbench.view.extension.references-view
// - workbench.view.extension.references-view.resetViewContainerLocation
// - workbench.view.extension.test
// - workbench.view.extension.test.resetViewContainerLocation
// - workbench.view.extensions.resetViewContainerLocation
// - workbench.view.remote
// - workbench.view.remote.resetViewContainerLocation
// - workbench.view.scm.resetViewContainerLocation
// - workbench.view.search.focus
// - workbench.view.search.removeView
// - workbench.view.search.resetViewContainerLocation
// - workbench.view.search.resetViewLocation
// - workbench.view.search.toggleVisibility
// - workbench.view.sync
// - workbench.view.sync.resetViewContainerLocation
// - workbench.view.testCoverage.focus
// - workbench.view.testCoverage.resetViewLocation
// - workbench.view.testing.focus
// - workbench.view.testing.resetViewLocation
// - workbench.views.editSessions.data.focus
// - workbench.views.editSessions.data.resetViewLocation
// - workbench.views.extensions.builtinFeatureExtensions.focus
// - workbench.views.extensions.builtinFeatureExtensions.resetViewLocation
// - workbench.views.extensions.builtinProgrammingLanguageExtensions.focus
// - workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation
// - workbench.views.extensions.builtinThemeExtensions.focus
// - workbench.views.extensions.builtinThemeExtensions.resetViewLocation
// - workbench.views.extensions.deprecatedExtensions.focus
// - workbench.views.extensions.deprecatedExtensions.resetViewLocation
// - workbench.views.extensions.disabled.focus
// - workbench.views.extensions.disabled.resetViewLocation
// - workbench.views.extensions.enabled.focus
// - workbench.views.extensions.enabled.resetViewLocation
// - workbench.views.extensions.installed.focus
// - workbench.views.extensions.installed.resetViewLocation
// - workbench.views.extensions.marketplace.focus
// - workbench.views.extensions.marketplace.resetViewLocation
// - workbench.views.extensions.otherRecommendations.focus
// - workbench.views.extensions.otherRecommendations.resetViewLocation
// - workbench.views.extensions.popular.focus
// - workbench.views.extensions.popular.resetViewLocation
// - workbench.views.extensions.searchBuiltin.focus
// - workbench.views.extensions.searchBuiltin.resetViewLocation
// - workbench.views.extensions.searchDisabled.focus
// - workbench.views.extensions.searchDisabled.resetViewLocation
// - workbench.views.extensions.searchEnabled.focus
// - workbench.views.extensions.searchEnabled.resetViewLocation
// - workbench.views.extensions.searchInstalled.focus
// - workbench.views.extensions.searchInstalled.resetViewLocation
// - workbench.views.extensions.searchOutdated.focus
// - workbench.views.extensions.searchOutdated.resetViewLocation
// - workbench.views.extensions.searchRecentlyUpdated.focus
// - workbench.views.extensions.searchRecentlyUpdated.resetViewLocation
// - workbench.views.extensions.searchWorkspaceUnsupported.focus
// - workbench.views.extensions.searchWorkspaceUnsupported.resetViewLocation
// - workbench.views.extensions.untrustedPartiallySupportedExtensions.focus
// - workbench.views.extensions.untrustedPartiallySupportedExtensions.resetViewLocation
// - workbench.views.extensions.untrustedUnsupportedExtensions.focus
// - workbench.views.extensions.untrustedUnsupportedExtensions.resetViewLocation
// - workbench.views.extensions.virtualPartiallySupportedExtensions.focus
// - workbench.views.extensions.virtualPartiallySupportedExtensions.resetViewLocation
// - workbench.views.extensions.virtualUnsupportedExtensions.focus
// - workbench.views.extensions.virtualUnsupportedExtensions.resetViewLocation
// - workbench.views.extensions.workspaceRecommendations.focus
// - workbench.views.extensions.workspaceRecommendations.resetViewLocation
// - workbench.views.sync.conflicts.focus
// - workbench.views.sync.conflicts.resetViewLocation
// - workbench.views.sync.externalActivity.focus
// - workbench.views.sync.externalActivity.resetViewLocation
// - workbench.views.sync.localActivity.focus
// - workbench.views.sync.localActivity.resetViewLocation
// - workbench.views.sync.machines.focus
// - workbench.views.sync.machines.resetViewLocation
// - workbench.views.sync.remoteActivity.focus
// - workbench.views.sync.remoteActivity.resetViewLocation
// - workbench.views.sync.troubleshoot.focus
// - workbench.views.sync.troubleshoot.resetViewLocation
// - workspaceEnvironments.focus
// - workspaceEnvironments.removeView
// - workspaceEnvironments.resetViewLocation
// - workspaceEnvironments.toggleVisibility
// - ~remote.forwardedPorts.focus
// - ~remote.forwardedPorts.removeView
// - ~remote.forwardedPorts.resetViewLocation
// - ~remote.forwardedPorts.toggleVisibility
// - ~remote.forwardedPortsContainer
// - ~remote.forwardedPortsContainer.resetViewContainerLocation
